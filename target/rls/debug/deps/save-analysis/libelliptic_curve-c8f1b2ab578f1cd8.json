{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12","program":"/Users/julia/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","elliptic_curve","--edition=2018","/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","--cfg","feature=\"arithmetic\"","--cfg","feature=\"bitvec\"","--cfg","feature=\"ecdh\"","--cfg","feature=\"ff\"","--cfg","feature=\"group\"","--cfg","feature=\"hazmat\"","--cfg","feature=\"zeroize\"","-C","metadata=c8f1b2ab578f1cd8","-C","extra-filename=-c8f1b2ab578f1cd8","--out-dir","/Users/julia/ruhackathon/target/rls/debug/deps","-L","dependency=/Users/julia/ruhackathon/target/rls/debug/deps","--extern","bitvec=/Users/julia/ruhackathon/target/rls/debug/deps/libbitvec-8bcb81f8cd20cb06.rmeta","--extern","ff=/Users/julia/ruhackathon/target/rls/debug/deps/libff-9ff574acb68de976.rmeta","--extern","generic_array=/Users/julia/ruhackathon/target/rls/debug/deps/libgeneric_array-b702d19f2d78d877.rmeta","--extern","group=/Users/julia/ruhackathon/target/rls/debug/deps/libgroup-c3ca1d1195c7aa44.rmeta","--extern","rand_core=/Users/julia/ruhackathon/target/rls/debug/deps/librand_core-4070f354d6c9c31d.rmeta","--extern","subtle=/Users/julia/ruhackathon/target/rls/debug/deps/libsubtle-bf8d05422f1039df.rmeta","--extern","zeroize=/Users/julia/ruhackathon/target/rls/debug/deps/libzeroize-e9e07dfe82f48b74.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/julia/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/julia/ruhackathon/target/rls/debug/deps/libelliptic_curve-c8f1b2ab578f1cd8.rmeta"},"prelude":{"crate_id":{"name":"elliptic_curve","disambiguator":[13807147705136224232,16251544911896674658]},"crate_root":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src","external_crates":[{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17161976177339802527,9637120080719870273]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12784072134307519025,4657485898025748013]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8860544973196061204,9932137894390183628]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":4,"id":{"name":"subtle","disambiguator":[4522810956575255828,4910096643372407593]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":5,"id":{"name":"std","disambiguator":[14497711731351875891,7574154950596153320]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":6,"id":{"name":"alloc","disambiguator":[15484098214765895148,4360652648143560453]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":7,"id":{"name":"libc","disambiguator":[13802683045354889200,17279120461159080731]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":8,"id":{"name":"unwind","disambiguator":[13733846401634403672,16568137600355934567]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":9,"id":{"name":"cfg_if","disambiguator":[5926527291982439463,7261863668131194074]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":10,"id":{"name":"hashbrown","disambiguator":[2147386378482378397,1448349958257004752]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":11,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[8504510625746843556,11549570195915831773]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":12,"id":{"name":"rustc_demangle","disambiguator":[1145582961014725186,16562354883654090131]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":13,"id":{"name":"std_detect","disambiguator":[6582153069738696943,14519107576634371424]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":14,"id":{"name":"addr2line","disambiguator":[15498041504304623936,9266600846380482125]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":15,"id":{"name":"gimli","disambiguator":[12608136573466536856,1503974727608604885]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":16,"id":{"name":"object","disambiguator":[16755883997827362908,2889333423780235391]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","num":17,"id":{"name":"panic_unwind","disambiguator":[3009561993154964965,13259943199418826037]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","num":18,"id":{"name":"generic_array","disambiguator":[7429325815917903621,4953779473884636296]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","num":19,"id":{"name":"typenum","disambiguator":[14509014512433398701,5747145694384200891]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":20,"id":{"name":"ff","disambiguator":[2105630046445953287,12085405015627007269]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":21,"id":{"name":"bitvec","disambiguator":[14851539261954789943,15604764097012981211]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":22,"id":{"name":"funty","disambiguator":[11994280634423852699,10648987090702083785]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":23,"id":{"name":"radium","disambiguator":[16917809150809643676,3878275019157653836]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":24,"id":{"name":"tap","disambiguator":[12632791922117082934,5412440633162020162]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":25,"id":{"name":"wyz","disambiguator":[14138619879403673573,1821794984299287805]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","num":26,"id":{"name":"rand_core","disambiguator":[11887644693504216196,7259550397967195635]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":27,"id":{"name":"getrandom","disambiguator":[17488875655129187426,16701060034023178929]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":28,"id":{"name":"cfg_if","disambiguator":[6669231008839721604,5451692867657612098]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":29,"id":{"name":"libc","disambiguator":[12590972830871631501,16526445224950325690]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":30,"id":{"name":"zeroize","disambiguator":[5684867084009683894,5518746224732812858]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","num":31,"id":{"name":"zeroize_derive","disambiguator":[16940183091903201555,668267786870049164]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","num":32,"id":{"name":"group","disambiguator":[2763280832928448759,993267773673036501]}}],"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":0,"byte_end":4216,"line_start":1,"line_end":142,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":2899},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4310,"byte_end":4313,"line_start":3,"line_end":3,"column_start":21,"column_end":24},"alias_span":null,"name":"Add","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2930},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4315,"byte_end":4324,"line_start":3,"line_end":3,"column_start":26,"column_end":35},"alias_span":null,"name":"AddAssign","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2909},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4326,"byte_end":4329,"line_start":3,"line_end":3,"column_start":37,"column_end":40},"alias_span":null,"name":"Mul","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2926},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4331,"byte_end":4334,"line_start":3,"line_end":3,"column_start":42,"column_end":45},"alias_span":null,"name":"Neg","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2904},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4336,"byte_end":4339,"line_start":3,"line_end":3,"column_start":47,"column_end":50},"alias_span":null,"name":"Sub","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":1,"index":2934},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4341,"byte_end":4350,"line_start":3,"line_end":3,"column_start":52,"column_end":61},"alias_span":null,"name":"SubAssign","value":"","parent":{"krate":0,"index":4}},{"kind":"Use","ref_id":{"krate":0,"index":976},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1375,"byte_end":1380,"line_start":57,"line_end":57,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":977},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1375,"byte_end":1380,"line_start":57,"line_end":57,"column_start":13,"column_end":18},"alias_span":null,"name":"Error","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":218},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1382,"byte_end":1388,"line_start":57,"line_end":57,"column_start":20,"column_end":26},"alias_span":null,"name":"Result","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":229},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1402,"byte_end":1407,"line_start":58,"line_end":58,"column_start":12,"column_end":17},"alias_span":null,"name":"Order","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":989},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1428,"byte_end":1439,"line_start":59,"line_end":59,"column_start":20,"column_end":31},"alias_span":null,"name":"ScalarBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":18,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1453,"byte_end":1466,"line_start":62,"line_end":62,"column_start":9,"column_end":22},"alias_span":null,"name":"generic_array","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":19,"index":2758},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1484,"byte_end":1490,"line_start":62,"line_end":62,"column_start":40,"column_end":46},"alias_span":null,"name":"consts","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":26,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1501,"byte_end":1510,"line_start":63,"line_end":63,"column_start":9,"column_end":18},"alias_span":null,"name":"rand_core","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1520,"byte_end":1526,"line_start":64,"line_end":64,"column_start":9,"column_end":15},"alias_span":null,"name":"subtle","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":459},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1599,"byte_end":1610,"line_start":69,"line_end":69,"column_start":17,"column_end":28},"alias_span":null,"name":"AffinePoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":457},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1612,"byte_end":1632,"line_start":69,"line_end":69,"column_start":30,"column_end":50},"alias_span":null,"name":"ProjectiveArithmetic","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":461},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1634,"byte_end":1649,"line_start":69,"line_end":69,"column_start":52,"column_end":67},"alias_span":null,"name":"ProjectivePoint","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1009},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1672,"byte_end":1681,"line_start":70,"line_end":70,"column_start":21,"column_end":30},"alias_span":null,"name":"PublicKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1003},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1710,"byte_end":1723,"line_start":71,"line_end":71,"column_start":28,"column_end":41},"alias_span":null,"name":"NonZeroScalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":442},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1725,"byte_end":1731,"line_start":71,"line_end":71,"column_start":43,"column_end":49},"alias_span":null,"name":"Scalar","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":444},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1733,"byte_end":1743,"line_start":71,"line_end":71,"column_start":51,"column_end":61},"alias_span":null,"name":"ScalarBits","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1757,"byte_end":1759,"line_start":73,"line_end":73,"column_start":5,"column_end":7},"alias_span":null,"name":"ff","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":20,"index":63},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1768,"byte_end":1773,"line_start":73,"line_end":73,"column_start":16,"column_end":21},"alias_span":null,"name":"Field","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1780,"byte_end":1785,"line_start":74,"line_end":74,"column_start":5,"column_end":10},"alias_span":null,"name":"group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":32,"index":173},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1794,"byte_end":1799,"line_start":74,"line_end":74,"column_start":19,"column_end":24},"alias_span":null,"name":"Group","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1024},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1880,"byte_end":1891,"line_start":78,"line_end":78,"column_start":22,"column_end":33},"alias_span":null,"name":"SecretBytes","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":766},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1893,"byte_end":1904,"line_start":78,"line_end":78,"column_start":35,"column_end":46},"alias_span":null,"name":"SecretValue","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1018},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2070,"byte_end":2079,"line_start":87,"line_end":87,"column_start":21,"column_end":30},"alias_span":null,"name":"SecretKey","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":30,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2117,"byte_end":2124,"line_start":89,"line_end":89,"column_start":9,"column_end":16},"alias_span":null,"name":"zeroize","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":0,"byte_end":4216,"line_start":1,"line_end":142,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":34},{"krate":0,"index":186},{"krate":0,"index":193},{"krate":0,"index":210},{"krate":0,"index":222},{"krate":0,"index":232},{"krate":0,"index":446},{"krate":0,"index":463},{"krate":0,"index":590},{"krate":0,"index":679},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":797},{"krate":0,"index":800},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":807},{"krate":0,"index":810},{"krate":0,"index":813},{"krate":0,"index":816},{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819},{"krate":0,"index":822},{"krate":0,"index":825},{"krate":0,"index":828},{"krate":0,"index":831},{"krate":0,"index":832},{"krate":0,"index":835},{"krate":0,"index":838},{"krate":0,"index":841},{"krate":0,"index":842},{"krate":0,"index":845},{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":852},{"krate":0,"index":855},{"krate":0,"index":856},{"krate":0,"index":859},{"krate":0,"index":862},{"krate":0,"index":865},{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":872},{"krate":0,"index":875},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":885},{"krate":0,"index":887}],"decl_id":null,"docs":" General purpose Elliptic Curve Cryptography (ECC) support, including types\n and traits for representing various elliptic curve forms, scalars, points,\n and public/secret keys composed thereof.","sig":null,"attributes":[{"value":"/ General purpose Elliptic Curve Cryptography (ECC) support, including types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":0,"byte_end":78,"line_start":1,"line_end":1,"column_start":1,"column_end":79}},{"value":"/ and traits for representing various elliptic curve forms, scalars, points,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":79,"byte_end":157,"line_start":2,"line_end":2,"column_start":1,"column_end":79}},{"value":"/ and public/secret keys composed thereof.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":158,"byte_end":202,"line_start":3,"line_end":3,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":203,"byte_end":206,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ ## Minimum Supported Rust Version","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":207,"byte_end":244,"line_start":5,"line_end":5,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":245,"byte_end":248,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ Rust **1.47** or higher.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":249,"byte_end":277,"line_start":7,"line_end":7,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":278,"byte_end":281,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Minimum supported Rust version can be changed in the future, but it will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":282,"byte_end":361,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ done with a minor version bump.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":362,"byte_end":397,"line_start":10,"line_end":10,"column_start":1,"column_end":36}},{"value":"no_std","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":399,"byte_end":409,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"forbid(unsafe_code, clippy :: unwrap_used)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":449,"byte_end":493,"line_start":14,"line_end":14,"column_start":1,"column_end":45}},{"value":"warn(missing_docs, rust_2018_idioms, unused_qualifications)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":494,"byte_end":557,"line_start":15,"line_end":15,"column_start":1,"column_end":64}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":12},{"krate":0,"index":15},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30}],"decl_id":null,"docs":" Traits for arithmetic operations on elliptic curve field elements.\n","sig":null,"attributes":[{"value":"/ Traits for arithmetic operations on elliptic curve field elements.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4218,"byte_end":4288,"line_start":1,"line_end":1,"column_start":1,"column_end":71}}]},{"kind":"Trait","id":{"krate":0,"index":27},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4467,"byte_end":4473,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Invert","qualname":"::ops::Invert","value":"Invert","parent":null,"children":[{"krate":0,"index":28},{"krate":0,"index":29}],"decl_id":null,"docs":" Perform an inversion on a field element (i.e. base field element or scalar)\n","sig":null,"attributes":[{"value":"/ Perform an inversion on a field element (i.e. base field element or scalar)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4377,"byte_end":4456,"line_start":7,"line_end":7,"column_start":1,"column_end":80}}]},{"kind":"Type","id":{"krate":0,"index":28},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4512,"byte_end":4518,"line_start":10,"line_end":10,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::Invert::Output","value":"type Output;","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Field element type\n","sig":null,"attributes":[{"value":"/ Field element type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4480,"byte_end":4502,"line_start":9,"line_end":9,"column_start":5,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":29},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4560,"byte_end":4566,"line_start":13,"line_end":13,"column_start":8,"column_end":14},"name":"invert","qualname":"::ops::Invert::invert","value":"pub fn invert(&Self) -> CtOption<Self::Output>","parent":{"krate":0,"index":27},"children":[],"decl_id":null,"docs":" Invert a field element.\n","sig":null,"attributes":[{"value":"/ Invert a field element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4525,"byte_end":4552,"line_start":12,"line_end":12,"column_start":5,"column_end":32}}]},{"kind":"Mod","id":{"krate":0,"index":34},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sec1","qualname":"::sec1","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","parent":null,"children":[{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":39},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":45},{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":67},{"krate":0,"index":70},{"krate":0,"index":73},{"krate":0,"index":74},{"krate":0,"index":77},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":84},{"krate":0,"index":87},{"krate":0,"index":90},{"krate":0,"index":93},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":101},{"krate":0,"index":104},{"krate":0,"index":107},{"krate":0,"index":108},{"krate":0,"index":109},{"krate":0,"index":112},{"krate":0,"index":115},{"krate":0,"index":116},{"krate":0,"index":118},{"krate":0,"index":120},{"krate":0,"index":122},{"krate":0,"index":889},{"krate":0,"index":892},{"krate":0,"index":895},{"krate":0,"index":898},{"krate":0,"index":900},{"krate":0,"index":903},{"krate":0,"index":905},{"krate":0,"index":909},{"krate":0,"index":912},{"krate":0,"index":124},{"krate":0,"index":149},{"krate":0,"index":152},{"krate":0,"index":155},{"krate":0,"index":157},{"krate":0,"index":160},{"krate":0,"index":915},{"krate":0,"index":926},{"krate":0,"index":929},{"krate":0,"index":933},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":944},{"krate":0,"index":947},{"krate":0,"index":163},{"krate":0,"index":952},{"krate":0,"index":965},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":971},{"krate":0,"index":973},{"krate":0,"index":974},{"krate":0,"index":167},{"krate":0,"index":173},{"krate":0,"index":175},{"krate":0,"index":178},{"krate":0,"index":181},{"krate":0,"index":183}],"decl_id":null,"docs":" SEC1 encoding support.","sig":null,"attributes":[{"value":"/ SEC1 encoding support.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4770,"byte_end":4796,"line_start":1,"line_end":1,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4797,"byte_end":4800,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Support for the `Elliptic-Curve-Point-to-Octet-String` encoding described","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4801,"byte_end":4878,"line_start":3,"line_end":3,"column_start":1,"column_end":78}},{"value":"/ in SEC1: Elliptic Curve Cryptography (Version 2.0) section 2.3.3 (p.10):","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4879,"byte_end":4955,"line_start":4,"line_end":4,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4956,"byte_end":4959,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ <https://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":4960,"byte_end":4998,"line_start":6,"line_end":6,"column_start":1,"column_end":39}}]},{"kind":"Type","id":{"krate":0,"index":118},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":5873,"byte_end":5892,"line_start":42,"line_end":42,"column_start":10,"column_end":29},"name":"CompressedPointSize","qualname":"::sec1::CompressedPointSize","value":"<<C as crate::Curve>::FieldSize as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of a compressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x02` or `0x03` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of a compressed point for the given elliptic curve when encoded","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":5672,"byte_end":5744,"line_start":39,"line_end":39,"column_start":1,"column_end":73}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":5745,"byte_end":5812,"line_start":40,"line_end":40,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x02` or `0x03` tag byte).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":5813,"byte_end":5863,"line_start":41,"line_end":41,"column_start":1,"column_end":51}}]},{"kind":"Type","id":{"krate":0,"index":120},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6146,"byte_end":6167,"line_start":47,"line_end":47,"column_start":10,"column_end":31},"name":"UncompressedPointSize","qualname":"::sec1::UncompressedPointSize","value":"<UntaggedPointSize<C> as Add<U1>>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an uncompressed point for the given elliptic curve when encoded\n using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm\n (including leading `0x04` tag byte).\n","sig":null,"attributes":[{"value":"/ Size of an uncompressed point for the given elliptic curve when encoded","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":5952,"byte_end":6027,"line_start":44,"line_end":44,"column_start":1,"column_end":76}},{"value":"/ using the SEC1 `Elliptic-Curve-Point-to-Octet-String` algorithm","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6028,"byte_end":6095,"line_start":45,"line_end":45,"column_start":1,"column_end":68}},{"value":"/ (including leading `0x04` tag byte).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6096,"byte_end":6136,"line_start":46,"line_end":46,"column_start":1,"column_end":41}}]},{"kind":"Type","id":{"krate":0,"index":122},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6282,"byte_end":6299,"line_start":50,"line_end":50,"column_start":10,"column_end":27},"name":"UntaggedPointSize","qualname":"::sec1::UntaggedPointSize","value":"<<C as crate::Curve>::FieldSize as Add>::Output","parent":null,"children":[],"decl_id":null,"docs":" Size of an untagged point for given elliptic curve.\n","sig":null,"attributes":[{"value":"/ Size of an untagged point for given elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6217,"byte_end":6272,"line_start":49,"line_end":49,"column_start":1,"column_end":56}}]},{"kind":"Struct","id":{"krate":0,"index":889},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6634,"byte_end":6646,"line_start":58,"line_end":58,"column_start":12,"column_end":24},"name":"EncodedPoint","qualname":"::sec1::EncodedPoint","value":"EncodedPoint {  }","parent":null,"children":[{"krate":0,"index":891}],"decl_id":null,"docs":" SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ SEC1 encoded curve point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6355,"byte_end":6384,"line_start":52,"line_end":52,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6385,"byte_end":6388,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ This type is an enum over the compressed and uncompressed encodings,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6389,"byte_end":6461,"line_start":54,"line_end":54,"column_start":1,"column_end":73}},{"value":"/ useful for cases where either encoding can be supported, or conversions","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6462,"byte_end":6537,"line_start":55,"line_end":55,"column_start":1,"column_end":76}},{"value":"/ between the two forms.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6538,"byte_end":6564,"line_start":56,"line_end":56,"column_start":1,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":126},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7309,"byte_end":7319,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<EncodedPoint<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode elliptic curve point (compressed or uncompressed) from the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7019,"byte_end":7088,"line_start":74,"line_end":74,"column_start":5,"column_end":74}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7093,"byte_end":7157,"line_start":75,"line_end":75,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7162,"byte_end":7222,"line_start":76,"line_end":76,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7227,"byte_end":7247,"line_start":77,"line_end":77,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7252,"byte_end":7255,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7260,"byte_end":7297,"line_start":79,"line_end":79,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":128},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":8065,"byte_end":8084,"line_start":101,"line_end":101,"column_start":12,"column_end":31},"name":"from_untagged_bytes","qualname":"<EncodedPoint<C>>::from_untagged_bytes","value":"pub fn from_untagged_bytes(&GenericArray<u8, UntaggedPointSize<C>>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Decode elliptic curve point from raw uncompressed coordinates, i.e.\n encoded as the concatenated `x || y` coordinates with no leading SEC1\n tag byte (which would otherwise be `0x04` for an uncompressed point).\n","sig":null,"attributes":[{"value":"/ Decode elliptic curve point from raw uncompressed coordinates, i.e.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7826,"byte_end":7897,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ encoded as the concatenated `x || y` coordinates with no leading SEC1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7902,"byte_end":7975,"line_start":99,"line_end":99,"column_start":5,"column_end":78}},{"value":"/ tag byte (which would otherwise be `0x04` for an uncompressed point).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":7980,"byte_end":8053,"line_start":100,"line_end":100,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":8409,"byte_end":8432,"line_start":108,"line_end":108,"column_start":12,"column_end":35},"name":"from_affine_coordinates","qualname":"<EncodedPoint<C>>::from_affine_coordinates","value":"pub fn from_affine_coordinates(&FieldBytes<C>, &FieldBytes<C>, bool) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Encode an elliptic curve point from big endian serialized coordinates\n (with optional point compression)\n","sig":null,"attributes":[{"value":"/ Encode an elliptic curve point from big endian serialized coordinates","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":8282,"byte_end":8355,"line_start":106,"line_end":106,"column_start":5,"column_end":78}},{"value":"/ (with optional point compression)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":8360,"byte_end":8397,"line_start":107,"line_end":107,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":130},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9296,"byte_end":9311,"line_start":135,"line_end":135,"column_start":12,"column_end":27},"name":"from_secret_key","qualname":"<EncodedPoint<C>>::from_secret_key","value":"pub fn from_secret_key(&SecretKey<C>, bool) -> Self where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: ToEncodedPoint<C>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Compute [`EncodedPoint`] representing the public key for the provided\n [`SecretKey`].","sig":null,"attributes":[{"value":"/ Compute [`EncodedPoint`] representing the public key for the provided","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":8950,"byte_end":9023,"line_start":128,"line_end":128,"column_start":5,"column_end":78}},{"value":"/ [`SecretKey`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9028,"byte_end":9046,"line_start":129,"line_end":129,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9051,"byte_end":9054,"line_start":130,"line_end":130,"column_start":5,"column_end":8}},{"value":"/ The `compress` flag requests point compression.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9059,"byte_end":9110,"line_start":131,"line_end":131,"column_start":5,"column_end":56}},{"value":"cfg(all(feature = \"arithmetic\", feature = \"zeroize\"))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9115,"byte_end":9171,"line_start":132,"line_end":132,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9791,"byte_end":9799,"line_start":148,"line_end":148,"column_start":12,"column_end":20},"name":"identity","qualname":"<EncodedPoint<C>>::identity","value":"pub fn identity() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Return [`EncodedPoint`] representing the additive identity\n (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Return [`EncodedPoint`] representing the additive identity","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9682,"byte_end":9744,"line_start":146,"line_end":146,"column_start":5,"column_end":67}},{"value":"/ (a.k.a. point at infinity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9749,"byte_end":9779,"line_start":147,"line_end":147,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9907,"byte_end":9910,"line_start":153,"line_end":153,"column_start":12,"column_end":15},"name":"len","qualname":"<EncodedPoint<C>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Get the length of the encoded point in bytes\n","sig":null,"attributes":[{"value":"/ Get the length of the encoded point in bytes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9847,"byte_end":9895,"line_start":152,"line_end":152,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":133},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":10071,"byte_end":10079,"line_start":158,"line_end":158,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<EncodedPoint<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &[u8]","parent":null,"children":[],"decl_id":null,"docs":" Get byte slice containing the serialized [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get byte slice containing the serialized [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":9997,"byte_end":10059,"line_start":157,"line_end":157,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":10636,"byte_end":10653,"line_start":173,"line_end":173,"column_start":12,"column_end":29},"name":"to_untagged_bytes","qualname":"<EncodedPoint<C>>::to_untagged_bytes","value":"pub fn to_untagged_bytes(&Self)\n-> Option<GenericArray<u8, UntaggedPointSize<C>>> where C: Curve +\nProjectiveArithmetic, AffinePoint<C>: ConditionallySelectable + Default +\nDecompressPoint<C> + ToEncodedPoint<C>, Scalar<C>: PrimeField<Repr =\nFieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Serialize point as raw uncompressed coordinates without tag byte, i.e.\n encoded as the concatenated `x || y` coordinates.\n","sig":null,"attributes":[{"value":"/ Serialize point as raw uncompressed coordinates without tag byte, i.e.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":10399,"byte_end":10473,"line_start":169,"line_end":169,"column_start":5,"column_end":79}},{"value":"/ encoded as the concatenated `x || y` coordinates.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":10478,"byte_end":10531,"line_start":170,"line_end":170,"column_start":5,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":10536,"byte_end":10566,"line_start":171,"line_end":171,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":136},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11231,"byte_end":11242,"line_start":187,"line_end":187,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<EncodedPoint<C>>::is_identity","value":"pub fn is_identity(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] the additive identity? (a.k.a. point at infinity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11141,"byte_end":11219,"line_start":186,"line_end":186,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":137},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11356,"byte_end":11369,"line_start":192,"line_end":192,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<EncodedPoint<C>>::is_compressed","value":"pub fn is_compressed(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this [`EncodedPoint`] compressed?\n","sig":null,"attributes":[{"value":"/ Is this [`EncodedPoint`] compressed?","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11304,"byte_end":11344,"line_start":191,"line_end":191,"column_start":5,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":138},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11514,"byte_end":11522,"line_start":197,"line_end":197,"column_start":12,"column_end":20},"name":"compress","qualname":"<EncodedPoint<C>>::compress","value":"pub fn compress(&Self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Compress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11433,"byte_end":11502,"line_start":196,"line_end":196,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":139},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11949,"byte_end":11959,"line_start":207,"line_end":207,"column_start":12,"column_end":22},"name":"decompress","qualname":"<EncodedPoint<C>>::decompress","value":"pub fn decompress(&Self) -> Option<Self> where C: Curve +\nProjectiveArithmetic, Scalar<C>: PrimeField<Repr = FieldBytes<C>>,\nAffinePoint<C>: ConditionallySelectable + Default + DecompressPoint<C> +\nToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Decompress this [`EncodedPoint`], returning a new [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11773,"byte_end":11844,"line_start":204,"line_end":204,"column_start":5,"column_end":76}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":11849,"byte_end":11879,"line_start":205,"line_end":205,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":141},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":12657,"byte_end":12663,"line_start":225,"line_end":225,"column_start":12,"column_end":18},"name":"encode","qualname":"<EncodedPoint<C>>::encode","value":"pub fn encode<T>(T, bool) -> Self where T: ToEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Encode an [`EncodedPoint`] from the desired type\n","sig":null,"attributes":[{"value":"/ Encode an [`EncodedPoint`] from the desired type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":12593,"byte_end":12645,"line_start":224,"line_end":224,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":143},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":12873,"byte_end":12879,"line_start":233,"line_end":233,"column_start":12,"column_end":18},"name":"decode","qualname":"<EncodedPoint<C>>::decode","value":"pub fn decode<T>(&Self) -> Result<T> where T: FromEncodedPoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Decode this [`EncodedPoint`] into the desired type\n","sig":null,"attributes":[{"value":"/ Decode this [`EncodedPoint`] into the desired type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":12807,"byte_end":12861,"line_start":232,"line_end":232,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":145},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13069,"byte_end":13072,"line_start":241,"line_end":241,"column_start":12,"column_end":15},"name":"tag","qualname":"<EncodedPoint<C>>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the SEC1 tag for this [`EncodedPoint`]\n","sig":null,"attributes":[{"value":"/ Get the SEC1 tag for this [`EncodedPoint`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13011,"byte_end":13057,"line_start":240,"line_end":240,"column_start":5,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":146},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13289,"byte_end":13300,"line_start":248,"line_end":248,"column_start":12,"column_end":23},"name":"coordinates","qualname":"<EncodedPoint<C>>::coordinates","value":"pub fn coordinates(&Self) -> Coordinates<, C>","parent":null,"children":[],"decl_id":null,"docs":" Get the [`Coordinates`] for this [`EncodedPoint`].\n","sig":null,"attributes":[{"value":"/ Get the [`Coordinates`] for this [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13209,"byte_end":13263,"line_start":246,"line_end":246,"column_start":5,"column_end":59}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13268,"byte_end":13277,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":147},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13940,"byte_end":13941,"line_start":271,"line_end":271,"column_start":12,"column_end":13},"name":"x","qualname":"<EncodedPoint<C>>::x","value":"pub fn x(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the x-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the x-coordinate for this [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13809,"byte_end":13860,"line_start":268,"line_end":268,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13865,"byte_end":13868,"line_start":269,"line_end":269,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is the identity point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":13873,"byte_end":13928,"line_start":270,"line_end":270,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":148},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14339,"byte_end":14340,"line_start":282,"line_end":282,"column_start":12,"column_end":13},"name":"y","qualname":"<EncodedPoint<C>>::y","value":"pub fn y(&Self) -> Option<&FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Get the y-coordinate for this [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Get the y-coordinate for this [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14194,"byte_end":14245,"line_start":279,"line_end":279,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14250,"byte_end":14253,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ Returns `None` if this point is compressed or the identity point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14258,"byte_end":14327,"line_start":281,"line_end":281,"column_start":5,"column_end":74}}]},{"kind":"TupleVariant","id":{"krate":0,"index":918},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16378,"byte_end":16386,"line_start":357,"line_end":357,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Coordinates::Identity","value":"Coordinates::Identity","parent":{"krate":0,"index":915},"children":[],"decl_id":null,"docs":" Identity point (a.k.a. point at infinity)\n","sig":null,"attributes":[{"value":"/ Identity point (a.k.a. point at infinity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16328,"byte_end":16373,"line_start":356,"line_end":356,"column_start":5,"column_end":50}}]},{"kind":"StructVariant","id":{"krate":0,"index":920},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16424,"byte_end":16434,"line_start":360,"line_end":360,"column_start":5,"column_end":15},"name":"Compressed","qualname":"::sec1::Coordinates::Compressed","value":"Coordinates::Compressed { x, y_is_odd }","parent":{"krate":0,"index":915},"children":[],"decl_id":null,"docs":" Compressed curve point\n","sig":null,"attributes":[{"value":"/ Compressed curve point","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16393,"byte_end":16419,"line_start":359,"line_end":359,"column_start":5,"column_end":31}}]},{"kind":"StructVariant","id":{"krate":0,"index":923},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16599,"byte_end":16611,"line_start":369,"line_end":369,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Coordinates::Uncompressed","value":"Coordinates::Uncompressed { x, y }","parent":{"krate":0,"index":915},"children":[],"decl_id":null,"docs":" Uncompressed curve point\n","sig":null,"attributes":[{"value":"/ Uncompressed curve point","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16566,"byte_end":16594,"line_start":368,"line_end":368,"column_start":5,"column_end":33}}]},{"kind":"Enum","id":{"krate":0,"index":915},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16296,"byte_end":16307,"line_start":355,"line_end":355,"column_start":10,"column_end":21},"name":"Coordinates","qualname":"::sec1::Coordinates","value":"pub enum Coordinates<'a, C: Curve> {\n    Identity,\n    Compressed {\n        x: &'a FieldBytes<C>,\n        y_is_odd: bool,\n    },\n    Uncompressed {\n        x: &'a FieldBytes<C>,\n        y: &'a FieldBytes<C>,\n    },\n}","parent":null,"children":[{"krate":0,"index":918},{"krate":0,"index":920},{"krate":0,"index":923}],"decl_id":null,"docs":" Enum representing the coordinates of either compressed or uncompressed\n SEC1-encoded elliptic curve points.\n","sig":null,"attributes":[{"value":"/ Enum representing the coordinates of either compressed or uncompressed","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16127,"byte_end":16201,"line_start":352,"line_end":352,"column_start":1,"column_end":75}},{"value":"/ SEC1-encoded elliptic curve points.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16202,"byte_end":16241,"line_start":353,"line_end":353,"column_start":1,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":166},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16857,"byte_end":16860,"line_start":380,"line_end":380,"column_start":12,"column_end":15},"name":"tag","qualname":"<Coordinates>::tag","value":"pub fn tag(&Self) -> Tag","parent":null,"children":[],"decl_id":null,"docs":" Get the tag value needed to encode this set of [`Coordinates`]\n","sig":null,"attributes":[{"value":"/ Get the tag value needed to encode this set of [`Coordinates`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16779,"byte_end":16845,"line_start":379,"line_end":379,"column_start":5,"column_end":71}}]},{"kind":"TupleVariant","id":{"krate":0,"index":953},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17445,"byte_end":17453,"line_start":400,"line_end":400,"column_start":5,"column_end":13},"name":"Identity","qualname":"::sec1::Tag::Identity","value":"Tag::Identity","parent":{"krate":0,"index":952},"children":[],"decl_id":null,"docs":" Identity point (`0x00`)\n","sig":null,"attributes":[{"value":"/ Identity point (`0x00`)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17413,"byte_end":17440,"line_start":399,"line_end":399,"column_start":5,"column_end":32}}]},{"kind":"TupleVariant","id":{"krate":0,"index":956},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17521,"byte_end":17536,"line_start":403,"line_end":403,"column_start":5,"column_end":20},"name":"CompressedEvenY","qualname":"::sec1::Tag::CompressedEvenY","value":"Tag::CompressedEvenY","parent":{"krate":0,"index":952},"children":[],"decl_id":null,"docs":" Compressed point with even y-coordinate (`0x02`)\n","sig":null,"attributes":[{"value":"/ Compressed point with even y-coordinate (`0x02`)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17464,"byte_end":17516,"line_start":402,"line_end":402,"column_start":5,"column_end":57}}]},{"kind":"TupleVariant","id":{"krate":0,"index":959},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17603,"byte_end":17617,"line_start":406,"line_end":406,"column_start":5,"column_end":19},"name":"CompressedOddY","qualname":"::sec1::Tag::CompressedOddY","value":"Tag::CompressedOddY","parent":{"krate":0,"index":952},"children":[],"decl_id":null,"docs":" Compressed point with odd y-coordinate (`0x03`)\n","sig":null,"attributes":[{"value":"/ Compressed point with odd y-coordinate (`0x03`)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17547,"byte_end":17598,"line_start":405,"line_end":405,"column_start":5,"column_end":56}}]},{"kind":"TupleVariant","id":{"krate":0,"index":962},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17664,"byte_end":17676,"line_start":409,"line_end":409,"column_start":5,"column_end":17},"name":"Uncompressed","qualname":"::sec1::Tag::Uncompressed","value":"Tag::Uncompressed","parent":{"krate":0,"index":952},"children":[],"decl_id":null,"docs":" Uncompressed point (`0x04`)\n","sig":null,"attributes":[{"value":"/ Uncompressed point (`0x04`)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17628,"byte_end":17659,"line_start":408,"line_end":408,"column_start":5,"column_end":36}}]},{"kind":"Enum","id":{"krate":0,"index":952},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17403,"byte_end":17406,"line_start":398,"line_end":398,"column_start":10,"column_end":13},"name":"Tag","qualname":"::sec1::Tag","value":"pub enum Tag {\n    Identity = ,\n    CompressedEvenY = ,\n    CompressedOddY = ,\n    Uncompressed = ,\n}","parent":null,"children":[{"krate":0,"index":953},{"krate":0,"index":956},{"krate":0,"index":959},{"krate":0,"index":962}],"decl_id":null,"docs":" Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.\n","sig":null,"attributes":[{"value":"/ Tag byte used by the `Elliptic-Curve-Point-to-Octet-String` encoding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17263,"byte_end":17336,"line_start":395,"line_end":395,"column_start":1,"column_end":74}},{"value":"repr(u8)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17382,"byte_end":17393,"line_start":397,"line_end":397,"column_start":1,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":168},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17745,"byte_end":17752,"line_start":414,"line_end":414,"column_start":12,"column_end":19},"name":"from_u8","qualname":"<Tag>::from_u8","value":"pub fn from_u8(u8) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Parse a tag value from a byte\n","sig":null,"attributes":[{"value":"/ Parse a tag value from a byte","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17700,"byte_end":17733,"line_start":413,"line_end":413,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":169},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18062,"byte_end":18073,"line_start":425,"line_end":425,"column_start":12,"column_end":23},"name":"is_identity","qualname":"<Tag>::is_identity","value":"pub fn is_identity(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point the identity point?\n","sig":null,"attributes":[{"value":"/ Is this point the identity point?","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18013,"byte_end":18050,"line_start":424,"line_end":424,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":170},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18172,"byte_end":18185,"line_start":430,"line_end":430,"column_start":12,"column_end":25},"name":"is_compressed","qualname":"<Tag>::is_compressed","value":"pub fn is_compressed(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Is this point compressed?\n","sig":null,"attributes":[{"value":"/ Is this point compressed?","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18131,"byte_end":18160,"line_start":429,"line_end":429,"column_start":5,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":171},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18489,"byte_end":18500,"line_start":437,"line_end":437,"column_start":12,"column_end":23},"name":"message_len","qualname":"<Tag>::message_len","value":"pub fn message_len(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Compute the expected total message length for a message prefixed\n with this tag (including the tag byte), given the field element size\n (in bytes) for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Compute the expected total message length for a message prefixed","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18280,"byte_end":18348,"line_start":434,"line_end":434,"column_start":5,"column_end":73}},{"value":"/ with this tag (including the tag byte), given the field element size","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18353,"byte_end":18425,"line_start":435,"line_end":435,"column_start":5,"column_end":77}},{"value":"/ (in bytes) for a particular elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":18430,"byte_end":18477,"line_start":436,"line_end":436,"column_start":5,"column_end":52}}]},{"kind":"Trait","id":{"krate":0,"index":175},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19362,"byte_end":19378,"line_start":465,"line_end":465,"column_start":11,"column_end":27},"name":"FromEncodedPoint","qualname":"::sec1::FromEncodedPoint","value":"FromEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":177}],"decl_id":null,"docs":" Trait for deserializing a value from a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for deserializing a value from a SEC1 encoded curve point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19194,"byte_end":19262,"line_start":462,"line_end":462,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19263,"byte_end":19266,"line_start":463,"line_end":463,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19267,"byte_end":19351,"line_start":464,"line_end":464,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":177},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19692,"byte_end":19710,"line_start":477,"line_end":477,"column_start":8,"column_end":26},"name":"from_encoded_point","qualname":"::sec1::FromEncodedPoint::from_encoded_point","value":"pub fn from_encoded_point(&EncodedPoint<C>) -> Option<Self>","parent":{"krate":0,"index":175},"children":[],"decl_id":null,"docs":" Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","sig":null,"attributes":[{"value":"/ Deserialize the type this trait is impl'd on from an [`EncodedPoint`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19525,"byte_end":19599,"line_start":472,"line_end":472,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19604,"byte_end":19607,"line_start":473,"line_end":473,"column_start":5,"column_end":8}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19612,"byte_end":19625,"line_start":474,"line_end":474,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19630,"byte_end":19633,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ `None` if the [`EncodedPoint`] is invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19638,"byte_end":19684,"line_start":476,"line_end":476,"column_start":5,"column_end":51}}]},{"kind":"Trait","id":{"krate":0,"index":178},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19925,"byte_end":19939,"line_start":483,"line_end":483,"column_start":11,"column_end":25},"name":"ToEncodedPoint","qualname":"::sec1::ToEncodedPoint","value":"ToEncodedPoint<C>","parent":null,"children":[{"krate":0,"index":180}],"decl_id":null,"docs":" Trait for serializing a value to a SEC1 encoded curve point.","sig":null,"attributes":[{"value":"/ Trait for serializing a value to a SEC1 encoded curve point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19761,"byte_end":19825,"line_start":480,"line_end":480,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19826,"byte_end":19829,"line_start":481,"line_end":481,"column_start":1,"column_end":4}},{"value":"/ This is intended for use with the `AffinePoint` type for a given elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":19830,"byte_end":19914,"line_start":482,"line_end":482,"column_start":1,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":180},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20176,"byte_end":20192,"line_start":491,"line_end":491,"column_start":8,"column_end":24},"name":"to_encoded_point","qualname":"::sec1::ToEncodedPoint::to_encoded_point","value":"pub fn to_encoded_point(&Self, bool) -> EncodedPoint<C>","parent":{"krate":0,"index":178},"children":[],"decl_id":null,"docs":" Serialize this value as a SEC1 [`EncodedPoint`], optionally applying\n point compression.\n","sig":null,"attributes":[{"value":"/ Serialize this value as a SEC1 [`EncodedPoint`], optionally applying","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20069,"byte_end":20141,"line_start":489,"line_end":489,"column_start":5,"column_end":77}},{"value":"/ point compression.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20146,"byte_end":20168,"line_start":490,"line_end":490,"column_start":5,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":181},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20564,"byte_end":20581,"line_start":501,"line_end":501,"column_start":11,"column_end":28},"name":"ValidatePublicKey","qualname":"::sec1::ValidatePublicKey","value":"ValidatePublicKey","parent":null,"children":[{"krate":0,"index":182}],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] represents the encoded public key\n value of the given secret.","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] represents the encoded public key","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20239,"byte_end":20317,"line_start":494,"line_end":494,"column_start":1,"column_end":79}},{"value":"/ value of the given secret.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20318,"byte_end":20348,"line_start":495,"line_end":495,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20349,"byte_end":20352,"line_start":496,"line_end":496,"column_start":1,"column_end":4}},{"value":"/ Curve implementations which also impl [`ProjectiveArithmetic`] will receive","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20353,"byte_end":20432,"line_start":497,"line_end":497,"column_start":1,"column_end":80}},{"value":"/ a blanket default impl of this trait.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20433,"byte_end":20474,"line_start":498,"line_end":498,"column_start":1,"column_end":42}},{"value":"cfg(feature = \"zeroize\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20475,"byte_end":20502,"line_start":499,"line_end":499,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20875,"byte_end":20894,"line_start":510,"line_end":510,"column_start":8,"column_end":27},"name":"validate_public_key","qualname":"::sec1::ValidatePublicKey::validate_public_key","value":"pub fn validate_public_key(&SecretKey<Self>, &EncodedPoint<Self>)\n-> Result<()>","parent":{"krate":0,"index":181},"children":[],"decl_id":null,"docs":" Validate that the given [`EncodedPoint`] is a valid public key for the\n provided secret value.\n","sig":null,"attributes":[{"value":"/ Validate that the given [`EncodedPoint`] is a valid public key for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20731,"byte_end":20805,"line_start":507,"line_end":507,"column_start":5,"column_end":79}},{"value":"/ provided secret value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20810,"byte_end":20836,"line_start":508,"line_end":508,"column_start":5,"column_end":31}},{"value":"allow(unused_variables)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":20841,"byte_end":20867,"line_start":509,"line_end":509,"column_start":5,"column_end":31}}]},{"kind":"Mod","id":{"krate":0,"index":186},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"util","qualname":"::util","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","parent":null,"children":[{"krate":0,"index":187},{"krate":0,"index":188},{"krate":0,"index":189},{"krate":0,"index":190},{"krate":0,"index":191},{"krate":0,"index":192}],"decl_id":null,"docs":" Arithmetic helper functions designed for efficient LLVM lowering.","sig":null,"attributes":[{"value":"/ Arithmetic helper functions designed for efficient LLVM lowering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":29913,"byte_end":29982,"line_start":1,"line_end":1,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":29983,"byte_end":29986,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ These functions are intended for supporting arithmetic on field elements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":29987,"byte_end":30063,"line_start":3,"line_end":3,"column_start":1,"column_end":77}},{"value":"/ modeled as multiple \"limbs\" (e.g. carry chains).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30064,"byte_end":30116,"line_start":4,"line_end":4,"column_start":1,"column_end":53}}]},{"kind":"Function","id":{"krate":0,"index":187},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30375,"byte_end":30380,"line_start":12,"line_end":12,"column_start":14,"column_end":19},"name":"adc32","qualname":"::util::adc32","value":"pub const fn adc32(u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + b + carry`, returning the result along with the new carry.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + b + carry`, returning the result along with the new carry.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30247,"byte_end":30323,"line_start":9,"line_end":9,"column_start":1,"column_end":77}},{"value":"/ 32-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30324,"byte_end":30343,"line_start":10,"line_end":10,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30344,"byte_end":30361,"line_start":11,"line_end":11,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":188},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30649,"byte_end":30654,"line_start":20,"line_end":20,"column_start":14,"column_end":19},"name":"adc64","qualname":"::util::adc64","value":"pub const fn adc64(u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + b + carry`, returning the result along with the new carry.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + b + carry`, returning the result along with the new carry.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30521,"byte_end":30597,"line_start":17,"line_end":17,"column_start":1,"column_end":77}},{"value":"/ 64-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30598,"byte_end":30617,"line_start":18,"line_end":18,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30618,"byte_end":30635,"line_start":19,"line_end":19,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":189},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30930,"byte_end":30935,"line_start":28,"line_end":28,"column_start":14,"column_end":19},"name":"sbb32","qualname":"::util::sbb32","value":"pub const fn sbb32(u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a - (b + borrow)`, returning the result along with the new borrow.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a - (b + borrow)`, returning the result along with the new borrow.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30798,"byte_end":30878,"line_start":25,"line_end":25,"column_start":1,"column_end":81}},{"value":"/ 32-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30879,"byte_end":30898,"line_start":26,"line_end":26,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":30899,"byte_end":30916,"line_start":27,"line_end":27,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":190},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31230,"byte_end":31235,"line_start":36,"line_end":36,"column_start":14,"column_end":19},"name":"sbb64","qualname":"::util::sbb64","value":"pub const fn sbb64(u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a - (b + borrow)`, returning the result along with the new borrow.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a - (b + borrow)`, returning the result along with the new borrow.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31098,"byte_end":31178,"line_start":33,"line_end":33,"column_start":1,"column_end":81}},{"value":"/ 64-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31179,"byte_end":31198,"line_start":34,"line_end":34,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31199,"byte_end":31216,"line_start":35,"line_end":35,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":191},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31535,"byte_end":31540,"line_start":44,"line_end":44,"column_start":14,"column_end":19},"name":"mac32","qualname":"::util::mac32","value":"pub const fn mac32(u32, u32, u32, u32) -> (u32, u32)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + (b * c) + carry`, returning the result along with the new carry.\n 32-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + (b * c) + carry`, returning the result along with the new carry.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31401,"byte_end":31483,"line_start":41,"line_end":41,"column_start":1,"column_end":83}},{"value":"/ 32-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31484,"byte_end":31503,"line_start":42,"line_end":42,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31504,"byte_end":31521,"line_start":43,"line_end":43,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":192},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31838,"byte_end":31843,"line_start":52,"line_end":52,"column_start":14,"column_end":19},"name":"mac64","qualname":"::util::mac64","value":"pub const fn mac64(u64, u64, u64, u64) -> (u64, u64)","parent":null,"children":[],"decl_id":null,"docs":" Computes `a + (b * c) + carry`, returning the result along with the new carry.\n 64-bit version.\n","sig":null,"attributes":[{"value":"/ Computes `a + (b * c) + carry`, returning the result along with the new carry.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31704,"byte_end":31786,"line_start":49,"line_end":49,"column_start":1,"column_end":83}},{"value":"/ 64-bit version.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31787,"byte_end":31806,"line_start":50,"line_end":50,"column_start":1,"column_end":20}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/util.rs","byte_start":31807,"byte_end":31824,"line_start":51,"line_end":51,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":193},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"weierstrass","qualname":"::weierstrass","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","parent":null,"children":[{"krate":0,"index":194},{"krate":0,"index":197},{"krate":0,"index":198},{"krate":0,"index":201},{"krate":0,"index":204},{"krate":0,"index":205},{"krate":0,"index":207}],"decl_id":null,"docs":" Elliptic curves in short Weierstrass form.\n","sig":null,"attributes":[{"value":"/ Elliptic curves in short Weierstrass form.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32011,"byte_end":32057,"line_start":1,"line_end":1,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":204},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32189,"byte_end":32194,"line_start":7,"line_end":7,"column_start":11,"column_end":16},"name":"Curve","qualname":"::weierstrass::Curve","value":"Curve: super::Curve","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for elliptic curves in short Weierstrass form.\n","sig":null,"attributes":[{"value":"/ Marker trait for elliptic curves in short Weierstrass form.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32115,"byte_end":32178,"line_start":6,"line_end":6,"column_start":1,"column_end":64}}]},{"kind":"Trait","id":{"krate":0,"index":205},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32255,"byte_end":32271,"line_start":10,"line_end":10,"column_start":11,"column_end":27},"name":"PointCompression","qualname":"::weierstrass::PointCompression","value":"PointCompression","parent":null,"children":[{"krate":0,"index":206}],"decl_id":null,"docs":" Point compression settings.\n","sig":null,"attributes":[{"value":"/ Point compression settings.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32213,"byte_end":32244,"line_start":9,"line_end":9,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":206},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32340,"byte_end":32355,"line_start":12,"line_end":12,"column_start":11,"column_end":26},"name":"COMPRESS_POINTS","qualname":"::weierstrass::PointCompression::COMPRESS_POINTS","value":"bool","parent":{"krate":0,"index":205},"children":[],"decl_id":null,"docs":" Should point compression be applied by default?\n","sig":null,"attributes":[{"value":"/ Should point compression be applied by default?","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32278,"byte_end":32329,"line_start":11,"line_end":11,"column_start":5,"column_end":56}}]},{"kind":"Trait","id":{"krate":0,"index":207},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32522,"byte_end":32537,"line_start":17,"line_end":17,"column_start":11,"column_end":26},"name":"DecompressPoint","qualname":"::weierstrass::DecompressPoint","value":"DecompressPoint<C: Curve>: Sized","parent":null,"children":[{"krate":0,"index":209}],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point from its x-coordinate and\n a boolean flag indicating whether or not the y-coordinate is odd.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point from its x-coordinate and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32366,"byte_end":32441,"line_start":15,"line_end":15,"column_start":1,"column_end":76}},{"value":"/ a boolean flag indicating whether or not the y-coordinate is odd.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32442,"byte_end":32511,"line_start":16,"line_end":16,"column_start":1,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":209},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32619,"byte_end":32629,"line_start":19,"line_end":19,"column_start":8,"column_end":18},"name":"decompress","qualname":"::weierstrass::DecompressPoint::decompress","value":"pub fn decompress(&FieldBytes<C>, Choice) -> CtOption<Self>","parent":{"krate":0,"index":207},"children":[],"decl_id":null,"docs":" Attempt to decompress an elliptic curve point.\n","sig":null,"attributes":[{"value":"/ Attempt to decompress an elliptic curve point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32561,"byte_end":32611,"line_start":18,"line_end":18,"column_start":5,"column_end":55}}]},{"kind":"Type","id":{"krate":0,"index":218},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32765,"byte_end":32771,"line_start":6,"line_end":6,"column_start":10,"column_end":16},"name":"Result","qualname":"::error::Result","value":"core::result::Result<T, Error>","parent":null,"children":[],"decl_id":null,"docs":" Result type.\n","sig":null,"attributes":[{"value":"/ Result type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32739,"byte_end":32755,"line_start":5,"line_end":5,"column_start":1,"column_end":17}}]},{"kind":"Struct","id":{"krate":0,"index":976},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32893,"byte_end":32898,"line_start":10,"line_end":10,"column_start":12,"column_end":17},"name":"Error","qualname":"::error::Error","value":"","parent":null,"children":[],"decl_id":null,"docs":" Elliptic curve errors.\n","sig":null,"attributes":[{"value":"/ Elliptic curve errors.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32810,"byte_end":32836,"line_start":8,"line_end":8,"column_start":1,"column_end":27}}]},{"kind":"Trait","id":{"krate":0,"index":229},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33751,"byte_end":33756,"line_start":15,"line_end":15,"column_start":11,"column_end":16},"name":"Order","qualname":"::order::Order","value":"Order: Curve","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":231}],"decl_id":null,"docs":" Order of an elliptic curve group.","sig":null,"attributes":[{"value":"/ Order of an elliptic curve group.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33303,"byte_end":33340,"line_start":6,"line_end":6,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33341,"byte_end":33344,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This trait is available even when the `arithmetic` feature of the crate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33345,"byte_end":33420,"line_start":8,"line_end":8,"column_start":1,"column_end":76}},{"value":"/ is disabled and does not require any additional crate dependencies.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33421,"byte_end":33492,"line_start":9,"line_end":9,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33493,"byte_end":33496,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ This trait is useful for supporting a baseline level of functionality","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33497,"byte_end":33570,"line_start":11,"line_end":11,"column_start":1,"column_end":74}},{"value":"/ across curve implementations, even ones which do not provide a field","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33571,"byte_end":33643,"line_start":12,"line_end":12,"column_start":1,"column_end":73}},{"value":"/ arithmetic backend.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33644,"byte_end":33667,"line_start":13,"line_end":13,"column_start":1,"column_end":24}}]},{"kind":"Type","id":{"krate":0,"index":230},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34091,"byte_end":34096,"line_start":24,"line_end":24,"column_start":10,"column_end":15},"name":"Limbs","qualname":"::order::Order::Limbs","value":"type Limbs: AsRef<[u64]> + Copy + Debug;","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Type representing the \"limbs\" of the curves group's order on\n 64-bit platforms.\n","sig":null,"attributes":[{"value":"/ Type representing the \"limbs\" of the curves group's order on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33951,"byte_end":34015,"line_start":21,"line_end":21,"column_start":5,"column_end":69}},{"value":"/ 64-bit platforms.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34020,"byte_end":34041,"line_start":22,"line_end":22,"column_start":5,"column_end":26}},{"value":"cfg(target_pointer_width = \"64\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34046,"byte_end":34081,"line_start":23,"line_end":23,"column_start":5,"column_end":40}}]},{"kind":"Const","id":{"krate":0,"index":231},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34319,"byte_end":34324,"line_start":30,"line_end":30,"column_start":11,"column_end":16},"name":"ORDER","qualname":"::order::Order::ORDER","value":"Self::Limbs","parent":{"krate":0,"index":229},"children":[],"decl_id":null,"docs":" Order constant.","sig":null,"attributes":[{"value":"/ Order constant.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34132,"byte_end":34151,"line_start":26,"line_end":26,"column_start":5,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34156,"byte_end":34159,"line_start":27,"line_end":27,"column_start":5,"column_end":8}},{"value":"/ Subdivided into either 32-bit or 64-bit \"limbs\" (depending on the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34164,"byte_end":34233,"line_start":28,"line_end":28,"column_start":5,"column_end":74}},{"value":"/ target CPU's word size), specified from least to most significant.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":34238,"byte_end":34308,"line_start":29,"line_end":29,"column_start":5,"column_end":75}}]},{"kind":"Struct","id":{"krate":0,"index":989},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35787,"byte_end":35798,"line_start":25,"line_end":25,"column_start":12,"column_end":23},"name":"ScalarBytes","qualname":"::scalar::bytes::ScalarBytes","value":"ScalarBytes {  }","parent":null,"children":[{"krate":0,"index":991}],"decl_id":null,"docs":" Scalar bytes: wrapper for [`FieldBytes`] which guarantees that the the\n inner byte value is within range of the curve's [`Order`].","sig":null,"attributes":[{"value":"/ Scalar bytes: wrapper for [`FieldBytes`] which guarantees that the the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35555,"byte_end":35629,"line_start":20,"line_end":20,"column_start":1,"column_end":75}},{"value":"/ inner byte value is within range of the curve's [`Order`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35630,"byte_end":35692,"line_start":21,"line_end":21,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35693,"byte_end":35696,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Does not require an arithmetic implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35697,"byte_end":35747,"line_start":23,"line_end":23,"column_start":1,"column_end":51}}]},{"kind":"Method","id":{"krate":0,"index":296},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":36872,"byte_end":36875,"line_start":58,"line_end":58,"column_start":12,"column_end":15},"name":"new","qualname":"<ScalarBytes<C>>::new","value":"pub fn new(FieldBytes<C>) -> CtOption<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create new [`ScalarBytes`], checking that the given input is within\n range of the curve's [`Order`].\n","sig":null,"attributes":[{"value":"/ Create new [`ScalarBytes`], checking that the given input is within","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":36709,"byte_end":36780,"line_start":55,"line_end":55,"column_start":5,"column_end":76}},{"value":"/ range of the curve's [`Order`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":36785,"byte_end":36820,"line_start":56,"line_end":56,"column_start":5,"column_end":40}},{"value":"cfg(target_pointer_width = \"64\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":36825,"byte_end":36860,"line_start":57,"line_end":57,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":297},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37614,"byte_end":37625,"line_start":79,"line_end":79,"column_start":12,"column_end":23},"name":"from_scalar","qualname":"<ScalarBytes<C>>::from_scalar","value":"pub fn from_scalar(&Scalar<C>) -> Self where C: ProjectiveArithmetic,\nScalar<C>: PrimeField<Repr = FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Convert from a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert from a [`Scalar`] type for this curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37459,"byte_end":37509,"line_start":76,"line_end":76,"column_start":5,"column_end":55}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37514,"byte_end":37544,"line_start":77,"line_end":77,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":298},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37982,"byte_end":37991,"line_start":92,"line_end":92,"column_start":12,"column_end":21},"name":"to_scalar","qualname":"<ScalarBytes<C>>::to_scalar","value":"pub fn to_scalar(&Self) -> Scalar<C> where C: ProjectiveArithmetic,\nScalar<C>: PrimeField<Repr = FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Convert to a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert to a [`Scalar`] type for this curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37829,"byte_end":37877,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":37882,"byte_end":37912,"line_start":90,"line_end":90,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38315,"byte_end":38326,"line_start":103,"line_end":103,"column_start":12,"column_end":23},"name":"into_scalar","qualname":"<ScalarBytes<C>>::into_scalar","value":"pub fn into_scalar(Self) -> Scalar<C> where C: ProjectiveArithmetic,\nScalar<C>: PrimeField<Repr = FieldBytes<C>>","parent":null,"children":[],"decl_id":null,"docs":" Convert into a [`Scalar`] type for this curve.\n","sig":null,"attributes":[{"value":"/ Convert into a [`Scalar`] type for this curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38160,"byte_end":38210,"line_start":100,"line_end":100,"column_start":5,"column_end":55}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38215,"byte_end":38245,"line_start":101,"line_end":101,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":300},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38596,"byte_end":38604,"line_start":112,"line_end":112,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<ScalarBytes<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`FieldBytes`]\n","sig":null,"attributes":[{"value":"/ Borrow the inner [`FieldBytes`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38549,"byte_end":38584,"line_start":111,"line_end":111,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38706,"byte_end":38716,"line_start":117,"line_end":117,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<ScalarBytes<C>>::into_bytes","value":"pub fn into_bytes(Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert into [`FieldBytes`]\n","sig":null,"attributes":[{"value":"/ Convert into [`FieldBytes`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38663,"byte_end":38694,"line_start":116,"line_end":116,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":302},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38840,"byte_end":38844,"line_start":122,"line_end":122,"column_start":12,"column_end":16},"name":"zero","qualname":"<ScalarBytes<C>>::zero","value":"pub fn zero() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create [`ScalarBytes`] representing a value of zero.\n","sig":null,"attributes":[{"value":"/ Create [`ScalarBytes`] representing a value of zero.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38772,"byte_end":38828,"line_start":121,"line_end":121,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":303},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38989,"byte_end":38996,"line_start":129,"line_end":129,"column_start":12,"column_end":19},"name":"is_zero","qualname":"<ScalarBytes<C>>::is_zero","value":"pub fn is_zero(&Self) -> Choice","parent":null,"children":[],"decl_id":null,"docs":" Is this [`ScalarBytes`] value all zeroes?\n","sig":null,"attributes":[{"value":"/ Is this [`ScalarBytes`] value all zeroes?","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":38932,"byte_end":38977,"line_start":128,"line_end":128,"column_start":5,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1003},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42822,"byte_end":42835,"line_start":26,"line_end":26,"column_start":12,"column_end":25},"name":"NonZeroScalar","qualname":"::scalar::non_zero::NonZeroScalar","value":"NonZeroScalar {  }","parent":null,"children":[{"krate":0,"index":1005}],"decl_id":null,"docs":" Non-zero scalar type.","sig":null,"attributes":[{"value":"/ Non-zero scalar type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42366,"byte_end":42391,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42392,"byte_end":42395,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ This type ensures that its value is not zero, ala `core::num::NonZero*`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42396,"byte_end":42472,"line_start":18,"line_end":18,"column_start":1,"column_end":77}},{"value":"/ To do this, the generic `S` type must impl both `Default` and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42473,"byte_end":42538,"line_start":19,"line_end":19,"column_start":1,"column_end":66}},{"value":"/ `ConstantTimeEq`, with the requirement that `S::default()` returns 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42539,"byte_end":42612,"line_start":20,"line_end":20,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42613,"byte_end":42616,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ In the context of ECC, it's useful for ensuring that scalar multiplication","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42617,"byte_end":42695,"line_start":22,"line_end":22,"column_start":1,"column_end":79}},{"value":"/ cannot result in the point at infinity.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42696,"byte_end":42739,"line_start":23,"line_end":23,"column_start":1,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43131,"byte_end":43137,"line_start":40,"line_end":40,"column_start":12,"column_end":18},"name":"random","qualname":"<NonZeroScalar<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a random `NonZeroScalar`\n","sig":null,"attributes":[{"value":"/ Generate a random `NonZeroScalar`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43082,"byte_end":43119,"line_start":39,"line_end":39,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":400},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43466,"byte_end":43475,"line_start":50,"line_end":50,"column_start":12,"column_end":21},"name":"from_repr","qualname":"<NonZeroScalar<C>>::from_repr","value":"pub fn from_repr(FieldBytes<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Decode a [`NonZeroScalar] from a serialized field element\n","sig":null,"attributes":[{"value":"/ Decode a [`NonZeroScalar] from a serialized field element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43393,"byte_end":43454,"line_start":49,"line_end":49,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43688,"byte_end":43691,"line_start":56,"line_end":56,"column_start":12,"column_end":15},"name":"new","qualname":"<NonZeroScalar<C>>::new","value":"pub fn new(Scalar<C>) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Create a [`NonZeroScalar`] from a scalar.\n","sig":null,"attributes":[{"value":"/ Create a [`NonZeroScalar`] from a scalar.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43583,"byte_end":43628,"line_start":54,"line_end":54,"column_start":5,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":442},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34718,"byte_end":34724,"line_start":18,"line_end":18,"column_start":10,"column_end":16},"name":"Scalar","qualname":"::scalar::Scalar","value":"<<C as ProjectiveArithmetic>::ProjectivePoint as Group>::Scalar","parent":null,"children":[],"decl_id":null,"docs":" Scalar field element for a particular elliptic curve.\n","sig":null,"attributes":[{"value":"/ Scalar field element for a particular elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34566,"byte_end":34623,"line_start":15,"line_end":15,"column_start":1,"column_end":58}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34624,"byte_end":34654,"line_start":16,"line_end":16,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":444},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34957,"byte_end":34967,"line_start":23,"line_end":23,"column_start":10,"column_end":20},"name":"ScalarBits","qualname":"::scalar::ScalarBits","value":"FieldBits<<Scalar<C> as PrimeField>::ReprBits>","parent":null,"children":[],"decl_id":null,"docs":" Bit representation of a scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Bit representation of a scalar field element of a given curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34796,"byte_end":34862,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar.rs","byte_start":34863,"byte_end":34893,"line_start":21,"line_end":21,"column_start":1,"column_end":31}}]},{"kind":"Trait","id":{"krate":0,"index":457},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46132,"byte_end":46152,"line_start":7,"line_end":7,"column_start":11,"column_end":31},"name":"ProjectiveArithmetic","qualname":"::point::ProjectiveArithmetic","value":"ProjectiveArithmetic: Curve","parent":null,"children":[{"krate":0,"index":458}],"decl_id":null,"docs":" Elliptic curve with projective arithmetic implementation.\n","sig":null,"attributes":[{"value":"/ Elliptic curve with projective arithmetic implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46006,"byte_end":46067,"line_start":5,"line_end":5,"column_start":1,"column_end":62}}]},{"kind":"Type","id":{"krate":0,"index":458},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46292,"byte_end":46307,"line_start":12,"line_end":12,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::point::ProjectiveArithmetic::ProjectivePoint","value":"type ProjectivePoint: group::Curve;","parent":{"krate":0,"index":457},"children":[],"decl_id":null,"docs":" Elliptic curve point in projective coordinates.\n","sig":null,"attributes":[{"value":"/ Elliptic curve point in projective coordinates.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46231,"byte_end":46282,"line_start":11,"line_end":11,"column_start":5,"column_end":56}}]},{"kind":"Type","id":{"krate":0,"index":459},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46481,"byte_end":46492,"line_start":18,"line_end":18,"column_start":10,"column_end":21},"name":"AffinePoint","qualname":"::point::AffinePoint","value":"<<C as ProjectiveArithmetic>::ProjectivePoint as group::Curve>::AffineRepr","parent":null,"children":[],"decl_id":null,"docs":" Affine point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Affine point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46326,"byte_end":46397,"line_start":15,"line_end":15,"column_start":1,"column_end":72}},{"value":"/ implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46398,"byte_end":46417,"line_start":16,"line_end":16,"column_start":1,"column_end":20}}]},{"kind":"Type","id":{"krate":0,"index":461},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46738,"byte_end":46753,"line_start":24,"line_end":24,"column_start":10,"column_end":25},"name":"ProjectivePoint","qualname":"::point::ProjectivePoint","value":"<C as ProjectiveArithmetic>::ProjectivePoint","parent":null,"children":[],"decl_id":null,"docs":" Projective point type for a given curve with a [`ProjectiveArithmetic`]\n implementation.\n","sig":null,"attributes":[{"value":"/ Projective point type for a given curve with a [`ProjectiveArithmetic`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46579,"byte_end":46654,"line_start":21,"line_end":21,"column_start":1,"column_end":76}},{"value":"/ implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46655,"byte_end":46674,"line_start":22,"line_end":22,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":1009},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48766,"byte_end":48775,"line_start":65,"line_end":65,"column_start":12,"column_end":21},"name":"PublicKey","qualname":"::public_key::PublicKey","value":"PublicKey {  }","parent":null,"children":[{"krate":0,"index":1011}],"decl_id":null,"docs":" Elliptic curve public keys.","sig":null,"attributes":[{"value":"/ Elliptic curve public keys.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47655,"byte_end":47686,"line_start":37,"line_end":37,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47687,"byte_end":47690,"line_start":38,"line_end":38,"column_start":1,"column_end":4}},{"value":"/ This is a wrapper type for [`AffinePoint`] which ensures an inner","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47691,"byte_end":47760,"line_start":39,"line_end":39,"column_start":1,"column_end":70}},{"value":"/ non-identity point and provides a common place to handle encoding/decoding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47761,"byte_end":47840,"line_start":40,"line_end":40,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47841,"byte_end":47844,"line_start":41,"line_end":41,"column_start":1,"column_end":4}},{"value":"/ # Parsing \"SPKI\" Keys","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47845,"byte_end":47870,"line_start":42,"line_end":42,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47871,"byte_end":47874,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ X.509 `SubjectPublicKeyInfo` (SPKI) is a commonly used format for encoding","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47875,"byte_end":47953,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ public keys, notably public keys corresponding to PKCS#8 private keys.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":47954,"byte_end":48028,"line_start":45,"line_end":45,"column_start":1,"column_end":75}},{"value":"/ (especially ones generated by OpenSSL).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48029,"byte_end":48072,"line_start":46,"line_end":46,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48073,"byte_end":48076,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Keys in SPKI format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48077,"byte_end":48150,"line_start":48,"line_end":48,"column_start":1,"column_end":74}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48151,"byte_end":48192,"line_start":49,"line_end":49,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48193,"byte_end":48196,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48197,"byte_end":48208,"line_start":51,"line_end":51,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PUBLIC KEY-----","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48209,"byte_end":48239,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48240,"byte_end":48247,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48248,"byte_end":48251,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve public key from SPKI, enable the `pkcs8`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48252,"byte_end":48324,"line_start":55,"line_end":55,"column_start":1,"column_end":73}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48325,"byte_end":48399,"line_start":56,"line_end":56,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48400,"byte_end":48437,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPublicKey`][`pkcs8::FromPublicKey`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48438,"byte_end":48506,"line_start":58,"line_end":58,"column_start":1,"column_end":69}},{"value":"/ trait to parse it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48507,"byte_end":48529,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48530,"byte_end":48533,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48534,"byte_end":48609,"line_start":61,"line_end":61,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48610,"byte_end":48676,"line_start":62,"line_end":62,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":547},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49215,"byte_end":49226,"line_start":82,"line_end":82,"column_start":12,"column_end":23},"name":"from_affine","qualname":"<PublicKey<C>>::from_affine","value":"pub fn from_affine(AffinePoint<C>) -> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Convert an [`AffinePoint`] into a [`PublicKey`]\n","sig":null,"attributes":[{"value":"/ Convert an [`AffinePoint`] into a [`PublicKey`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49152,"byte_end":49203,"line_start":81,"line_end":81,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49567,"byte_end":49585,"line_start":92,"line_end":92,"column_start":12,"column_end":30},"name":"from_secret_scalar","qualname":"<PublicKey<C>>::from_secret_scalar","value":"pub fn from_secret_scalar(&NonZeroScalar<C>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value\n (i.e. a secret key represented as a raw scalar value)\n","sig":null,"attributes":[{"value":"/ Compute a [`PublicKey`] from a secret [`NonZeroScalar`] value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49428,"byte_end":49493,"line_start":90,"line_end":90,"column_start":5,"column_end":70}},{"value":"/ (i.e. a secret key represented as a raw scalar value)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49498,"byte_end":49555,"line_start":91,"line_end":91,"column_start":5,"column_end":62}}]},{"kind":"Method","id":{"krate":0,"index":549},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50101,"byte_end":50116,"line_start":105,"line_end":105,"column_start":12,"column_end":27},"name":"from_sec1_bytes","qualname":"<PublicKey<C>>::from_sec1_bytes","value":"pub fn from_sec1_bytes(&[u8]) -> Result<Self> where\nSelf: TryFrom<EncodedPoint<C>, Error = Error>, UntaggedPointSize<C>: Add<U1> +\nArrayLength<u8>, UncompressedPointSize<C>: ArrayLength<u8>","parent":null,"children":[],"decl_id":null,"docs":" Decode [`PublicKey`] (compressed or uncompressed) from the\n `Elliptic-Curve-Point-to-Octet-String` encoding described in\n SEC 1: Elliptic Curve Cryptography (Version 2.0) section\n 2.3.3 (page 10).","sig":null,"attributes":[{"value":"/ Decode [`PublicKey`] (compressed or uncompressed) from the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49818,"byte_end":49880,"line_start":99,"line_end":99,"column_start":5,"column_end":67}},{"value":"/ `Elliptic-Curve-Point-to-Octet-String` encoding described in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49885,"byte_end":49949,"line_start":100,"line_end":100,"column_start":5,"column_end":69}},{"value":"/ SEC 1: Elliptic Curve Cryptography (Version 2.0) section","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":49954,"byte_end":50014,"line_start":101,"line_end":101,"column_start":5,"column_end":65}},{"value":"/ 2.3.3 (page 10).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50019,"byte_end":50039,"line_start":102,"line_end":102,"column_start":5,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50044,"byte_end":50047,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ <http://www.secg.org/sec1-v2.pdf>","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50052,"byte_end":50089,"line_start":104,"line_end":104,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":551},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50586,"byte_end":50595,"line_start":119,"line_end":119,"column_start":12,"column_end":21},"name":"as_affine","qualname":"<PublicKey<C>>::as_affine","value":"pub fn as_affine(&Self) -> &AffinePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner [`AffinePoint`] from this [`PublicKey`].","sig":null,"attributes":[{"value":"/ Borrow the inner [`AffinePoint`] from this [`PublicKey`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50450,"byte_end":50511,"line_start":116,"line_end":116,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50516,"byte_end":50519,"line_start":117,"line_end":117,"column_start":5,"column_end":8}},{"value":"/ In ECC, public keys are elliptic curve points.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50524,"byte_end":50574,"line_start":118,"line_end":118,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50742,"byte_end":50755,"line_start":124,"line_end":124,"column_start":12,"column_end":25},"name":"to_projective","qualname":"<PublicKey<C>>::to_projective","value":"pub fn to_projective(&Self) -> ProjectivePoint<C>","parent":null,"children":[],"decl_id":null,"docs":" Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve\n","sig":null,"attributes":[{"value":"/ Convert this [`PublicKey`] to a [`ProjectivePoint`] for the given curve","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":50655,"byte_end":50730,"line_start":123,"line_end":123,"column_start":5,"column_end":80}}]},{"kind":"Mod","id":{"krate":0,"index":590},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ecdh","qualname":"::ecdh","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","parent":null,"children":[{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":601},{"krate":0,"index":604},{"krate":0,"index":607},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":616},{"krate":0,"index":617},{"krate":0,"index":620},{"krate":0,"index":621},{"krate":0,"index":623},{"krate":0,"index":626},{"krate":0,"index":629},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636},{"krate":0,"index":637},{"krate":0,"index":639},{"krate":0,"index":644},{"krate":0,"index":647},{"krate":0,"index":654},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":664},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676}],"decl_id":null,"docs":" Elliptic Curve Diffie-Hellman Support.","sig":null,"attributes":[{"value":"cfg(feature = \"ecdh\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1180,"byte_end":1204,"line_start":46,"line_end":46,"column_start":1,"column_end":25}},{"value":"/ Elliptic Curve Diffie-Hellman Support.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61529,"byte_end":61571,"line_start":1,"line_end":1,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61572,"byte_end":61575,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ This module contains a generic ECDH implementation which is usable with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61576,"byte_end":61651,"line_start":3,"line_end":3,"column_start":1,"column_end":76}},{"value":"/ any elliptic curve which implements the [`ProjectiveArithmetic`] trait (presently","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61652,"byte_end":61737,"line_start":4,"line_end":4,"column_start":1,"column_end":86}},{"value":"/ the `k256` and `p256` crates)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61738,"byte_end":61771,"line_start":5,"line_end":5,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61772,"byte_end":61775,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ # ECDH Ephemeral (ECDHE) Usage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61776,"byte_end":61810,"line_start":7,"line_end":7,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61811,"byte_end":61814,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ Ephemeral Diffie-Hellman provides a one-time key exchange between two peers","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61815,"byte_end":61894,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ using a randomly generated set of keys for each exchange.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61895,"byte_end":61956,"line_start":10,"line_end":10,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61957,"byte_end":61960,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ In practice ECDHE is used as part of an [Authenticated Key Exchange (AKE)][AKE]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":61961,"byte_end":62044,"line_start":12,"line_end":12,"column_start":1,"column_end":84}},{"value":"/ protocol (e.g. [SIGMA]), where an existing cryptographic trust relationship","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62045,"byte_end":62124,"line_start":13,"line_end":13,"column_start":1,"column_end":80}},{"value":"/ can be used to determine the authenticity of the ephemeral keys, such as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62125,"byte_end":62201,"line_start":14,"line_end":14,"column_start":1,"column_end":77}},{"value":"/ a digital signature. Without such an additional step, ECDHE is insecure!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62202,"byte_end":62278,"line_start":15,"line_end":15,"column_start":1,"column_end":77}},{"value":"/ (see security warning below)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62279,"byte_end":62311,"line_start":16,"line_end":16,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62312,"byte_end":62315,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ See the documentation for the [`EphemeralSecret`] type for more information","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62316,"byte_end":62395,"line_start":18,"line_end":18,"column_start":1,"column_end":80}},{"value":"/ on performing ECDH ephemeral key exchanges.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62396,"byte_end":62443,"line_start":19,"line_end":19,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62444,"byte_end":62447,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/ # Static ECDH Usage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62448,"byte_end":62471,"line_start":21,"line_end":21,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62472,"byte_end":62475,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ Static ECDH key exchanges are supported via the low-level","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62476,"byte_end":62537,"line_start":23,"line_end":23,"column_start":1,"column_end":62}},{"value":"/ [`diffie_hellman`] function.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62538,"byte_end":62570,"line_start":24,"line_end":24,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62571,"byte_end":62574,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [AKE]: https://en.wikipedia.org/wiki/Authenticated_Key_Exchange","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62575,"byte_end":62642,"line_start":26,"line_end":26,"column_start":1,"column_end":68}},{"value":"/ [SIGMA]: https://webee.technion.ac.il/~hugo/sigma-pdf.pdf","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62643,"byte_end":62704,"line_start":27,"line_end":27,"column_start":1,"column_end":62}}]},{"kind":"Function","id":{"krate":0,"index":639},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63795,"byte_end":63809,"line_start":59,"line_end":59,"column_start":8,"column_end":22},"name":"diffie_hellman","qualname":"::ecdh::diffie_hellman","value":"pub fn diffie_hellman<C,\n                      impl Borrow<NonZeroScalar<C>>: Borrow<NonZeroScalar<C>>,\n                      impl Borrow<AffinePoint<C>>: Borrow<AffinePoint<C>>>(impl Borrow<NonZeroScalar<C>>,\n                                                                           impl Borrow<AffinePoint<C>>)\n-> SharedSecret<C> where C: Curve + ProjectiveArithmetic,\nAffinePoint<C>: Copy + Clone + Debug + Zeroize,\nProjectivePoint<C>: From<AffinePoint<C>>, Scalar<C>: PrimeField<Repr =\nFieldBytes<C>> + Clone + Zeroize,\nSharedSecret<C>: for<'a> From<&'a AffinePoint<C>>","parent":null,"children":[],"decl_id":null,"docs":" Low-level Elliptic Curve Diffie-Hellman (ECDH) function.","sig":null,"attributes":[{"value":"/ Low-level Elliptic Curve Diffie-Hellman (ECDH) function.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":62991,"byte_end":63051,"line_start":39,"line_end":39,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63052,"byte_end":63055,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Whenever possible, we recommend using the high-level ECDH ephemeral API","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63056,"byte_end":63131,"line_start":41,"line_end":41,"column_start":1,"column_end":76}},{"value":"/ provided by [`EphemeralSecret`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63132,"byte_end":63168,"line_start":42,"line_end":42,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63169,"byte_end":63172,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ However, if you are implementing a protocol which requires a static scalar","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63173,"byte_end":63251,"line_start":44,"line_end":44,"column_start":1,"column_end":79}},{"value":"/ value as part of an ECDH exchange, this API can be used to compute a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63252,"byte_end":63324,"line_start":45,"line_end":45,"column_start":1,"column_end":73}},{"value":"/ [`SharedSecret`] from that value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63325,"byte_end":63362,"line_start":46,"line_end":46,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63363,"byte_end":63366,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Note that this API operates on the low-level [`NonZeroScalar`] and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63367,"byte_end":63437,"line_start":48,"line_end":48,"column_start":1,"column_end":71}},{"value":"/ [`AffinePoint`] types. If you are attempting to use the higher-level","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63438,"byte_end":63510,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ [`SecretKey`][`crate::SecretKey`] and [`PublicKey`] types, you will","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63511,"byte_end":63582,"line_start":50,"line_end":50,"column_start":1,"column_end":72}},{"value":"/ need to use the following conversions:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63583,"byte_end":63625,"line_start":51,"line_end":51,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63626,"byte_end":63629,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ ```ignore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63630,"byte_end":63643,"line_start":53,"line_end":53,"column_start":1,"column_end":14}},{"value":"/ let shared_secret = elliptic_curve::ecdh::diffie_hellman(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63644,"byte_end":63705,"line_start":54,"line_end":54,"column_start":1,"column_end":62}},{"value":"/     secret_key.secret_scalar(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63706,"byte_end":63741,"line_start":55,"line_end":55,"column_start":1,"column_end":36}},{"value":"/     public_key.as_affine()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63742,"byte_end":63772,"line_start":56,"line_end":56,"column_start":1,"column_end":31}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63773,"byte_end":63779,"line_start":57,"line_end":57,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":63780,"byte_end":63787,"line_start":58,"line_end":58,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":644},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65351,"byte_end":65366,"line_start":98,"line_end":98,"column_start":12,"column_end":27},"name":"EphemeralSecret","qualname":"::ecdh::EphemeralSecret","value":"EphemeralSecret {  }","parent":null,"children":[{"krate":0,"index":646}],"decl_id":null,"docs":" Ephemeral Diffie-Hellman Secret.","sig":null,"attributes":[{"value":"/ Ephemeral Diffie-Hellman Secret.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64459,"byte_end":64495,"line_start":77,"line_end":77,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64496,"byte_end":64499,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ These are ephemeral \"secret key\" values which are deliberately designed","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64500,"byte_end":64575,"line_start":79,"line_end":79,"column_start":1,"column_end":76}},{"value":"/ to avoid being persisted.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64576,"byte_end":64605,"line_start":80,"line_end":80,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64606,"byte_end":64609,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ To perform an ephemeral Diffie-Hellman exchange, do the following:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64610,"byte_end":64680,"line_start":82,"line_end":82,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64681,"byte_end":64684,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ - Have each participant generate an [`EphemeralSecret`] value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64685,"byte_end":64750,"line_start":84,"line_end":84,"column_start":1,"column_end":66}},{"value":"/ - Compute the [`PublicKey`] for that value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64751,"byte_end":64797,"line_start":85,"line_end":85,"column_start":1,"column_end":47}},{"value":"/ - Have each peer provide their [`PublicKey`] to their counterpart","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64798,"byte_end":64867,"line_start":86,"line_end":86,"column_start":1,"column_end":70}},{"value":"/ - Use [`EphemeralSecret`] and the other participant's [`PublicKey`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64868,"byte_end":64939,"line_start":87,"line_end":87,"column_start":1,"column_end":72}},{"value":"/   to compute a [`SharedSecret`] value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64940,"byte_end":64982,"line_start":88,"line_end":88,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64983,"byte_end":64986,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/ # ⚠️ SECURITY WARNING ⚠️","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":64987,"byte_end":65023,"line_start":90,"line_end":90,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65024,"byte_end":65027,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ Ephemeral Diffie-Hellman exchanges are unauthenticated and without a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65028,"byte_end":65100,"line_start":92,"line_end":92,"column_start":1,"column_end":73}},{"value":"/ further authentication step are trivially vulnerable to man-in-the-middle","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65101,"byte_end":65178,"line_start":93,"line_end":93,"column_start":1,"column_end":78}},{"value":"/ attacks!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65179,"byte_end":65191,"line_start":94,"line_end":94,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65192,"byte_end":65195,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ These exchanges should be performed in the context of a protocol which","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65196,"byte_end":65270,"line_start":96,"line_end":96,"column_start":1,"column_end":75}},{"value":"/ takes further steps to authenticate the peers in a key exchange.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65271,"byte_end":65339,"line_start":97,"line_end":97,"column_start":1,"column_end":69}}]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65875,"byte_end":65881,"line_start":115,"line_end":115,"column_start":12,"column_end":18},"name":"random","qualname":"<EphemeralSecret<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Generate a cryptographically random [`EphemeralSecret`].\n","sig":null,"attributes":[{"value":"/ Generate a cryptographically random [`EphemeralSecret`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65803,"byte_end":65863,"line_start":114,"line_end":114,"column_start":5,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66143,"byte_end":66153,"line_start":124,"line_end":124,"column_start":12,"column_end":22},"name":"public_key","qualname":"<EphemeralSecret<C>>::public_key","value":"pub fn public_key(&Self) -> PublicKey<C>","parent":null,"children":[],"decl_id":null,"docs":" Get the public key associated with this ephemeral secret.","sig":null,"attributes":[{"value":"/ Get the public key associated with this ephemeral secret.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66007,"byte_end":66068,"line_start":121,"line_end":121,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66073,"byte_end":66076,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ The `compress` flag enables point compression.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66081,"byte_end":66131,"line_start":123,"line_end":123,"column_start":5,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":653},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66390,"byte_end":66404,"line_start":130,"line_end":130,"column_start":12,"column_end":26},"name":"diffie_hellman","qualname":"<EphemeralSecret<C>>::diffie_hellman","value":"pub fn diffie_hellman(&Self, &PublicKey<C>) -> SharedSecret<C>","parent":null,"children":[],"decl_id":null,"docs":" Compute a Diffie-Hellman shared secret from an ephemeral secret and the\n public key of the other participant in the exchange.\n","sig":null,"attributes":[{"value":"/ Compute a Diffie-Hellman shared secret from an ephemeral secret and the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66242,"byte_end":66317,"line_start":128,"line_end":128,"column_start":5,"column_end":80}},{"value":"/ public key of the other participant in the exchange.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66322,"byte_end":66378,"line_start":129,"line_end":129,"column_start":5,"column_end":61}}]},{"kind":"Struct","id":{"krate":0,"index":664},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68073,"byte_end":68085,"line_start":183,"line_end":183,"column_start":12,"column_end":24},"name":"SharedSecret","qualname":"::ecdh::SharedSecret","value":"SharedSecret {  }","parent":null,"children":[{"krate":0,"index":666}],"decl_id":null,"docs":" Shared secret value computed via ECDH key agreement.","sig":null,"attributes":[{"value":"/ Shared secret value computed via ECDH key agreement.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67362,"byte_end":67418,"line_start":168,"line_end":168,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67419,"byte_end":67422,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ This value contains the raw serialized x-coordinate of the elliptic curve","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67423,"byte_end":67500,"line_start":170,"line_end":170,"column_start":1,"column_end":78}},{"value":"/ point computed from a Diffie-Hellman exchange.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67501,"byte_end":67551,"line_start":171,"line_end":171,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67552,"byte_end":67555,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ # ⚠️ WARNING: NOT UNIFORMLY RANDOM! ⚠️","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67556,"byte_end":67606,"line_start":173,"line_end":173,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67607,"byte_end":67610,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ This value is not uniformly random and should not be used directly","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67611,"byte_end":67681,"line_start":175,"line_end":175,"column_start":1,"column_end":71}},{"value":"/ as a cryptographic key for anything which requires that property","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67682,"byte_end":67750,"line_start":176,"line_end":176,"column_start":1,"column_end":69}},{"value":"/ (e.g. symmetric ciphers).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67751,"byte_end":67780,"line_start":177,"line_end":177,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67781,"byte_end":67784,"line_start":178,"line_end":178,"column_start":1,"column_end":4}},{"value":"/ Instead, the resulting value should be used as input to a Key Derivation","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67785,"byte_end":67861,"line_start":179,"line_end":179,"column_start":1,"column_end":77}},{"value":"/ Function (KDF) or cryptographic hash function to produce a symmetric key.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67862,"byte_end":67939,"line_start":180,"line_end":180,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":669},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68527,"byte_end":68535,"line_start":195,"line_end":195,"column_start":12,"column_end":20},"name":"as_bytes","qualname":"<SharedSecret<C>>::as_bytes","value":"pub fn as_bytes(&Self) -> &FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Shared secret value, serialized as bytes.","sig":null,"attributes":[{"value":"/ Shared secret value, serialized as bytes.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68201,"byte_end":68246,"line_start":189,"line_end":189,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68251,"byte_end":68254,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ As noted in the comments for this struct, this value is non-uniform and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68259,"byte_end":68334,"line_start":191,"line_end":191,"column_start":5,"column_end":80}},{"value":"/ should not be used directly as a symmetric encryption key, but instead","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68339,"byte_end":68413,"line_start":192,"line_end":192,"column_start":5,"column_end":79}},{"value":"/ as input to a KDF (or failing that, a hash function) used to produce","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68418,"byte_end":68490,"line_start":193,"line_end":193,"column_start":5,"column_end":77}},{"value":"/ a symmetric key.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68495,"byte_end":68515,"line_start":194,"line_end":194,"column_start":5,"column_end":25}}]},{"kind":"Struct","id":{"krate":0,"index":1018},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71584,"byte_end":71593,"line_start":75,"line_end":75,"column_start":12,"column_end":21},"name":"SecretKey","qualname":"::secret_key::SecretKey","value":"SecretKey {  }","parent":null,"children":[{"krate":0,"index":1020}],"decl_id":null,"docs":" Elliptic curve secret keys.","sig":null,"attributes":[{"value":"/ Elliptic curve secret keys.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70523,"byte_end":70554,"line_start":47,"line_end":47,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70555,"byte_end":70558,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/ This type wraps a secret scalar value, helping to prevent accidental","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70559,"byte_end":70631,"line_start":49,"line_end":49,"column_start":1,"column_end":73}},{"value":"/ exposure and securely erasing the value from memory when dropped","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70632,"byte_end":70700,"line_start":50,"line_end":50,"column_start":1,"column_end":69}},{"value":"/ (when the `zeroize` feature of this crate is enabled).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70701,"byte_end":70759,"line_start":51,"line_end":51,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70760,"byte_end":70763,"line_start":52,"line_end":52,"column_start":1,"column_end":4}},{"value":"/ # Parsing PKCS#8 Keys","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70764,"byte_end":70789,"line_start":53,"line_end":53,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70790,"byte_end":70793,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ PKCS#8 is a commonly used format for encoding secret keys (especially ones","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70794,"byte_end":70872,"line_start":55,"line_end":55,"column_start":1,"column_end":79}},{"value":"/ generated by OpenSSL).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70873,"byte_end":70899,"line_start":56,"line_end":56,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70900,"byte_end":70903,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ Keys in PKCS#8 format are either binary (ASN.1 BER/DER), or PEM encoded","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70904,"byte_end":70979,"line_start":58,"line_end":58,"column_start":1,"column_end":76}},{"value":"/ (ASCII) and begin with the following:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":70980,"byte_end":71021,"line_start":59,"line_end":59,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71022,"byte_end":71025,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71026,"byte_end":71037,"line_start":61,"line_end":61,"column_start":1,"column_end":12}},{"value":"/ -----BEGIN PRIVATE KEY-----","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71038,"byte_end":71069,"line_start":62,"line_end":62,"column_start":1,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71070,"byte_end":71077,"line_start":63,"line_end":63,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71078,"byte_end":71081,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ To decode an elliptic curve private key from PKCS#8, enable the `pkcs8`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71082,"byte_end":71157,"line_start":65,"line_end":65,"column_start":1,"column_end":76}},{"value":"/ feature of this crate (or the `pkcs8` feature of a specific RustCrypto","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71158,"byte_end":71232,"line_start":66,"line_end":66,"column_start":1,"column_end":75}},{"value":"/ elliptic curve crate) and use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71233,"byte_end":71270,"line_start":67,"line_end":67,"column_start":1,"column_end":38}},{"value":"/ [`elliptic_curve::pkcs8::FromPrivateKey`][`FromPrivateKey`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71271,"byte_end":71334,"line_start":68,"line_end":68,"column_start":1,"column_end":64}},{"value":"/ trait to parse it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71335,"byte_end":71357,"line_start":69,"line_end":69,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71358,"byte_end":71361,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ When the `pem` feature of this crate (or a specific RustCrypto elliptic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71362,"byte_end":71437,"line_start":71,"line_end":71,"column_start":1,"column_end":76}},{"value":"/ curve crate) is enabled, a [`FromStr`] impl is also available.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71438,"byte_end":71504,"line_start":72,"line_end":72,"column_start":1,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":747},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71963,"byte_end":71969,"line_start":89,"line_end":89,"column_start":12,"column_end":18},"name":"random","qualname":"<SecretKey<C>>::random","value":"pub fn random<impl CryptoRng + RngCore: CryptoRng +\n              RngCore>(impl CryptoRng + RngCore) -> Self where\nC: ProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Generate a random [`SecretKey`]\n","sig":null,"attributes":[{"value":"/ Generate a random [`SecretKey`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71823,"byte_end":71858,"line_start":86,"line_end":86,"column_start":5,"column_end":40}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71863,"byte_end":71893,"line_start":87,"line_end":87,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":749},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72327,"byte_end":72330,"line_start":100,"line_end":100,"column_start":12,"column_end":15},"name":"new","qualname":"<SecretKey<C>>::new","value":"pub fn new(C::Secret) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new secret key from a serialized scalar value\n","sig":null,"attributes":[{"value":"/ Create a new secret key from a serialized scalar value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72257,"byte_end":72315,"line_start":99,"line_end":99,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72477,"byte_end":72487,"line_start":105,"line_end":105,"column_start":12,"column_end":22},"name":"from_bytes","qualname":"<SecretKey<C>>::from_bytes","value":"pub fn from_bytes<impl AsRef<[u8]>: AsRef<[u8]>>(impl AsRef<[u8]>)\n-> Result<Self>","parent":null,"children":[],"decl_id":null,"docs":" Deserialize raw private scalar as a big endian integer\n","sig":null,"attributes":[{"value":"/ Deserialize raw private scalar as a big endian integer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72407,"byte_end":72465,"line_start":104,"line_end":104,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":753},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72886,"byte_end":72894,"line_start":118,"line_end":118,"column_start":12,"column_end":20},"name":"to_bytes","qualname":"<SecretKey<C>>::to_bytes","value":"pub fn to_bytes(&Self) -> FieldBytes<C>","parent":null,"children":[],"decl_id":null,"docs":" Expose the byte serialization of the value this [`SecretKey`] wraps\n","sig":null,"attributes":[{"value":"/ Expose the byte serialization of the value this [`SecretKey`] wraps","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72803,"byte_end":72874,"line_start":117,"line_end":117,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73252,"byte_end":73265,"line_start":131,"line_end":131,"column_start":12,"column_end":25},"name":"secret_scalar","qualname":"<SecretKey<C>>::secret_scalar","value":"pub fn secret_scalar(&Self) -> &NonZeroScalar<C> where\nC: ProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nScalar<C>: PrimeField<Repr = FieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Borrow the inner secret [`Scalar`] value.","sig":null,"attributes":[{"value":"/ Borrow the inner secret [`Scalar`] value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":72973,"byte_end":73018,"line_start":122,"line_end":122,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73023,"byte_end":73026,"line_start":123,"line_end":123,"column_start":5,"column_end":8}},{"value":"/ # Warning","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73031,"byte_end":73044,"line_start":124,"line_end":124,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73049,"byte_end":73052,"line_start":125,"line_end":125,"column_start":5,"column_end":8}},{"value":"/ This value is key material.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73057,"byte_end":73088,"line_start":126,"line_end":126,"column_start":5,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73093,"byte_end":73096,"line_start":127,"line_end":127,"column_start":5,"column_end":8}},{"value":"/ Please treat it with the care it deserves!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73101,"byte_end":73147,"line_start":128,"line_end":128,"column_start":5,"column_end":51}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73152,"byte_end":73182,"line_start":129,"line_end":129,"column_start":5,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":755},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73652,"byte_end":73662,"line_start":142,"line_end":142,"column_start":12,"column_end":22},"name":"public_key","qualname":"<SecretKey<C>>::public_key","value":"pub fn public_key(&Self) -> PublicKey<C> where C: weierstrass::Curve +\nProjectiveArithmetic + SecretValue<Secret = NonZeroScalar<C>>,\nAffinePoint<C>: Copy + Clone + Debug + Default,\nProjectivePoint<C>: From<AffinePoint<C>>, Scalar<C>: PrimeField<Repr =\nFieldBytes<C>> + Zeroize","parent":null,"children":[],"decl_id":null,"docs":" Get the [`PublicKey`] which corresponds to this secret key\n","sig":null,"attributes":[{"value":"/ Get the [`PublicKey`] which corresponds to this secret key","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73485,"byte_end":73547,"line_start":139,"line_end":139,"column_start":5,"column_end":67}},{"value":"cfg(feature = \"arithmetic\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":73552,"byte_end":73582,"line_start":140,"line_end":140,"column_start":5,"column_end":35}}]},{"kind":"Trait","id":{"krate":0,"index":766},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77093,"byte_end":77104,"line_start":244,"line_end":244,"column_start":11,"column_end":22},"name":"SecretValue","qualname":"::secret_key::SecretValue","value":"SecretValue: Curve","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768}],"decl_id":null,"docs":" Inner value stored by a [`SecretKey`].\n","sig":null,"attributes":[{"value":"/ Inner value stored by a [`SecretKey`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76939,"byte_end":76981,"line_start":241,"line_end":241,"column_start":1,"column_end":43}}]},{"kind":"Type","id":{"krate":0,"index":767},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77866,"byte_end":77872,"line_start":261,"line_end":261,"column_start":10,"column_end":16},"name":"Secret","qualname":"::secret_key::SecretValue::Secret","value":"type Secret: Into<FieldBytes<Self>> + Zeroize;","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" Inner secret value.","sig":null,"attributes":[{"value":"/ Inner secret value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77118,"byte_end":77141,"line_start":245,"line_end":245,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77146,"byte_end":77149,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ ⚠️ WARNING ⚠️","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77154,"byte_end":77179,"line_start":247,"line_end":247,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77184,"byte_end":77187,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ This type is not intended to be part of the public API and in future","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77192,"byte_end":77264,"line_start":249,"line_end":249,"column_start":5,"column_end":77}},{"value":"/ versions of this crate we will try to explore ways to hide it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77269,"byte_end":77335,"line_start":250,"line_end":250,"column_start":5,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77340,"byte_end":77343,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Crates such as `k256` and `p256` conditionally define this type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77348,"byte_end":77415,"line_start":252,"line_end":252,"column_start":5,"column_end":72}},{"value":"/ differently depending on what cargo features are enabled.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77420,"byte_end":77481,"line_start":253,"line_end":253,"column_start":5,"column_end":66}},{"value":"/ This means any consumers of this crate attempting to use this type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77486,"byte_end":77556,"line_start":254,"line_end":254,"column_start":5,"column_end":75}},{"value":"/ may experience breakages if the cargo features are not what are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77561,"byte_end":77628,"line_start":255,"line_end":255,"column_start":5,"column_end":72}},{"value":"/ expected.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77633,"byte_end":77646,"line_start":256,"line_end":256,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77651,"byte_end":77654,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ We regret exposing it as part of the public API for now, however if","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77659,"byte_end":77730,"line_start":258,"line_end":258,"column_start":5,"column_end":76}},{"value":"/ you do reference this type as a downstream consumer of a curve crate,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77735,"byte_end":77808,"line_start":259,"line_end":259,"column_start":5,"column_end":78}},{"value":"/ be aware you will experience breakages!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77813,"byte_end":77856,"line_start":260,"line_end":260,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78005,"byte_end":78022,"line_start":265,"line_end":265,"column_start":8,"column_end":25},"name":"from_secret_bytes","qualname":"::secret_key::SecretValue::from_secret_bytes","value":"pub fn from_secret_bytes(&FieldBytes<Self>) -> Option<Self::Secret>","parent":{"krate":0,"index":766},"children":[],"decl_id":null,"docs":" Parse the secret value from bytes\n","sig":null,"attributes":[{"value":"/ Parse the secret value from bytes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77913,"byte_end":77950,"line_start":263,"line_end":263,"column_start":5,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":1024},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78739,"byte_end":78750,"line_start":288,"line_end":288,"column_start":12,"column_end":23},"name":"SecretBytes","qualname":"::secret_key::SecretBytes","value":"","parent":null,"children":[],"decl_id":null,"docs":" Newtype wrapper for [`FieldBytes`] which impls [`Zeroize`].","sig":null,"attributes":[{"value":"/ Newtype wrapper for [`FieldBytes`] which impls [`Zeroize`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78462,"byte_end":78525,"line_start":282,"line_end":282,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78526,"byte_end":78529,"line_start":283,"line_end":283,"column_start":1,"column_end":4}},{"value":"/ This allows it to fulfill the [`Zeroize`] bound on [`SecretValue::Secret`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78530,"byte_end":78609,"line_start":284,"line_end":284,"column_start":1,"column_end":80}}]},{"kind":"Trait","id":{"krate":0,"index":885},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2899,"byte_end":2904,"line_start":111,"line_end":111,"column_start":11,"column_end":16},"name":"Curve","qualname":"::Curve","value":"Curve: Clone + Debug + Default + Eq + Ord + Send + Sync","parent":null,"children":[{"krate":0,"index":886}],"decl_id":null,"docs":" Elliptic curve.","sig":null,"attributes":[{"value":"/ Elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2573,"byte_end":2592,"line_start":103,"line_end":103,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2593,"byte_end":2596,"line_start":104,"line_end":104,"column_start":1,"column_end":4}},{"value":"/ This trait is intended to be impl'd by a ZST which represents a concrete","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2597,"byte_end":2673,"line_start":105,"line_end":105,"column_start":1,"column_end":77}},{"value":"/ elliptic curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2674,"byte_end":2693,"line_start":106,"line_end":106,"column_start":1,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2694,"byte_end":2697,"line_start":107,"line_end":107,"column_start":1,"column_end":4}},{"value":"/ Other traits in this crate which are bounded by [`Curve`] are intended to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2698,"byte_end":2775,"line_start":108,"line_end":108,"column_start":1,"column_end":78}},{"value":"/ be impl'd by these ZSTs, facilitating types which are generic over elliptic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2776,"byte_end":2855,"line_start":109,"line_end":109,"column_start":1,"column_end":80}},{"value":"/ curves (e.g. [`SecretKey`]).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2856,"byte_end":2888,"line_start":110,"line_end":110,"column_start":1,"column_end":33}}]},{"kind":"Type","id":{"krate":0,"index":886},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3243,"byte_end":3252,"line_start":117,"line_end":117,"column_start":10,"column_end":19},"name":"FieldSize","qualname":"::Curve::FieldSize","value":"type FieldSize: ArrayLength<u8> + Add + Eq + Ord + Unsigned;","parent":{"krate":0,"index":885},"children":[],"decl_id":null,"docs":" Size of this curve's field in *bytes*, i.e. the number of bytes needed\n to serialize a field element.","sig":null,"attributes":[{"value":"/ Size of this curve's field in *bytes*, i.e. the number of bytes needed","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2961,"byte_end":3035,"line_start":112,"line_end":112,"column_start":5,"column_end":79}},{"value":"/ to serialize a field element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3040,"byte_end":3073,"line_start":113,"line_end":113,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3078,"byte_end":3081,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ This is used for computing the sizes of field element types related to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3086,"byte_end":3160,"line_start":115,"line_end":115,"column_start":5,"column_end":79}},{"value":"/ this curve and other types composed from them (e.g. signatures).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3165,"byte_end":3233,"line_start":116,"line_end":116,"column_start":5,"column_end":73}}]},{"kind":"Type","id":{"krate":0,"index":887},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3384,"byte_end":3394,"line_start":121,"line_end":121,"column_start":10,"column_end":20},"name":"FieldBytes","qualname":"::FieldBytes","value":"GenericArray<u8, <C as Curve>::FieldSize>","parent":null,"children":[],"decl_id":null,"docs":" Byte representation of a base/scalar field element of a given curve.\n","sig":null,"attributes":[{"value":"/ Byte representation of a base/scalar field element of a given curve.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":3302,"byte_end":3374,"line_start":120,"line_end":120,"column_start":1,"column_end":73}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4665,"byte_end":4666,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":32},{"krate":0,"index":33}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6877,"byte_end":6889,"line_start":68,"line_end":68,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":126},{"krate":0,"index":128},{"krate":0,"index":129},{"krate":0,"index":130},{"krate":0,"index":131},{"krate":0,"index":132},{"krate":0,"index":133},{"krate":0,"index":134},{"krate":0,"index":136},{"krate":0,"index":137},{"krate":0,"index":138},{"krate":0,"index":139},{"krate":0,"index":141},{"krate":0,"index":143},{"krate":0,"index":145},{"krate":0,"index":146},{"krate":0,"index":147},{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14590,"byte_end":14602,"line_start":290,"line_end":290,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":151}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14843,"byte_end":14855,"line_start":302,"line_end":302,"column_start":37,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":154}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15365,"byte_end":15377,"line_start":320,"line_end":320,"column_start":18,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15592,"byte_end":15604,"line_start":329,"line_end":329,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":159}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15923,"byte_end":15935,"line_start":341,"line_end":341,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":162}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16754,"byte_end":16765,"line_start":378,"line_end":378,"column_start":20,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":166}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17690,"byte_end":17693,"line_start":412,"line_end":412,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":168},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171},{"krate":0,"index":172}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":21465,"byte_end":21466,"line_start":526,"line_end":526,"column_start":31,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":185}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32918,"byte_end":32923,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35930,"byte_end":35941,"line_start":30,"line_end":30,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":296},{"krate":0,"index":297},{"krate":0,"index":298},{"krate":0,"index":299},{"krate":0,"index":300},{"krate":0,"index":301},{"krate":0,"index":302},{"krate":0,"index":303}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39092,"byte_end":39103,"line_start":134,"line_end":134,"column_start":34,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":306}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39231,"byte_end":39242,"line_start":143,"line_end":143,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":309}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39383,"byte_end":39394,"line_start":152,"line_end":152,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":312}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39795,"byte_end":39806,"line_start":168,"line_end":168,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":315}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40057,"byte_end":40068,"line_start":180,"line_end":180,"column_start":18,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40150,"byte_end":40161,"line_start":187,"line_end":187,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":321}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40285,"byte_end":40295,"line_start":196,"line_end":196,"column_start":34,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40448,"byte_end":40459,"line_start":205,"line_end":205,"column_start":23,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":327}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40603,"byte_end":40614,"line_start":214,"line_end":214,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":331}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42967,"byte_end":42980,"line_start":34,"line_end":34,"column_start":9,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":398},{"krate":0,"index":400},{"krate":0,"index":401}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43875,"byte_end":43888,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":404}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44089,"byte_end":44102,"line_start":75,"line_end":75,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44406,"byte_end":44419,"line_start":87,"line_end":87,"column_start":18,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44538,"byte_end":44551,"line_start":94,"line_end":94,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":412},{"krate":0,"index":413}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44780,"byte_end":44790,"line_start":106,"line_end":106,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":416}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45005,"byte_end":45018,"line_start":116,"line_end":116,"column_start":20,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":419},{"krate":0,"index":420}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45315,"byte_end":45328,"line_start":129,"line_end":129,"column_start":28,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":423},{"krate":0,"index":424}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45748,"byte_end":45761,"line_start":146,"line_end":146,"column_start":21,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":427}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48953,"byte_end":48962,"line_start":74,"line_end":74,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":547},{"krate":0,"index":548},{"krate":0,"index":549},{"krate":0,"index":551},{"krate":0,"index":552}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":52717,"byte_end":52726,"line_start":181,"line_end":181,"column_start":35,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":53025,"byte_end":53034,"line_start":193,"line_end":193,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":558},{"krate":0,"index":559}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":53541,"byte_end":53550,"line_start":209,"line_end":209,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":562},{"krate":0,"index":563}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":54051,"byte_end":54063,"line_start":225,"line_end":225,"column_start":32,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":566}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":54565,"byte_end":54577,"line_start":239,"line_end":239,"column_start":33,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":569}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":55091,"byte_end":55100,"line_start":253,"line_end":253,"column_start":33,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":55738,"byte_end":55747,"line_start":269,"line_end":269,"column_start":31,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":576}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56336,"byte_end":56345,"line_start":285,"line_end":285,"column_start":18,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56503,"byte_end":56512,"line_start":293,"line_end":293,"column_start":16,"column_end":25},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56875,"byte_end":56884,"line_start":304,"line_end":304,"column_start":23,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":583}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":57338,"byte_end":57347,"line_start":318,"line_end":318,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":586}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":57802,"byte_end":57811,"line_start":332,"line_end":332,"column_start":17,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":589}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65515,"byte_end":65530,"line_start":106,"line_end":106,"column_start":9,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":653}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66568,"byte_end":66577,"line_start":135,"line_end":135,"column_start":39,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":657}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66974,"byte_end":66989,"line_start":148,"line_end":148,"column_start":21,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":660}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67181,"byte_end":67196,"line_start":158,"line_end":158,"column_start":18,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":663}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68179,"byte_end":68191,"line_start":188,"line_end":188,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":669}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68638,"byte_end":68650,"line_start":200,"line_end":200,"column_start":40,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":69080,"byte_end":69092,"line_start":212,"line_end":212,"column_start":28,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":675}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":69195,"byte_end":69207,"line_start":218,"line_end":218,"column_start":25,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71702,"byte_end":71711,"line_start":80,"line_end":80,"column_start":9,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":747},{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":754},{"krate":0,"index":755}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76286,"byte_end":76295,"line_start":209,"line_end":209,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":758},{"krate":0,"index":759}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76535,"byte_end":76544,"line_start":222,"line_end":222,"column_start":19,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76819,"byte_end":76828,"line_start":232,"line_end":232,"column_start":18,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":765}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78186,"byte_end":78187,"line_start":270,"line_end":270,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":771},{"krate":0,"index":772}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78817,"byte_end":78828,"line_start":290,"line_end":290,"column_start":40,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":775}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78957,"byte_end":78967,"line_start":296,"line_end":296,"column_start":41,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":778}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79083,"byte_end":79094,"line_start":302,"line_end":302,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":781}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79182,"byte_end":79193,"line_start":308,"line_end":308,"column_start":26,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":784},{"krate":0,"index":785}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79325,"byte_end":79336,"line_start":316,"line_end":316,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":788}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":915,"byte_end":918,"line_start":28,"line_end":28,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":928,"byte_end":932,"line_start":29,"line_end":29,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":34}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":942,"byte_end":946,"line_start":30,"line_end":30,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":186}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":956,"byte_end":967,"line_start":31,"line_end":31,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":193}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":1261,"byte_end":1265,"line_start":48,"line_end":48,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":590}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ops.rs","byte_start":4665,"byte_end":4666,"line_start":17,"line_end":17,"column_start":31,"column_end":32},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":31},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":6877,"byte_end":6889,"line_start":68,"line_end":68,"column_start":9,"column_end":21},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":889},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14590,"byte_end":14602,"line_start":290,"line_end":290,"column_start":25,"column_end":37},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":14843,"byte_end":14855,"line_start":302,"line_end":302,"column_start":37,"column_end":49},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":889},"to":{"krate":4,"index":66}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15365,"byte_end":15377,"line_start":320,"line_end":320,"column_start":18,"column_end":30},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15592,"byte_end":15604,"line_start":329,"line_end":329,"column_start":19,"column_end":31},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":15923,"byte_end":15935,"line_start":341,"line_end":341,"column_start":21,"column_end":33},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":889},"to":{"krate":30,"index":44}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":16754,"byte_end":16765,"line_start":378,"line_end":378,"column_start":20,"column_end":31},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":915},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":17690,"byte_end":17693,"line_start":412,"line_end":412,"column_start":6,"column_end":9},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":952},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/sec1.rs","byte_start":21465,"byte_end":21466,"line_start":526,"line_end":526,"column_start":31,"column_end":32},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":184},"to":{"krate":0,"index":181}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32203,"byte_end":32208,"line_start":7,"line_end":7,"column_start":25,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":885},"to":{"krate":0,"index":204}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/weierstrass.rs","byte_start":32549,"byte_end":32554,"line_start":17,"line_end":17,"column_start":38,"column_end":43},"kind":"SuperTrait","from":{"krate":1,"index":2837},"to":{"krate":0,"index":207}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/error.rs","byte_start":32918,"byte_end":32923,"line_start":12,"line_end":12,"column_start":18,"column_end":23},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":976},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/order.rs","byte_start":33758,"byte_end":33763,"line_start":15,"line_end":15,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":0,"index":885},"to":{"krate":0,"index":229}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":35930,"byte_end":35941,"line_start":30,"line_end":30,"column_start":9,"column_end":20},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":989},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39092,"byte_end":39103,"line_start":134,"line_end":134,"column_start":34,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39231,"byte_end":39242,"line_start":143,"line_end":143,"column_start":25,"column_end":36},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39383,"byte_end":39394,"line_start":152,"line_end":152,"column_start":37,"column_end":48},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":989},"to":{"krate":4,"index":66}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":39795,"byte_end":39806,"line_start":168,"line_end":168,"column_start":28,"column_end":39},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":989},"to":{"krate":4,"index":58}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40057,"byte_end":40068,"line_start":180,"line_end":180,"column_start":18,"column_end":29},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40150,"byte_end":40161,"line_start":187,"line_end":187,"column_start":21,"column_end":32},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40285,"byte_end":40295,"line_start":196,"line_end":196,"column_start":34,"column_end":44},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":887},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40448,"byte_end":40459,"line_start":205,"line_end":205,"column_start":23,"column_end":34},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/bytes.rs","byte_start":40603,"byte_end":40614,"line_start":214,"line_end":214,"column_start":28,"column_end":39},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":989},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":42967,"byte_end":42980,"line_start":34,"line_end":34,"column_start":9,"column_end":22},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":1003},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":43875,"byte_end":43888,"line_start":65,"line_end":65,"column_start":30,"column_end":43},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":1003},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44089,"byte_end":44102,"line_start":75,"line_end":75,"column_start":37,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":1003},"to":{"krate":4,"index":66}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44406,"byte_end":44419,"line_start":87,"line_end":87,"column_start":18,"column_end":31},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":1003},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44538,"byte_end":44551,"line_start":94,"line_end":94,"column_start":19,"column_end":32},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":1003},"to":{"krate":1,"index":3054}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":44780,"byte_end":44790,"line_start":106,"line_end":106,"column_start":36,"column_end":46},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":887},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45005,"byte_end":45018,"line_start":116,"line_end":116,"column_start":20,"column_end":33},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":1003},"to":{"krate":0,"index":27}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45315,"byte_end":45328,"line_start":129,"line_end":129,"column_start":28,"column_end":41},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":1003},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/scalar/non_zero.rs","byte_start":45748,"byte_end":45761,"line_start":146,"line_end":146,"column_start":21,"column_end":34},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":1003},"to":{"krate":30,"index":44}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/point.rs","byte_start":46154,"byte_end":46159,"line_start":7,"line_end":7,"column_start":33,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":885},"to":{"krate":0,"index":457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":48953,"byte_end":48962,"line_start":74,"line_end":74,"column_start":9,"column_end":18},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":1009},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":52717,"byte_end":52726,"line_start":181,"line_end":181,"column_start":35,"column_end":44},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":53025,"byte_end":53034,"line_start":193,"line_end":193,"column_start":38,"column_end":47},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":53541,"byte_end":53550,"line_start":209,"line_end":209,"column_start":39,"column_end":48},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":54051,"byte_end":54063,"line_start":225,"line_end":225,"column_start":32,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":54565,"byte_end":54577,"line_start":239,"line_end":239,"column_start":33,"column_end":45},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":889},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":55091,"byte_end":55100,"line_start":253,"line_end":253,"column_start":33,"column_end":42},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":1009},"to":{"krate":0,"index":175}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":55738,"byte_end":55747,"line_start":269,"line_end":269,"column_start":31,"column_end":40},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1009},"to":{"krate":0,"index":178}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56336,"byte_end":56345,"line_start":285,"line_end":285,"column_start":18,"column_end":27},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56503,"byte_end":56512,"line_start":293,"line_end":293,"column_start":16,"column_end":25},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":56875,"byte_end":56884,"line_start":304,"line_end":304,"column_start":23,"column_end":32},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":57338,"byte_end":57347,"line_start":318,"line_end":318,"column_start":24,"column_end":33},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/public_key.rs","byte_start":57802,"byte_end":57811,"line_start":332,"line_end":332,"column_start":17,"column_end":26},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":65515,"byte_end":65530,"line_start":106,"line_end":106,"column_start":9,"column_end":24},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":644},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66568,"byte_end":66577,"line_start":135,"line_end":135,"column_start":39,"column_end":48},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":1009},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":66974,"byte_end":66989,"line_start":148,"line_end":148,"column_start":21,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":644},"to":{"krate":30,"index":44}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":67181,"byte_end":67196,"line_start":158,"line_end":158,"column_start":18,"column_end":33},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":644},"to":{"krate":1,"index":3078}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68179,"byte_end":68191,"line_start":188,"line_end":188,"column_start":16,"column_end":28},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":664},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":68638,"byte_end":68650,"line_start":200,"line_end":200,"column_start":40,"column_end":52},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":69080,"byte_end":69092,"line_start":212,"line_end":212,"column_start":28,"column_end":40},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":664},"to":{"krate":30,"index":44}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/ecdh.rs","byte_start":69195,"byte_end":69207,"line_start":218,"line_end":218,"column_start":25,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":664},"to":{"krate":1,"index":3078}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":71702,"byte_end":71711,"line_start":80,"line_end":80,"column_start":9,"column_end":18},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":1018},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76286,"byte_end":76295,"line_start":209,"line_end":209,"column_start":28,"column_end":37},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":1018},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76535,"byte_end":76544,"line_start":222,"line_end":222,"column_start":19,"column_end":28},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":1018},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":76819,"byte_end":76828,"line_start":232,"line_end":232,"column_start":18,"column_end":27},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":1018},"to":{"krate":1,"index":3078}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":77106,"byte_end":77111,"line_start":244,"line_end":244,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":0,"index":885},"to":{"krate":0,"index":766}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78186,"byte_end":78187,"line_start":270,"line_end":270,"column_start":25,"column_end":26},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":770},"to":{"krate":0,"index":766}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78817,"byte_end":78828,"line_start":290,"line_end":290,"column_start":40,"column_end":51},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":1024},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":78957,"byte_end":78967,"line_start":296,"line_end":296,"column_start":41,"column_end":51},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":887},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79083,"byte_end":79094,"line_start":302,"line_end":302,"column_start":32,"column_end":43},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":1024},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79182,"byte_end":79193,"line_start":308,"line_end":308,"column_start":26,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":1024},"to":{"krate":1,"index":3054}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/secret_key.rs","byte_start":79325,"byte_end":79336,"line_start":316,"line_end":316,"column_start":28,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":1024},"to":{"krate":30,"index":44}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2906,"byte_end":2911,"line_start":111,"line_end":111,"column_start":18,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2457},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2914,"byte_end":2919,"line_start":111,"line_end":111,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":8805},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2922,"byte_end":2929,"line_start":111,"line_end":111,"column_start":34,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":2810},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2932,"byte_end":2934,"line_start":111,"line_end":111,"column_start":44,"column_end":46},"kind":"SuperTrait","from":{"krate":1,"index":2492},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2937,"byte_end":2940,"line_start":111,"line_end":111,"column_start":49,"column_end":52},"kind":"SuperTrait","from":{"krate":1,"index":2519},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2943,"byte_end":2947,"line_start":111,"line_end":111,"column_start":55,"column_end":59},"kind":"SuperTrait","from":{"krate":1,"index":2832},"to":{"krate":0,"index":885}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/elliptic-curve-0.9.12/src/lib.rs","byte_start":2950,"byte_end":2954,"line_start":111,"line_end":111,"column_start":62,"column_end":66},"kind":"SuperTrait","from":{"krate":1,"index":2844},"to":{"krate":0,"index":885}}]}