{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4","program":"/Users/julia/.rustup/toolchains/stable-x86_64-apple-darwin/bin/rls","arguments":["--crate-name","bitvec","--edition=2018","/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","--json=diagnostic-rendered-ansi","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","split-debuginfo=unpacked","-C","debuginfo=2","-C","metadata=8bcb81f8cd20cb06","-C","extra-filename=-8bcb81f8cd20cb06","--out-dir","/Users/julia/ruhackathon/target/rls/debug/deps","-L","dependency=/Users/julia/ruhackathon/target/rls/debug/deps","--extern","funty=/Users/julia/ruhackathon/target/rls/debug/deps/libfunty-97fadd8e5be02432.rmeta","--extern","radium=/Users/julia/ruhackathon/target/rls/debug/deps/libradium-1b892708c9146baf.rmeta","--extern","tap=/Users/julia/ruhackathon/target/rls/debug/deps/libtap-42ec53a87a91decd.rmeta","--extern","wyz=/Users/julia/ruhackathon/target/rls/debug/deps/libwyz-6e0ba4b5c5adc969.rmeta","--cap-lints","allow","--error-format=json","--sysroot","/Users/julia/.rustup/toolchains/stable-x86_64-apple-darwin"],"output":"/Users/julia/ruhackathon/target/rls/debug/deps/libbitvec-8bcb81f8cd20cb06.rmeta"},"prelude":{"crate_id":{"name":"bitvec","disambiguator":[14851539261954789943,15604764097012981211]},"crate_root":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src","external_crates":[{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[17161976177339802527,9637120080719870273]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[12784072134307519025,4657485898025748013]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[8860544973196061204,9932137894390183628]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","num":4,"id":{"name":"funty","disambiguator":[11994280634423852699,10648987090702083785]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","num":5,"id":{"name":"radium","disambiguator":[16917809150809643676,3878275019157653836]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","num":6,"id":{"name":"tap","disambiguator":[12632791922117082934,5412440633162020162]}},{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","num":7,"id":{"name":"wyz","disambiguator":[14138619879403673573,1821794984299287805]}}],"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":11445,"line_start":1,"line_end":298,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":1,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":29169,"byte_end":29173,"line_start":14,"line_end":14,"column_start":9,"column_end":13},"alias_span":null,"name":"core","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":4,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":29199,"byte_end":29204,"line_start":17,"line_end":17,"column_start":9,"column_end":14},"alias_span":null,"name":"funty","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":18},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41795,"byte_end":41810,"line_start":423,"line_end":423,"column_start":15,"column_end":30},"alias_span":null,"name":"u8_from_ne_bits","value":"","parent":{"krate":0,"index":5}},{"kind":"Use","ref_id":{"krate":0,"index":3471},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60745,"byte_end":60753,"line_start":284,"line_end":284,"column_start":21,"column_end":29},"alias_span":null,"name":"IntoIter","value":"","parent":{"krate":0,"index":63}},{"kind":"Use","ref_id":{"krate":0,"index":3905},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212352,"byte_end":212356,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":0,"index":3906},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212352,"byte_end":212356,"line_start":359,"line_end":359,"column_start":15,"column_end":19},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":975}},{"kind":"Use","ref_id":{"krate":0,"index":88},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218297,"byte_end":218305,"line_start":10,"line_end":10,"column_start":9,"column_end":17},"alias_span":null,"name":"BitArray","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218308,"byte_end":218314,"line_start":11,"line_end":11,"column_start":2,"column_end":8},"alias_span":null,"name":"bitarr","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":25},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218317,"byte_end":218321,"line_start":12,"line_end":12,"column_start":2,"column_end":6},"alias_span":null,"name":"bits","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":686},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218331,"byte_end":218339,"line_start":13,"line_end":13,"column_start":9,"column_end":17},"alias_span":null,"name":"BitField","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":996},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218353,"byte_end":218361,"line_start":15,"line_end":15,"column_start":3,"column_end":11},"alias_span":null,"name":"BitOrder","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3905},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218365,"byte_end":218374,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3906},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218365,"byte_end":218374,"line_start":16,"line_end":16,"column_start":3,"column_end":12},"alias_span":null,"name":"LocalBits","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3905},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218378,"byte_end":218382,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3906},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218378,"byte_end":218382,"line_start":17,"line_end":17,"column_start":3,"column_end":7},"alias_span":null,"name":"Lsb0","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3927},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218386,"byte_end":218390,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3928},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218386,"byte_end":218390,"line_start":18,"line_end":18,"column_start":3,"column_end":7},"alias_span":null,"name":"Msb0","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":1705},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218406,"byte_end":218412,"line_start":21,"line_end":21,"column_start":3,"column_end":9},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218416,"byte_end":218427,"line_start":22,"line_end":22,"column_start":3,"column_end":14},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218431,"byte_end":218437,"line_start":23,"line_end":23,"column_start":3,"column_end":9},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":2219},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218451,"byte_end":218459,"line_start":25,"line_end":25,"column_start":9,"column_end":17},"alias_span":null,"name":"BitSlice","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3329},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218469,"byte_end":218477,"line_start":26,"line_end":26,"column_start":9,"column_end":17},"alias_span":null,"name":"BitStore","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3374},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218486,"byte_end":218493,"line_start":27,"line_end":27,"column_start":8,"column_end":15},"alias_span":null,"name":"BitView","value":"","parent":{"krate":0,"index":1034}},{"kind":"Use","ref_id":{"krate":0,"index":3871},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223224,"byte_end":223229,"line_start":103,"line_end":103,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":3872},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223224,"byte_end":223229,"line_start":103,"line_end":103,"column_start":3,"column_end":8},"alias_span":null,"name":"Const","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":3888},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223233,"byte_end":223236,"line_start":104,"line_end":104,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":3889},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223233,"byte_end":223236,"line_start":104,"line_end":104,"column_start":3,"column_end":6},"alias_span":null,"name":"Mut","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":1169},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223266,"byte_end":223273,"line_start":108,"line_end":108,"column_start":4,"column_end":11},"alias_span":null,"name":"Address","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":3949},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223278,"byte_end":223290,"line_start":109,"line_end":109,"column_start":4,"column_end":16},"alias_span":null,"name":"AddressError","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":1326},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223306,"byte_end":223312,"line_start":111,"line_end":111,"column_start":10,"column_end":16},"alias_span":null,"name":"BitRef","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":1505},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223323,"byte_end":223334,"line_start":112,"line_end":112,"column_start":10,"column_end":21},"alias_span":null,"name":"BitPtrRange","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":1705},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223351,"byte_end":223357,"line_start":114,"line_end":114,"column_start":4,"column_end":10},"alias_span":null,"name":"BitPtr","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":3985},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223362,"byte_end":223373,"line_start":115,"line_end":115,"column_start":4,"column_end":15},"alias_span":null,"name":"BitPtrError","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":4022},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223388,"byte_end":223400,"line_start":117,"line_end":117,"column_start":9,"column_end":21},"alias_span":null,"name":"BitSpanError","value":"","parent":{"krate":0,"index":1080}},{"kind":"Use","ref_id":{"krate":0,"index":2557},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432333,"byte_end":432341,"line_start":2736,"line_end":2736,"column_start":3,"column_end":11},"alias_span":null,"name":"from_mut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2560},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432345,"byte_end":432359,"line_start":2737,"line_end":2737,"column_start":3,"column_end":17},"alias_span":null,"name":"from_raw_parts","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2564},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432363,"byte_end":432381,"line_start":2738,"line_end":2738,"column_start":3,"column_end":21},"alias_span":null,"name":"from_raw_parts_mut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2554},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432385,"byte_end":432393,"line_start":2739,"line_end":2739,"column_start":3,"column_end":11},"alias_span":null,"name":"from_ref","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2568},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432397,"byte_end":432410,"line_start":2740,"line_end":2740,"column_start":3,"column_end":16},"alias_span":null,"name":"BitSliceIndex","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4242},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432427,"byte_end":432433,"line_start":2743,"line_end":2743,"column_start":3,"column_end":9},"alias_span":null,"name":"Chunks","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4315},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432437,"byte_end":432448,"line_start":2744,"line_end":2744,"column_start":3,"column_end":14},"alias_span":null,"name":"ChunksExact","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4355},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432452,"byte_end":432466,"line_start":2745,"line_end":2745,"column_start":3,"column_end":17},"alias_span":null,"name":"ChunksExactMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4281},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432470,"byte_end":432479,"line_start":2746,"line_end":2746,"column_start":3,"column_end":12},"alias_span":null,"name":"ChunksMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2683},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432483,"byte_end":432487,"line_start":2747,"line_end":2747,"column_start":3,"column_end":7},"alias_span":null,"name":"Iter","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2716},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432491,"byte_end":432498,"line_start":2748,"line_end":2748,"column_start":3,"column_end":10},"alias_span":null,"name":"IterMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4835},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432502,"byte_end":432510,"line_start":2749,"line_end":2749,"column_start":3,"column_end":11},"alias_span":null,"name":"IterOnes","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4884},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432514,"byte_end":432523,"line_start":2750,"line_end":2750,"column_start":3,"column_end":12},"alias_span":null,"name":"IterZeros","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4390},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432527,"byte_end":432534,"line_start":2751,"line_end":2751,"column_start":3,"column_end":10},"alias_span":null,"name":"RChunks","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4463},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432538,"byte_end":432550,"line_start":2752,"line_end":2752,"column_start":3,"column_end":15},"alias_span":null,"name":"RChunksExact","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4503},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432554,"byte_end":432569,"line_start":2753,"line_end":2753,"column_start":3,"column_end":18},"alias_span":null,"name":"RChunksExactMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4429},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432573,"byte_end":432583,"line_start":2754,"line_end":2754,"column_start":3,"column_end":13},"alias_span":null,"name":"RChunksMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4653},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432587,"byte_end":432593,"line_start":2755,"line_end":2755,"column_start":3,"column_end":9},"alias_span":null,"name":"RSplit","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2770},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432597,"byte_end":432606,"line_start":2756,"line_end":2756,"column_start":3,"column_end":12},"alias_span":null,"name":"RSplitMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2794},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432610,"byte_end":432617,"line_start":2757,"line_end":2757,"column_start":3,"column_end":10},"alias_span":null,"name":"RSplitN","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2801},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432621,"byte_end":432631,"line_start":2758,"line_end":2758,"column_start":3,"column_end":13},"alias_span":null,"name":"RSplitNMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4563},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432635,"byte_end":432640,"line_start":2759,"line_end":2759,"column_start":3,"column_end":8},"alias_span":null,"name":"Split","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2762},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432644,"byte_end":432652,"line_start":2760,"line_end":2760,"column_start":3,"column_end":11},"alias_span":null,"name":"SplitMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2780},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432656,"byte_end":432662,"line_start":2761,"line_end":2761,"column_start":3,"column_end":9},"alias_span":null,"name":"SplitN","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":2787},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432666,"byte_end":432675,"line_start":2762,"line_end":2762,"column_start":3,"column_end":12},"alias_span":null,"name":"SplitNMut","value":"","parent":{"krate":0,"index":2132}},{"kind":"Use","ref_id":{"krate":0,"index":4203},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432679,"byte_end":432686,"line_start":2763,"line_end":2763,"column_start":3,"column_end":10},"alias_span":null,"name":"Windows","value":"","parent":{"krate":0,"index":2132}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":11445,"line_start":1,"line_end":298,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":26},{"krate":0,"index":63},{"krate":0,"index":510},{"krate":0,"index":544},{"krate":0,"index":636},{"krate":0,"index":748},{"krate":0,"index":936},{"krate":0,"index":967},{"krate":0,"index":975},{"krate":0,"index":1034},{"krate":0,"index":1080},{"krate":0,"index":2132},{"krate":0,"index":3299},{"krate":0,"index":3346}],"decl_id":null,"docs":" # `bitvec` — Addressable Bits","sig":null,"attributes":[{"value":"* # `bitvec` — Addressable Bits\n\n`bitvec` provides the foundation tools needed to implement truly single-bit\n`bool` collections and arbitrary bit-precision addressing. It builds compact\ncollections and performant [bitfield] regions with a high-level, expressive, API\nthat compiles down to the simple machine instructions you would expect.\n\n# Examples\n\nThe [`examples/`] directory of the project repository contains some programs\nthat showcase different `bitvec` features and use cases. In addition, each data\nstructure’s API documentation contains more focused samples.\n\nTo begin using `bitvec`, you need only import its [prelude]. Once in scope,\n`bitvec` can take over existing memory buffers or create entirely new values:\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = &[0u8, 1, 2, 3];\nlet data_bits = data.view_bits::<Msb0>();\n\nlet literal_bits = bits![Lsb0, u16; 1, 0, 1, 1];\nassert_eq!(literal_bits.as_slice()[0], 0b1101);\n\nlet array_bool = bitarr![1; 40];\n# #[cfg(feature = \"alloc\")] {\nlet boxed_bool = bitbox![Lsb0, u32; 1; 50];\nlet vec_bool = bitvec![Msb0, usize; 1; 60];\n# }\n```\n\nThe two easiest entry points into `bitvec` are through the [`BitView`] trait,\nwhich provides extension methods on ordinary memory to view it as a\n[`BitSlice`], and the [macro] constructors, which convert token strings into\nappropriate buffers at compile time. Each data structure also has its own\nconstructor functions that create new buffers or borrow existing values.\n\nOnce in use, `bitvec`’s types obey all the same patterns and APIs that you have\ncome to expect from their analogues in the [`core`], [`alloc`], and [`std`]\nlibraries.\n\n# Usage\n\n`bitvec` provides data structures that specialize the major sequence types in\nthe standard libraries:\n\n- `[bool]` becomes [`BitSlice`]\n- `[bool; N]` becomes [`BitArray`]\n- `Box<[bool]>` becomes [`BitBox`]\n- `Vec<bool>` becomes [`BitVec`]\n\nYou can start using the crate in an existing codebase by replacing types and\nchasing compiler errors from there.\n\nAs an example,\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nlet mut io_buf: Vec<u8> = Vec::new();\nio_buf.extend(&[0x47, 0xA5]);\n\nlet stats: Vec<bool> = vec![\n  true, false, true, true,\n  false, false, true, false,\n];\n# }\n```\n\nwould become\n\n```rust\n# #[cfg(feature = \"alloc\")] {\nuse bitvec::prelude::*;\n\nlet mut io_buf: BitVec<Msb0, u8> = BitVec::new();\nio_buf.resize(16, false);\nio_buf[.. 4].store(4u8);\nio_buf[4 .. 8].store(7u8);\nio_buf[8 .. 16].store(0xA5u8);\n\nlet stats: BitVec = bitvec![\n  1, 0, 1, 1,\n  0, 0, 1, 0,\n];\n# }\n```\n\n## Type Arguments\n\nThe `bitvec` data structures are all generic over two type parameters which\ncontrol how they view and manage the memory they use. These type parameters\nallow users to precisely control the memory layout, value bit-patterns, and\ngenerated instructions, but most users of the library will not need to be\ngeneric over them. Instead, you probably either do not care about the details of\nthe underlying memory, or you have a specific and fixed layout requirement. In\neither case, you will likely select a specific combination of type arguments and\nuse it consistently throughout your project.\n\nYou *can* write your project to be generic over these type arguments, and this\nis certainly useful when writing code that is not coupled directly to memory,\nincreases complexity with little practical gain.\n\nThe default type arguments are chosen for optimal behavior in memory use and\ninstruction selection. The unadorned types [`BitArray`], [`BitSlice`],\n[`BitBox`], and [`BitVec`] can all be used in type-annotation position (`let`\nbindings, `struct` fields, and function arguments). Users who need to specify\ntheir type arguments should prefer to do so in a `type` alias, and use that\nalias throughout their project instead of the much longer fully-qualified\n`bitvec` type names:\n\n```rust\nuse bitvec::prelude::*;\n\npub type MySlice = BitSlice<Msb0, u8>;\npub type MyArray20 = bitarr![for 20, in Msb0, u8];\n# #[cfg(feature = \"alloc\")]\npub type MyVec = BitVec<Msb0, u8>;\n\nfn make_buffer() -> MyVec {\n  MyVec::new()\n}\n```\n\nIn general, you will probably work with [`BitSlice`] borrows and [`BitVec`]\nowned buffers. The [`BitArray`] and [`BitBox`] types are provided for\ncompleteness and have their uses, but the additional constraints and frozen size\nrender them less commonly useful.\n\n## Additional Details\n\nAs a replacement for `bool` sequences, you should be able to replace old type\ndefinition and value construction sites with their corresponding items from this\nproject, and the rest of your project should just work with the new types.\n\nTo use `bitvec` for structural [bitfields] or specialized I/O protocol buffers,\nyou should use [`BitArray`] or [`BitVec`] to manage your data buffers (for\ncompile-time statically-sized and run-time dynamically-sized, respectively), and\nthe [`BitField`] trait to manage transferring values into and out of them.\n\nThe [`BitSlice`] type contains most of the behavior that interacts with the\n*contents* of a memory buffer. [`BitVec`] adds behavior that operates on\nallocations, and specializes [`BitSlice`] behaviors that can take advantage of\nowned buffers.\n\nThe [`domain`] module, whose types are accessed by the `.{bit_,}domain{,_mut}`\nmethods on [`BitSlice`], allows users to split their views of memory at aliasing\nboundaries. This removes synchronization guards where `bitvec` can prove that\ndoing so is legal and correct.\n\nThere are many ways to construct a bit-level view of data. The [`BitArray`],\n[`BitBox`], and [`BitVec`] types all own a buffer of memory and dereference it\nto [`BitSlice`] in order to view it. In addition, you can borrow any piece of\nordinary Rust memory as a `BitSlice` view by using its borrowing constructor\nfunctions or the [`BitView`] trait’s extension methods.\n\n# Capabilities\n\n`bitvec` stands out from other bit-sequence libraries, both in Rust and in other\nlanguages, in a few significant ways.\n\nUnlike other Rust libraries, `bitvec` stores its region information in\nspecially-encoded pointers *to* memory regions, rather than in the region\nitself. By using its own pointer encoding scheme, `bitvec` can use references\n(`&BitSlice<_, _>` and `&mut BitSlice<_, _>`) to manage memory accesses and fit\nseamlessly into the Rust language rules and API signatures.\n\nUnlike *any* other bit-sequence system, `bitvec` enables users to specify both\nthe register element type used to store data and also the ordering of bits\nwithin each register element. This sidesteps the problems found in C\n[bitfields], C++ [`std::bitset`] and [`std::vector<bool>`], Python’s\n[`bitstring`], Erlang’s [`bitstream`], and other Rust libraries such as\n[`bit-vec`].\n\nBy permitting the in-memory layout to be specified by the user, rather than\nhard-coding it within the library, `bitvec` enables users to select the behavior\ncharacteristics they want or need without significant effort on their part.\n\nThis works by supplying two type parameters: an `O` [`BitOrder`] ordering of\nbits within a register element, and a `T` [`BitStore`] register element used for\nstorage and memory description. `T` is restricted to be only the raw unsigned\nintegers, and [`bitvec`-provided wrappers][`BitSafe`] over [atomic] and [`Cell`]\nsynchronization guards, that fit within processor registers on your target.\n\nThese parameters permit the `bitvec` type system to track memory access rules\nand bit addressing, thus enabling a nearly seamless use of [`BitSlice`]s as if\nthey were ordinary Rust slices.\n\n`bitvec` correctly handles memory aliasing by leveraging the type system to mark\nregions that have become subject to shared mutability. This mark can, depending\non your build settings, either forbid moving such slices across threads, or\nissue lock instructions to the memory bus when accessing memory. You will never\nneed to add your own guards to prevent race conditions, and [`BitSlice`]\nprovides interfaces to separate any bit-slice into its aliased and unaliased\nsubslices.\n\nWhere possible, `bitvec` uses its knowledge of bit ordering and memory\navailability to accelerate memory operations from individual bit-by-bit walks to\nbatched operations within a register. This is an area of ongoing development,\nand is an implementation detail rather than an aspect of public API.\n\n`bitvec`’s performance even when working with individual bits is as close to\nideal as a general-purpose library can be, but the width of processor registers\nmeans that no amount of performance improvement at the individual bit level can\ncompete with instructions operating on 32 or 64 bits at once. If you encounter\nperformance bottlenecks, you can escape `bitvec`’s views to operate on the\nmemory directly, or submit an issue for future work on specialized batch\nparallelization.\n\n# Project Structure\n\nYou should generally import the library [prelude], with\n\n```rust\nuse bitvec::prelude::*;\n```\n\nThe prelude contains the basic symbols you will need to make use of the crate:\nthe names of data structures, ordering parameters, useful traits, and\nconstructor macros. Almost all symbols begin with the prefix `Bit`; only the\norderings [`Lsb0`], [`Msb0`], and [`LocalBits`] do not. This will reduce the\nlikelihood of name collisions.\n\nEach major component in the library is divided into its own module. This\nincludes each data structure and trait, as well as utility objects used for\nimplementation. The data structures that mirror the language distribution have\nsubmodules for each part of their mirroring: `api` ports inherent methods,\n`iter` contains iteration logic, `ops` overrides operator sigils, and `traits`\nholds all other trait implementations. The data structure’s own module typically\nonly contains its own definition and its inherent methods that are not ports of\nthe standard libraries.\n\n[atomic]: core::sync::atomic\n[bitfield]: https://en.cppreference.com/w/c/language/bit_field\n[bitfields]: https://en.cppreference.com/w/c/language/bit_field\n[macro]: #macros\n[prelude]: crate::prelude\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSafe`]: crate::access::BitSafe\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell`]: core::cell::Cell\n[`LocalBits`]: crate::order::LocalBits\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n\n[`alloc`]: alloc\n[`bitstream`]: https://erlang.org/doc/programming_examples/bit_syntax.html\n[`bitstring`]: https://pypi.org/project/bitstring/\n[`bit-vec`]: https://crates.io/crates/bit-vec\n[`core`]: core\n[`domain`]: crate::domain\n[`examples/`]: https://github.com/myrrlyn/bitvec/tree/HEAD/examples\n[`std`]: std\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":0,"byte_end":10855,"line_start":1,"line_end":263,"column_start":1,"column_end":4}},{"value":"no_std","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":10891,"byte_end":10897,"line_start":265,"line_end":265,"column_start":35,"column_end":41}},{"value":"warn(missing_docs)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":10930,"byte_end":10948,"line_start":266,"line_end":266,"column_start":31,"column_end":49}},{"value":"deny(unconditional_recursion)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11007,"byte_end":11040,"line_start":268,"line_end":268,"column_start":1,"column_end":34}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"macros","qualname":"::macros","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","parent":null,"children":[{"krate":0,"index":5}],"decl_id":null,"docs":" Constructor macros for the crate’s collection types.\n","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11089,"byte_end":11101,"line_start":273,"line_end":273,"column_start":1,"column_end":13}},{"value":"/ Constructor macros for the crate’s collection types.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11447,"byte_end":11505,"line_start":1,"line_end":1,"column_start":1,"column_end":57}},{"value":"allow(deprecated)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11507,"byte_end":11528,"line_start":3,"line_end":3,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":5},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"internal","qualname":"::macros::internal","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","parent":null,"children":[{"krate":0,"index":6},{"krate":0,"index":9},{"krate":0,"index":18},{"krate":0,"index":19},{"krate":0,"index":20},{"krate":0,"index":23}],"decl_id":null,"docs":" Internal implementation macros for the public exports.","sig":null,"attributes":[{"value":"macro_use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11530,"byte_end":11542,"line_start":5,"line_end":5,"column_start":1,"column_end":13}},{"value":"* Internal implementation macros for the public exports.\n\nThe macros in this module are required to be exported from the crate, as the\npublic macros will call them from client contexts (`macro_rules!` expansion\nbodies are not in source crate scope, as they are token expansion rather than\nsymbolic calls). However, they are not part of the public *API* of the crate,\nand are not intended for use anywhere but in the expansion bodies of the\npublic-API constructor macros.\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":28651,"byte_end":29127,"line_start":1,"line_end":9,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":18},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41052,"byte_end":41067,"line_start":378,"line_end":378,"column_start":14,"column_end":29},"name":"u8_from_le_bits","qualname":"::macros::internal::u8_from_le_bits","value":"pub const fn u8_from_le_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Lsb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Lsb0-order.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":40907,"byte_end":40960,"line_start":375,"line_end":375,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":40961,"byte_end":41001,"line_start":376,"line_end":376,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41002,"byte_end":41038,"line_start":377,"line_end":377,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":19},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41465,"byte_end":41480,"line_start":401,"line_end":401,"column_start":14,"column_end":29},"name":"u8_from_be_bits","qualname":"::macros::internal::u8_from_be_bits","value":"pub const fn u8_from_be_bits(bool, bool, bool, bool, bool, bool, bool, bool)\n-> u8","parent":null,"children":[],"decl_id":null,"docs":" Construct a `u8` from bits applied in Msb0-order.\n","sig":null,"attributes":[{"value":"/ Construct a `u8` from bits applied in Msb0-order.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41320,"byte_end":41373,"line_start":398,"line_end":398,"column_start":1,"column_end":54}},{"value":"allow(clippy :: many_single_char_names)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41374,"byte_end":41414,"line_start":399,"line_end":399,"column_start":1,"column_end":41}},{"value":"allow(clippy :: too_many_arguments)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41415,"byte_end":41451,"line_start":400,"line_end":400,"column_start":1,"column_end":37}}]},{"kind":"Function","id":{"krate":0,"index":23},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":42166,"byte_end":42193,"line_start":434,"line_end":434,"column_start":14,"column_end":41},"name":"__deprecated_order_no_store","qualname":"::macros::internal::__deprecated_order_no_store","value":"pub const fn __deprecated_order_no_store()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41943,"byte_end":41973,"line_start":430,"line_end":430,"column_start":1,"column_end":31}},{"value":"deprecated =\n  \"Ordering-only macro constructors are deprecated. Specify a \\\n                storage type as well, or remove the ordering and use the \\\n                default.\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros/internal.rs","byte_start":41974,"byte_end":42152,"line_start":431,"line_end":433,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":26},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"access","qualname":"::access","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","parent":null,"children":[{"krate":0,"index":27},{"krate":0,"index":28},{"krate":0,"index":29},{"krate":0,"index":32},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":55},{"krate":0,"index":57},{"krate":0,"index":3441},{"krate":0,"index":3443},{"krate":0,"index":3426},{"krate":0,"index":3445},{"krate":0,"index":3447},{"krate":0,"index":3431},{"krate":0,"index":3449},{"krate":0,"index":3451},{"krate":0,"index":3436},{"krate":0,"index":3458},{"krate":0,"index":3460},{"krate":0,"index":3453},{"krate":0,"index":3467},{"krate":0,"index":3469},{"krate":0,"index":3462}],"decl_id":null,"docs":" Memory access guards.","sig":null,"attributes":[{"value":"* Memory access guards.\n\n[`bitvec`] allows a program to produce handles over memory that do not logically\nalias their bits, but may alias in hardware. This module provides a unified\ninterface for memory accesses that can be specialized to handle aliased and\nunaliased access events.\n\nThe [`BitAccess`] trait provides capabilities to access bits in memory elements\nthrough shared references, and its implementations are responsible for\ncoördinating synchronization and contention as needed.\n\nThe [`BitSafe`] trait abstracts over wrappers to the [`Cell`] and [atomic] types\nthat forbid writing through their references, even when other references to the\nsame location may write.\n\n[`BitAccess`]: crate::access::BitAccess\n[`BitSafe`]: crate::access::BitSafe\n[`Cell`]: core::cell::Cell\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":42492,"byte_end":43298,"line_start":1,"line_end":20,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44272,"byte_end":44281,"line_start":54,"line_end":54,"column_start":11,"column_end":20},"name":"BitAccess","qualname":"::access::BitAccess","value":"BitAccess: Radium","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":53}],"decl_id":null,"docs":" Abstracts over the instructions used when accessing a memory location.","sig":null,"attributes":[{"value":"* Abstracts over the instructions used when accessing a memory location.\n\nThis trait provides functions to manipulate bits in a referent memory register\nthrough the appropriate access instructions, so that use sites elsewhere in the\ncrate can select their required behavior without changing their interface.\n\nThis is automatically implemented for all types that permit shared/mutable\nmemory access to memory registers through the [`radium`] crate. Its use is\nconstrained in the [`store`] module.\n\nThis trait is only ever used by [`bitvec`] internals, and is never exposed\noutside the crate. It must be marked as public so that it can be used as an\nassociated item in [`BitStore`], even though it is never made accessible.\n\n[`BitStore`]: crate::store::BitStore\n[`bitvec`]: crate\n[`radium`]: radium\n[`store`]: crate::store\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":43435,"byte_end":44261,"line_start":35,"line_end":53,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":48},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45297,"byte_end":45307,"line_start":81,"line_end":81,"column_start":5,"column_end":15},"name":"clear_bits","qualname":"::access::BitAccess::clear_bits","value":"pub fn clear_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Clears any number of bits in a memory register to `0`.","sig":null,"attributes":[{"value":"/ Clears any number of bits in a memory register to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44335,"byte_end":44393,"line_start":57,"line_end":57,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44395,"byte_end":44398,"line_start":58,"line_end":58,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44400,"byte_end":44474,"line_start":59,"line_end":59,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44476,"byte_end":44551,"line_start":60,"line_end":60,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44553,"byte_end":44615,"line_start":61,"line_end":61,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44617,"byte_end":44620,"line_start":62,"line_end":62,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44622,"byte_end":44638,"line_start":63,"line_end":63,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44640,"byte_end":44643,"line_start":64,"line_end":64,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44645,"byte_end":44658,"line_start":65,"line_end":65,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44660,"byte_end":44733,"line_start":66,"line_end":66,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44735,"byte_end":44809,"line_start":67,"line_end":67,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44811,"byte_end":44828,"line_start":68,"line_end":68,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44830,"byte_end":44833,"line_start":69,"line_end":69,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44835,"byte_end":44848,"line_start":70,"line_end":70,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44850,"byte_end":44853,"line_start":71,"line_end":71,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44855,"byte_end":44931,"line_start":72,"line_end":72,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44933,"byte_end":45006,"line_start":73,"line_end":73,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45008,"byte_end":45038,"line_start":74,"line_end":74,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45040,"byte_end":45043,"line_start":75,"line_end":75,"column_start":2,"column_end":5}},{"value":"/ Do not invert the `mask` prior to calling this function in order to save","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45045,"byte_end":45121,"line_start":76,"line_end":76,"column_start":2,"column_end":78}},{"value":"/ the unselected bits and clear the selected bits. [`BitMask`] is a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45123,"byte_end":45192,"line_start":77,"line_end":77,"column_start":2,"column_end":71}},{"value":"/ selection type, not a bitwise-operation argument.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45194,"byte_end":45247,"line_start":78,"line_end":78,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45249,"byte_end":45252,"line_start":79,"line_end":79,"column_start":2,"column_end":5}},{"value":"/ [`BitMask`]: crate::index::BitMask","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45254,"byte_end":45292,"line_start":80,"line_end":80,"column_start":2,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46115,"byte_end":46123,"line_start":103,"line_end":103,"column_start":5,"column_end":13},"name":"set_bits","qualname":"::access::BitAccess::set_bits","value":"pub fn set_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Sets any number of bits in a memory register to `1`.","sig":null,"attributes":[{"value":"/ Sets any number of bits in a memory register to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45409,"byte_end":45465,"line_start":85,"line_end":85,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45467,"byte_end":45470,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45472,"byte_end":45546,"line_start":87,"line_end":87,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45548,"byte_end":45623,"line_start":88,"line_end":88,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45625,"byte_end":45687,"line_start":89,"line_end":89,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45689,"byte_end":45692,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45694,"byte_end":45710,"line_start":91,"line_end":91,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45712,"byte_end":45715,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45717,"byte_end":45730,"line_start":93,"line_end":93,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45732,"byte_end":45805,"line_start":94,"line_end":94,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45807,"byte_end":45881,"line_start":95,"line_end":95,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45883,"byte_end":45900,"line_start":96,"line_end":96,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45902,"byte_end":45905,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45907,"byte_end":45920,"line_start":98,"line_end":98,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45922,"byte_end":45925,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":45927,"byte_end":46003,"line_start":100,"line_end":100,"column_start":2,"column_end":78}},{"value":"/ cleared. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46005,"byte_end":46078,"line_start":101,"line_end":101,"column_start":2,"column_end":75}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46080,"byte_end":46110,"line_start":102,"line_end":102,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46926,"byte_end":46937,"line_start":125,"line_end":125,"column_start":5,"column_end":16},"name":"invert_bits","qualname":"::access::BitAccess::invert_bits","value":"pub fn invert_bits(&Self, BitMask<Self::Item>)","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Inverts any number of bits in a memory register.","sig":null,"attributes":[{"value":"/ Inverts any number of bits in a memory register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46223,"byte_end":46275,"line_start":107,"line_end":107,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46277,"byte_end":46280,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ The mask provided to this method must be constructed from indices that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46282,"byte_end":46356,"line_start":109,"line_end":109,"column_start":2,"column_end":76}},{"value":"/ are valid in the caller’s context. As the mask is already computed by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46358,"byte_end":46433,"line_start":110,"line_end":110,"column_start":2,"column_end":75}},{"value":"/ the caller, this does not take an ordering type parameter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46435,"byte_end":46497,"line_start":111,"line_end":111,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46499,"byte_end":46502,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46504,"byte_end":46520,"line_start":113,"line_end":113,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46522,"byte_end":46525,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46527,"byte_end":46540,"line_start":115,"line_end":115,"column_start":2,"column_end":15}},{"value":"/ - `mask`: A mask of any number of bits. This is a selection mask: all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46542,"byte_end":46615,"line_start":116,"line_end":116,"column_start":2,"column_end":75}},{"value":"/   bits in the mask that are set to `1` will be modified in the element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46617,"byte_end":46691,"line_start":117,"line_end":117,"column_start":2,"column_end":76}},{"value":"/   at `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46693,"byte_end":46710,"line_start":118,"line_end":118,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46712,"byte_end":46715,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46717,"byte_end":46730,"line_start":120,"line_end":120,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46732,"byte_end":46735,"line_start":121,"line_end":121,"column_start":2,"column_end":5}},{"value":"/ All bits in `*self` that are selected (set to `1` in the `mask`) will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46737,"byte_end":46813,"line_start":122,"line_end":122,"column_start":2,"column_end":78}},{"value":"/ inverted. All bits in `*self` that are not selected (cleared to `0` in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46815,"byte_end":46889,"line_start":123,"line_end":123,"column_start":2,"column_end":76}},{"value":"/ the `mask`) are unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":46891,"byte_end":46921,"line_start":124,"line_end":124,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47539,"byte_end":47548,"line_start":146,"line_end":146,"column_start":5,"column_end":14},"name":"write_bit","qualname":"::access::BitAccess::write_bit","value":"pub fn write_bit<O>(&Self, BitIdx<Self::Item>, bool) where O: BitOrder","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Writes a value to one bit in a memory register.","sig":null,"attributes":[{"value":"/ Writes a value to one bit in a memory register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47038,"byte_end":47089,"line_start":129,"line_end":129,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47091,"byte_end":47094,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47096,"byte_end":47117,"line_start":131,"line_end":131,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47119,"byte_end":47122,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `O`: A bit ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47124,"byte_end":47150,"line_start":133,"line_end":133,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47152,"byte_end":47155,"line_start":134,"line_end":134,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47157,"byte_end":47173,"line_start":135,"line_end":135,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47175,"byte_end":47178,"line_start":136,"line_end":136,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47180,"byte_end":47193,"line_start":137,"line_end":137,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to write.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47195,"byte_end":47260,"line_start":138,"line_end":138,"column_start":2,"column_end":67}},{"value":"/ - `value`: The bit value to write into `*self` at `index`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47262,"byte_end":47324,"line_start":139,"line_end":139,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47326,"byte_end":47329,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47331,"byte_end":47344,"line_start":141,"line_end":141,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47346,"byte_end":47349,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ The memory register at address `self` has the bit corresponding to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47351,"byte_end":47425,"line_start":143,"line_end":143,"column_start":2,"column_end":76}},{"value":"/ `index` cursor under the `O` order written with the new `value`, and all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47427,"byte_end":47503,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ other bits are unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47505,"byte_end":47534,"line_start":145,"line_end":145,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48337,"byte_end":48348,"line_start":177,"line_end":177,"column_start":5,"column_end":16},"name":"get_writers","qualname":"::access::BitAccess::get_writers","value":"pub fn get_writers(bool) -> for<'a>fn(: &'a Self, : BitMask<Self::Item>)","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Gets the function that writes `value` into all bits under a mask.","sig":null,"attributes":[{"value":"/ Gets the function that writes `value` into all bits under a mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47833,"byte_end":47902,"line_start":162,"line_end":162,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47904,"byte_end":47907,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47909,"byte_end":47925,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47927,"byte_end":47930,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ - `value`: The bit that will be directly written by the returned","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":47932,"byte_end":48000,"line_start":166,"line_end":166,"column_start":2,"column_end":70}},{"value":"/   function.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48002,"byte_end":48017,"line_start":167,"line_end":167,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48019,"byte_end":48022,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48024,"byte_end":48037,"line_start":169,"line_end":169,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48039,"byte_end":48042,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ A function which, when applied to a reference and a mask, will write","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48044,"byte_end":48116,"line_start":171,"line_end":171,"column_start":2,"column_end":74}},{"value":"/ `value` into memory. If `value` is `false`, then this produces","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48118,"byte_end":48184,"line_start":172,"line_end":172,"column_start":2,"column_end":68}},{"value":"/ [`clear_bits`]; if it is `true`, then this produces [`set_bits`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48186,"byte_end":48255,"line_start":173,"line_end":173,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48257,"byte_end":48260,"line_start":174,"line_end":174,"column_start":2,"column_end":5}},{"value":"/ [`clear_bits`]: Self::clear_bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48262,"byte_end":48298,"line_start":175,"line_end":175,"column_start":2,"column_end":38}},{"value":"/ [`set_bits`]: Self::set_bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48300,"byte_end":48332,"line_start":176,"line_end":176,"column_start":2,"column_end":34}}]},{"kind":"Trait","id":{"krate":0,"index":57},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48913,"byte_end":48920,"line_start":201,"line_end":201,"column_start":11,"column_end":18},"name":"BitSafe","qualname":"::access::BitSafe","value":"BitSafe","parent":null,"children":[{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61}],"decl_id":null,"docs":" Restricts memory modification to only exclusive references.","sig":null,"attributes":[{"value":"* Restricts memory modification to only exclusive references.\n\nThe shared-mutability types do not permit locking their references to prevent\nwriting through them when inappropriate. Implementors of this trait are able to\nview aliased memory and handle other references writing to it, even though they\nthemselves may be forbidden from doing so.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48553,"byte_end":48902,"line_start":194,"line_end":200,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":58},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49104,"byte_end":49107,"line_start":206,"line_end":206,"column_start":7,"column_end":10},"name":"Mem","qualname":"::access::BitSafe::Mem","value":"type Mem: BitRegister;","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" The register type being guarded against shared mutation.","sig":null,"attributes":[{"value":"/ The register type being guarded against shared mutation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48924,"byte_end":48984,"line_start":202,"line_end":202,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48986,"byte_end":48989,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ This is only present as an extra proof that the type graph all uses the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48991,"byte_end":49066,"line_start":204,"line_end":204,"column_start":2,"column_end":77}},{"value":"/ same underlying integers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49068,"byte_end":49097,"line_start":205,"line_end":205,"column_start":2,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":59},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49341,"byte_end":49344,"line_start":212,"line_end":212,"column_start":7,"column_end":10},"name":"Rad","qualname":"::access::BitSafe::Rad","value":"type Rad: Radium<Item = Self::Mem>;","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" The accessor type being prevented from mutating while shared.","sig":null,"attributes":[{"value":"/ The accessor type being prevented from mutating while shared.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49124,"byte_end":49189,"line_start":208,"line_end":208,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49191,"byte_end":49194,"line_start":209,"line_end":209,"column_start":2,"column_end":5}},{"value":"/ This is exposed as an associated type so that `BitStore` can name it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49196,"byte_end":49268,"line_start":210,"line_end":210,"column_start":2,"column_end":74}},{"value":"/ without having to re-select it based on crate configuration.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49270,"byte_end":49334,"line_start":211,"line_end":211,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49477,"byte_end":49481,"line_start":216,"line_end":216,"column_start":5,"column_end":9},"name":"load","qualname":"::access::BitSafe::load","value":"pub fn load(&Self) -> Self::Mem","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" Reads the value out of memory only if a shared reference to the location\n can be produced.\n","sig":null,"attributes":[{"value":"/ Reads the value out of memory only if a shared reference to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49374,"byte_end":49450,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ can be produced.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49452,"byte_end":49472,"line_start":215,"line_end":215,"column_start":2,"column_end":22}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49609,"byte_end":49614,"line_start":220,"line_end":220,"column_start":5,"column_end":10},"name":"store","qualname":"::access::BitSafe::store","value":"pub fn store(&mut Self, Self::Mem)","parent":{"krate":0,"index":57},"children":[],"decl_id":null,"docs":" Writes a value into memory only if an exclusive reference to the\n location can be produced.\n","sig":null,"attributes":[{"value":"/ Writes a value into memory only if an exclusive reference to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49505,"byte_end":49573,"line_start":218,"line_end":218,"column_start":2,"column_end":70}},{"value":"/ location can be produced.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49575,"byte_end":49604,"line_start":219,"line_end":219,"column_start":2,"column_end":31}}]},{"kind":"Struct","id":{"krate":0,"index":3441},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51149,"byte_end":51158,"line_start":277,"line_end":277,"column_start":8,"column_end":17},"name":"BitSafeU8","qualname":"::access::BitSafeU8","value":"BitSafeU8 {  }","parent":null,"children":[{"krate":0,"index":3442}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3445},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51195,"byte_end":51205,"line_start":278,"line_end":278,"column_start":9,"column_end":19},"name":"BitSafeU16","qualname":"::access::BitSafeU16","value":"BitSafeU16 {  }","parent":null,"children":[{"krate":0,"index":3446}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3449},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51243,"byte_end":51253,"line_start":279,"line_end":279,"column_start":9,"column_end":19},"name":"BitSafeU32","qualname":"::access::BitSafeU32","value":"BitSafeU32 {  }","parent":null,"children":[{"krate":0,"index":3450}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3458},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51335,"byte_end":51345,"line_start":283,"line_end":283,"column_start":14,"column_end":24},"name":"BitSafeU64","qualname":"::access::BitSafeU64","value":"BitSafeU64 {  }","parent":null,"children":[{"krate":0,"index":3459}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Struct","id":{"krate":0,"index":3467},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":51392,"byte_end":51404,"line_start":285,"line_end":285,"column_start":16,"column_end":28},"name":"BitSafeUsize","qualname":"::access::BitSafeUsize","value":"BitSafeUsize {  }","parent":null,"children":[{"krate":0,"index":3468}],"decl_id":null,"docs":" A wrapper over a shared-mutable type that forbids writing to the\n location through its own reference. Other references to the location\n may still write to it, and reads from this reference will be aware\n of this possibility.","sig":null,"attributes":[{"value":"/ A wrapper over a shared-mutable type that forbids writing to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49724,"byte_end":49792,"line_start":225,"line_end":225,"column_start":3,"column_end":71}},{"value":"/ location through its own reference. Other references to the location","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49795,"byte_end":49867,"line_start":226,"line_end":226,"column_start":3,"column_end":75}},{"value":"/ may still write to it, and reads from this reference will be aware","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49870,"byte_end":49940,"line_start":227,"line_end":227,"column_start":3,"column_end":73}},{"value":"/ of this possibility.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49943,"byte_end":49967,"line_start":228,"line_end":228,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49970,"byte_end":49973,"line_start":229,"line_end":229,"column_start":3,"column_end":6}},{"value":"/ This is necessary in order to enforce [`bitvec`]’s memory model,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":49976,"byte_end":50046,"line_start":230,"line_end":230,"column_start":3,"column_end":71}},{"value":"/ which disallows shared mutation to individual bits. [`BitSlice`]s","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50049,"byte_end":50118,"line_start":231,"line_end":231,"column_start":3,"column_end":72}},{"value":"/ may produce memory views that use this type in order to ensure that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50121,"byte_end":50192,"line_start":232,"line_end":232,"column_start":3,"column_end":74}},{"value":"/ handles that lack write permission to an area may not write to it,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50195,"byte_end":50265,"line_start":233,"line_end":233,"column_start":3,"column_end":73}},{"value":"/ even if other handles may.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50268,"byte_end":50298,"line_start":234,"line_end":234,"column_start":3,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50301,"byte_end":50304,"line_start":235,"line_end":235,"column_start":3,"column_end":6}},{"value":"/ Under the `\"atomic\"` feature, this uses [`radium`]’s best-effort","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50307,"byte_end":50377,"line_start":236,"line_end":236,"column_start":3,"column_end":71}},{"value":"/ atomic alias; when this feature is disabled, then it uses a [`Cell`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50380,"byte_end":50452,"line_start":237,"line_end":237,"column_start":3,"column_end":75}},{"value":"/ directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50455,"byte_end":50468,"line_start":238,"line_end":238,"column_start":3,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50471,"byte_end":50474,"line_start":239,"line_end":239,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50477,"byte_end":50517,"line_start":240,"line_end":240,"column_start":3,"column_end":43}},{"value":"/ [`Cell`]: core::cell::Cell","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50520,"byte_end":50550,"line_start":241,"line_end":241,"column_start":3,"column_end":33}},{"value":"/ [`radium`]: radium::types","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50553,"byte_end":50582,"line_start":242,"line_end":242,"column_start":3,"column_end":32}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":50604,"byte_end":50624,"line_start":244,"line_end":244,"column_start":3,"column_end":23}}]},{"kind":"Mod","id":{"krate":0,"index":63},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"array","qualname":"::array","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","parent":null,"children":[{"krate":0,"index":64},{"krate":0,"index":65},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":70},{"krate":0,"index":72},{"krate":0,"index":75},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":82},{"krate":0,"index":85},{"krate":0,"index":88},{"krate":0,"index":94},{"krate":0,"index":108},{"krate":0,"index":186},{"krate":0,"index":295},{"krate":0,"index":507}],"decl_id":null,"docs":" A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.","sig":null,"attributes":[{"value":"* A statically-allocated, fixed-size, buffer containing a [`BitSlice`] region.\n\nYou can read the language’s [array fundamental documentation][std] here.\n\nThis module defines the [`BitArray`] immediate type, and its associated support\ncode.\n\n[`BitArray`] is equivalent to `[bool; N]`, in its operation and in its\nrelationship to the [`BitSlice`] type. It has little behavior or properties in\nits own right, and serves solely as a type capable of being used in immediate\nvalue position, and delegates to `BitSlice` for all actual work.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n[std]: https://doc.rust-lang.org/stable/std/primitive.array.html\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":53539,"byte_end":54220,"line_start":1,"line_end":16,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":88},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57908,"byte_end":57916,"line_start":149,"line_end":149,"column_start":12,"column_end":20},"name":"BitArray","qualname":"::array::BitArray","value":"BitArray {  }","parent":null,"children":[{"krate":0,"index":92},{"krate":0,"index":93}],"decl_id":null,"docs":" An array of individual bits, able to be held by value on the stack.","sig":null,"attributes":[{"value":"* An array of individual bits, able to be held by value on the stack.\n\nThis type is generic over all [`Sized`] implementors of the [`BitView`] trait.\nDue to limitations in the Rust language’s const-generics implementation (it is\nboth unstable and incomplete), this must take an array type parameter directly,\nrather than register type and bit-count integer parameters. This makes it less\nconvenient to use than C++’s [`std::bitset<N>`] array type. The [`bitarr!`]\nmacro is capable of constructing both values and specific types of `BitArray`,\nand this macro should be preferred for most use.\n\nThe advantage of using this wrapper is that it implements [`Deref`]/[`Mut`] to\n[`BitSlice`], as well as implementing all of `BitSlice`s traits by forwarding to\nthe `BitSlice` view of its contained data. This allows it to have `BitSlice`\nbehavior by itself, without requiring explicit [`.as_bitslice()`] calls in user\ncode.\n\n# Limitations\n\nThis does not track start or end indices of its [`BitSlice`] view, and so that\nview will always fully span the buffer. You cannot produce, for example, an\narray of twelve bits.\n\n# Type Parameters\n\n- `O`: The ordering of bits within memory registers.\n- `V`: Some buffer which can be used as the basis for a [`BitSlice`] view. This\n  will usually be an array of `[T: BitRegister; N]`.\n\n# Examples\n\nThis type is useful for marking that some value is always to be used as a\n[`BitSlice`].\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":55053,"byte_end":56478,"line_start":63,"line_end":95,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56479,"byte_end":56482,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56483,"byte_end":56494,"line_start":97,"line_end":97,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56495,"byte_end":56522,"line_start":98,"line_end":98,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56523,"byte_end":56526,"line_start":99,"line_end":99,"column_start":1,"column_end":4}},{"value":"/ struct HasBitfields {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56527,"byte_end":56552,"line_start":100,"line_end":100,"column_start":1,"column_end":26}},{"value":"/   header: u32,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56553,"byte_end":56571,"line_start":101,"line_end":101,"column_start":1,"column_end":19}},{"value":"/   // creates a type declaration.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56572,"byte_end":56608,"line_start":102,"line_end":102,"column_start":1,"column_end":37}},{"value":"/   fields: bitarr!(for 20, in Msb0, u8),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56609,"byte_end":56652,"line_start":103,"line_end":103,"column_start":1,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56653,"byte_end":56658,"line_start":104,"line_end":104,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56659,"byte_end":56662,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ impl HasBitfields {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56663,"byte_end":56686,"line_start":106,"line_end":106,"column_start":1,"column_end":24}},{"value":"/   pub fn new() -> Self {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56687,"byte_end":56715,"line_start":107,"line_end":107,"column_start":1,"column_end":29}},{"value":"/     Self {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56716,"byte_end":56730,"line_start":108,"line_end":108,"column_start":1,"column_end":15}},{"value":"/       header: 0,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56731,"byte_end":56751,"line_start":109,"line_end":109,"column_start":1,"column_end":21}},{"value":"/       // creates a value object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56752,"byte_end":56788,"line_start":110,"line_end":110,"column_start":1,"column_end":37}},{"value":"/       // the type paramaters must be repeated.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56789,"byte_end":56839,"line_start":111,"line_end":111,"column_start":1,"column_end":51}},{"value":"/       fields: bitarr![Msb0, u8; 0; 20],","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56840,"byte_end":56883,"line_start":112,"line_end":112,"column_start":1,"column_end":44}},{"value":"/     }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56884,"byte_end":56893,"line_start":113,"line_end":113,"column_start":1,"column_end":10}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56894,"byte_end":56901,"line_start":114,"line_end":114,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56902,"byte_end":56905,"line_start":115,"line_end":115,"column_start":1,"column_end":4}},{"value":"/   /// Access a bit region directly","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56906,"byte_end":56944,"line_start":116,"line_end":116,"column_start":1,"column_end":39}},{"value":"/   pub fn get_subfield(&self) -> &BitSlice<Msb0, u8> {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":56945,"byte_end":57002,"line_start":117,"line_end":117,"column_start":1,"column_end":58}},{"value":"/     &self.fields[.. 4]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57003,"byte_end":57029,"line_start":118,"line_end":118,"column_start":1,"column_end":27}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57030,"byte_end":57037,"line_start":119,"line_end":119,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57038,"byte_end":57041,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/   /// Read a 12-bit value out of a region","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57042,"byte_end":57087,"line_start":121,"line_end":121,"column_start":1,"column_end":46}},{"value":"/   pub fn read_value(&self) -> u16 {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57088,"byte_end":57127,"line_start":122,"line_end":122,"column_start":1,"column_end":40}},{"value":"/     self.fields[4 .. 16].load()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57128,"byte_end":57163,"line_start":123,"line_end":123,"column_start":1,"column_end":36}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57164,"byte_end":57171,"line_start":124,"line_end":124,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57172,"byte_end":57175,"line_start":125,"line_end":125,"column_start":1,"column_end":4}},{"value":"/   /// Write a 12-bit value into a region","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57176,"byte_end":57220,"line_start":126,"line_end":126,"column_start":1,"column_end":45}},{"value":"/   pub fn set_value(&mut self, value: u16) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57221,"byte_end":57268,"line_start":127,"line_end":127,"column_start":1,"column_end":48}},{"value":"/     self.fields[4 .. 16].store(value);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57269,"byte_end":57311,"line_start":128,"line_end":128,"column_start":1,"column_end":43}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57312,"byte_end":57319,"line_start":129,"line_end":129,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57320,"byte_end":57325,"line_start":130,"line_end":130,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57326,"byte_end":57333,"line_start":131,"line_end":131,"column_start":1,"column_end":8}},{"value":"*\n# Eventual Obsolescence\n\nWhen const-generics stabilize, this will be modified to have a signature more\nlike `BitArray<O, T, const N: usize>([T; elts::<T>(N)]);`, to mirror the\nbehavior of ordinary arrays `[T; N]` as they stand today.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n[`Deref`]: core::ops::Deref\n[`Mut`]: core::ops::DerefMut\n[`Sized`]: core::marker::Sized\n[`bitarr!`]: macro@crate::bitarr\n[`std::bitset<N>`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`.as_bitslice()`]: Self::as_bitslice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57334,"byte_end":57875,"line_start":132,"line_end":147,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":57876,"byte_end":57896,"line_start":148,"line_end":148,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58248,"byte_end":58254,"line_start":167,"line_end":167,"column_start":9,"column_end":15},"name":"zeroed","qualname":"<BitArray<O, V>>::zeroed","value":"pub fn zeroed() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `BitArray` with its memory set to zero.\n","sig":null,"attributes":[{"value":"/ Constructs a new `BitArray` with its memory set to zero.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58168,"byte_end":58228,"line_start":165,"line_end":165,"column_start":2,"column_end":62}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58230,"byte_end":58239,"line_start":166,"line_end":166,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58616,"byte_end":58619,"line_start":186,"line_end":186,"column_start":9,"column_end":12},"name":"new","qualname":"<BitArray<O, V>>::new","value":"pub fn new(V) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a buffer in a `BitArray`.","sig":null,"attributes":[{"value":"/ Wraps a buffer in a `BitArray`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58364,"byte_end":58399,"line_start":174,"line_end":174,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58401,"byte_end":58404,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58406,"byte_end":58420,"line_start":176,"line_end":176,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58422,"byte_end":58425,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58427,"byte_end":58438,"line_start":178,"line_end":178,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58440,"byte_end":58467,"line_start":179,"line_end":179,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58469,"byte_end":58472,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 2];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58474,"byte_end":58498,"line_start":181,"line_end":181,"column_start":2,"column_end":26}},{"value":"/ let bits: BitArray<Msb0, _> = BitArray::new(data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58500,"byte_end":58554,"line_start":182,"line_end":182,"column_start":2,"column_end":56}},{"value":"/ assert_eq!(bits.len(), 16);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58556,"byte_end":58587,"line_start":183,"line_end":183,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58589,"byte_end":58596,"line_start":184,"line_end":184,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58598,"byte_end":58607,"line_start":185,"line_end":185,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58988,"byte_end":58993,"line_start":205,"line_end":205,"column_start":9,"column_end":14},"name":"value","qualname":"<BitArray<O, V>>::value","value":"pub fn value(Self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Removes the `BitArray` wrapper, leaving the contained buffer.","sig":null,"attributes":[{"value":"/ Removes the `BitArray` wrapper, leaving the contained buffer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58688,"byte_end":58753,"line_start":193,"line_end":193,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58755,"byte_end":58758,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58760,"byte_end":58774,"line_start":195,"line_end":195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58776,"byte_end":58779,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58781,"byte_end":58792,"line_start":197,"line_end":197,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58794,"byte_end":58821,"line_start":198,"line_end":198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58823,"byte_end":58826,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ let bitarr = bitarr![Lsb0, usize; 0; 30];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58828,"byte_end":58873,"line_start":200,"line_end":200,"column_start":2,"column_end":47}},{"value":"/ let native: [usize; 1] = bitarr.value();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58875,"byte_end":58919,"line_start":201,"line_end":201,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58921,"byte_end":58928,"line_start":202,"line_end":202,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58930,"byte_end":58947,"line_start":203,"line_end":203,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58949,"byte_end":58979,"line_start":204,"line_end":204,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59169,"byte_end":59180,"line_start":214,"line_end":214,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<BitArray<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59024,"byte_end":59062,"line_start":209,"line_end":209,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59064,"byte_end":59067,"line_start":210,"line_end":210,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59069,"byte_end":59109,"line_start":211,"line_end":211,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59111,"byte_end":59128,"line_start":212,"line_end":212,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59130,"byte_end":59160,"line_start":213,"line_end":213,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59403,"byte_end":59418,"line_start":223,"line_end":223,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<BitArray<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views the array as a mutable [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59250,"byte_end":59296,"line_start":218,"line_end":218,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59298,"byte_end":59301,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59303,"byte_end":59343,"line_start":220,"line_end":220,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59345,"byte_end":59362,"line_start":221,"line_end":221,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59364,"byte_end":59394,"line_start":222,"line_end":222,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":102},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59586,"byte_end":59598,"line_start":229,"line_end":229,"column_start":9,"column_end":21},"name":"as_raw_slice","qualname":"<BitArray<O, V>>::as_raw_slice","value":"pub fn as_raw_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a slice of its underlying memory registers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59500,"byte_end":59566,"line_start":227,"line_end":227,"column_start":2,"column_end":68}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59568,"byte_end":59577,"line_start":228,"line_end":228,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59836,"byte_end":59852,"line_start":240,"line_end":240,"column_start":9,"column_end":25},"name":"as_mut_raw_slice","qualname":"<BitArray<O, V>>::as_mut_raw_slice","value":"pub fn as_mut_raw_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":" Views the array as a mutable slice of its underlying memory registers.\n","sig":null,"attributes":[{"value":"/ Views the array as a mutable slice of its underlying memory registers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59742,"byte_end":59816,"line_start":238,"line_end":238,"column_start":2,"column_end":76}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":59818,"byte_end":59827,"line_start":239,"line_end":239,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60135,"byte_end":60143,"line_start":253,"line_end":253,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitArray<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &[V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60024,"byte_end":60041,"line_start":250,"line_end":250,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60043,"byte_end":60073,"line_start":251,"line_end":251,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_raw_slice`\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60075,"byte_end":60126,"line_start":252,"line_end":252,"column_start":2,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60326,"byte_end":60338,"line_start":261,"line_end":261,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<BitArray<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut [V::Store]","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60211,"byte_end":60228,"line_start":258,"line_end":258,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60230,"byte_end":60260,"line_start":259,"line_end":259,"column_start":2,"column_end":32}},{"value":"deprecated = \"This is renamed to `as_mut_raw_slice`\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60262,"byte_end":60317,"line_start":260,"line_end":260,"column_start":2,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60492,"byte_end":60501,"line_start":268,"line_end":268,"column_start":9,"column_end":18},"name":"as_buffer","qualname":"<BitArray<O, V>>::as_buffer","value":"pub fn as_buffer(&Self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Views the interior buffer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60402,"byte_end":60432,"line_start":265,"line_end":265,"column_start":2,"column_end":32}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60434,"byte_end":60451,"line_start":266,"line_end":266,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60453,"byte_end":60483,"line_start":267,"line_end":267,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":107},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60633,"byte_end":60646,"line_start":275,"line_end":275,"column_start":9,"column_end":22},"name":"as_mut_buffer","qualname":"<BitArray<O, V>>::as_mut_buffer","value":"pub fn as_mut_buffer(&mut Self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Mutably views the interior buffer.\n","sig":null,"attributes":[{"value":"/ Mutably views the interior buffer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60535,"byte_end":60573,"line_start":272,"line_end":272,"column_start":2,"column_end":40}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60575,"byte_end":60592,"line_start":273,"line_end":273,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":60594,"byte_end":60624,"line_start":274,"line_end":274,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3471},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61481,"byte_end":61489,"line_start":41,"line_end":41,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::array::iter::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":3474},{"krate":0,"index":3475}],"decl_id":null,"docs":" A by-value [bit-array] iterator.","sig":null,"attributes":[{"value":"* A by-value [bit-array] iterator.\n\n# Original\n\n[`array::IntoIter`](core::array::IntoIter)\n\n# API Differences\n\nThe standard-library iterator is still unstable, as it depends on\nconst-generics. The [`BitView`] trait provides a rough simulacrum of\nconst-generic arrays until this feature stabilizes for use outside the standard\nlibraries.\n\n[bit-array]: crate::array::BitArray\n[`BitView`]: crate::view::BitView\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61039,"byte_end":61452,"line_start":24,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":152},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62257,"byte_end":62268,"line_start":81,"line_end":81,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<IntoIter<O, V>>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns an immutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns an immutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62076,"byte_end":62150,"line_start":75,"line_end":75,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62152,"byte_end":62155,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62157,"byte_end":62171,"line_start":77,"line_end":77,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62173,"byte_end":62176,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_slice`](core::array::IntoIter::as_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62178,"byte_end":62237,"line_start":79,"line_end":79,"column_start":2,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62239,"byte_end":62248,"line_start":80,"line_end":80,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":153},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62521,"byte_end":62529,"line_start":89,"line_end":89,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<IntoIter<O, V>>::as_slice","value":"pub fn as_slice(&Self) -> &BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62397,"byte_end":62414,"line_start":86,"line_end":86,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62416,"byte_end":62446,"line_start":87,"line_end":87,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62448,"byte_end":62512,"line_start":88,"line_end":88,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":154},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62777,"byte_end":62792,"line_start":99,"line_end":99,"column_start":9,"column_end":24},"name":"as_mut_bitslice","qualname":"<IntoIter<O, V>>::as_mut_bitslice","value":"pub fn as_mut_bitslice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable slice of all bits that have not been yielded yet.","sig":null,"attributes":[{"value":"/ Returns a mutable slice of all bits that have not been yielded yet.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62591,"byte_end":62662,"line_start":93,"line_end":93,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62664,"byte_end":62667,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62669,"byte_end":62683,"line_start":95,"line_end":95,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62685,"byte_end":62688,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ [`IntoIter::as_mut_slice`](core::array::IntoIter::as_mut_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62690,"byte_end":62757,"line_start":97,"line_end":97,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62759,"byte_end":62768,"line_start":98,"line_end":98,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":155},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63080,"byte_end":63092,"line_start":111,"line_end":111,"column_start":9,"column_end":21},"name":"as_mut_slice","qualname":"<IntoIter<O, V>>::as_mut_slice","value":"pub fn as_mut_slice(&mut Self) -> &mut BitSlice<O, V::Store>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62952,"byte_end":62969,"line_start":108,"line_end":108,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":62971,"byte_end":63001,"line_start":109,"line_end":109,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63003,"byte_end":63071,"line_start":110,"line_end":110,"column_start":2,"column_end":70}}]},{"kind":"Struct","id":{"krate":0,"index":3480},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75172,"byte_end":75192,"line_start":404,"line_end":404,"column_start":12,"column_end":32},"name":"TryFromBitSliceError","qualname":"::array::traits::TryFromBitSliceError","value":"TryFromBitSliceError {  }","parent":null,"children":[{"krate":0,"index":3484}],"decl_id":null,"docs":" The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.","sig":null,"attributes":[{"value":"* The error type returned when a conversion from a [`BitSlice`] to a\n[`BitArray`] fails.\n\n[`BitArray`]: crate::array::BitArray\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74915,"byte_end":75084,"line_start":396,"line_end":401,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75085,"byte_end":75105,"line_start":402,"line_end":402,"column_start":1,"column_end":21}}]},{"kind":"Mod","id":{"krate":0,"index":544},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"domain","qualname":"::domain","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","parent":null,"children":[{"krate":0,"index":545},{"krate":0,"index":546},{"krate":0,"index":547},{"krate":0,"index":550},{"krate":0,"index":553},{"krate":0,"index":556},{"krate":0,"index":559},{"krate":0,"index":562},{"krate":0,"index":565},{"krate":0,"index":566},{"krate":0,"index":567},{"krate":0,"index":570},{"krate":0,"index":573},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":579},{"krate":0,"index":582},{"krate":0,"index":585},{"krate":0,"index":588},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":595},{"krate":0,"index":598},{"krate":0,"index":3536},{"krate":0,"index":3548},{"krate":0,"index":3523},{"krate":0,"index":3566},{"krate":0,"index":3578},{"krate":0,"index":3553},{"krate":0,"index":602},{"krate":0,"index":606},{"krate":0,"index":3596},{"krate":0,"index":3607},{"krate":0,"index":3583},{"krate":0,"index":3624},{"krate":0,"index":3635},{"krate":0,"index":3611},{"krate":0,"index":610},{"krate":0,"index":613},{"krate":0,"index":621},{"krate":0,"index":628},{"krate":0,"index":631},{"krate":0,"index":633},{"krate":0,"index":3639},{"krate":0,"index":3642},{"krate":0,"index":3645},{"krate":0,"index":3648}],"decl_id":null,"docs":" Representations of the [`BitSlice`] region memory model.","sig":null,"attributes":[{"value":"* Representations of the [`BitSlice`] region memory model.\n\nThis module allows any [`BitSlice`] region to be decomposed into domains that\nrestricts [`T::Alias`] markers to only the edge elements that may require them.\n\nSpecifically, any given [`BitSlice`] region is one of:\n\n- touches only interior indices of one element\n- touches at least one edge index of any number of elements (including zero)\n\nIn the latter case, any elements *completely* spanned by the [`BitSlice`] handle\nare known to not have any other write-capable handles to them, and in the case\nof an `&mut BitSlice` handle specifically, no other views at all. As such, the\ndomain view of this memory is able to remove the aliasing marker type and permit\ndirect memory access to the underlying buffer for the duration of its existence.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`T::Alias`]: crate::store::BitStore::Alias\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":79073,"byte_end":79961,"line_start":1,"line_end":19,"column_start":1,"column_end":4}}]},{"kind":"Enum","id":{"krate":0,"index":3536},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89168,"byte_end":89177,"line_start":355,"line_end":355,"column_start":13,"column_end":22},"name":"BitDomain","qualname":"::domain::BitDomain","value":"pub enum BitDomain<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a BitSlice<O, T>,\n        body: &'a BitSlice<O, T::Unalias>,\n        tail: &'a BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3540},{"krate":0,"index":3544}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80337,"byte_end":80398,"line_start":54,"line_end":54,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80401,"byte_end":80418,"line_start":55,"line_end":55,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80421,"byte_end":80424,"line_start":56,"line_end":56,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80427,"byte_end":80496,"line_start":57,"line_end":57,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80499,"byte_end":80565,"line_start":58,"line_end":58,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80568,"byte_end":80639,"line_start":59,"line_end":59,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80642,"byte_end":80711,"line_start":60,"line_end":60,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80714,"byte_end":80785,"line_start":61,"line_end":61,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80788,"byte_end":80856,"line_start":62,"line_end":62,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80859,"byte_end":80905,"line_start":63,"line_end":63,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80908,"byte_end":80911,"line_start":64,"line_end":64,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80914,"byte_end":80986,"line_start":65,"line_end":65,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80989,"byte_end":81052,"line_start":66,"line_end":66,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81055,"byte_end":81109,"line_start":67,"line_end":67,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81112,"byte_end":81115,"line_start":68,"line_end":68,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81118,"byte_end":81185,"line_start":69,"line_end":69,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81188,"byte_end":81260,"line_start":70,"line_end":70,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81263,"byte_end":81315,"line_start":71,"line_end":71,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81318,"byte_end":81321,"line_start":72,"line_end":72,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81324,"byte_end":81396,"line_start":73,"line_end":73,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81399,"byte_end":81467,"line_start":74,"line_end":74,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81470,"byte_end":81480,"line_start":75,"line_end":75,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81483,"byte_end":81486,"line_start":76,"line_end":76,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81489,"byte_end":81504,"line_start":77,"line_end":77,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81507,"byte_end":81510,"line_start":78,"line_end":78,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81513,"byte_end":81569,"line_start":79,"line_end":79,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81572,"byte_end":81575,"line_start":80,"line_end":80,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81578,"byte_end":81599,"line_start":81,"line_end":81,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81602,"byte_end":81605,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81608,"byte_end":81671,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81674,"byte_end":81737,"line_start":84,"line_end":84,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81740,"byte_end":81777,"line_start":85,"line_end":85,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81780,"byte_end":81783,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81786,"byte_end":81810,"line_start":87,"line_end":87,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81813,"byte_end":81816,"line_start":88,"line_end":88,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81819,"byte_end":81889,"line_start":89,"line_end":89,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81892,"byte_end":81960,"line_start":90,"line_end":90,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81963,"byte_end":81987,"line_start":91,"line_end":91,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81990,"byte_end":81993,"line_start":92,"line_end":92,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81996,"byte_end":82036,"line_start":93,"line_end":93,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82039,"byte_end":82076,"line_start":94,"line_end":94,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82079,"byte_end":82122,"line_start":95,"line_end":95,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":3566},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89192,"byte_end":89204,"line_start":356,"line_end":356,"column_start":13,"column_end":25},"name":"BitDomainMut","qualname":"::domain::BitDomainMut","value":"pub enum BitDomainMut<'a, O, T> where O: BitOrder, T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        body: &'a mut BitSlice<O, T>,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: &'a mut BitSlice<O, T>,\n        body: &'a mut BitSlice<O, T::Unalias>,\n        tail: &'a mut BitSlice<O, T>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3570},{"krate":0,"index":3574}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80337,"byte_end":80398,"line_start":54,"line_end":54,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80401,"byte_end":80418,"line_start":55,"line_end":55,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80421,"byte_end":80424,"line_start":56,"line_end":56,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80427,"byte_end":80496,"line_start":57,"line_end":57,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80499,"byte_end":80565,"line_start":58,"line_end":58,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80568,"byte_end":80639,"line_start":59,"line_end":59,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80642,"byte_end":80711,"line_start":60,"line_end":60,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80714,"byte_end":80785,"line_start":61,"line_end":61,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80788,"byte_end":80856,"line_start":62,"line_end":62,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80859,"byte_end":80905,"line_start":63,"line_end":63,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80908,"byte_end":80911,"line_start":64,"line_end":64,"column_start":3,"column_end":6}},{"value":"/ This enum acts like the `.split*` methods in that it only subdivides","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80914,"byte_end":80986,"line_start":65,"line_end":65,"column_start":3,"column_end":75}},{"value":"/ the source [`BitSlice`] into smaller `BitSlice`s, and makes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":80989,"byte_end":81052,"line_start":66,"line_end":66,"column_start":3,"column_end":66}},{"value":"/ appropriate modifications to the aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81055,"byte_end":81109,"line_start":67,"line_end":67,"column_start":3,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81112,"byte_end":81115,"line_start":68,"line_end":68,"column_start":3,"column_end":6}},{"value":"/ It does not add any aliasing markers: if the slice is marked as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81118,"byte_end":81185,"line_start":69,"line_end":69,"column_start":3,"column_end":70}},{"value":"/ aliased, then the edge partitions will retain that marker, and if it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81188,"byte_end":81260,"line_start":70,"line_end":70,"column_start":3,"column_end":75}},{"value":"/ is not, then the edge partitions do not need it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81263,"byte_end":81315,"line_start":71,"line_end":71,"column_start":3,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81318,"byte_end":81321,"line_start":72,"line_end":72,"column_start":3,"column_end":6}},{"value":"/ This does not provide references to the underlying memory buffer. If","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81324,"byte_end":81396,"line_start":73,"line_end":73,"column_start":3,"column_end":75}},{"value":"/ you need such direct access, use the [`Domain`] or [`DomainMut`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81399,"byte_end":81467,"line_start":74,"line_end":74,"column_start":3,"column_end":71}},{"value":"/ enums.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81470,"byte_end":81480,"line_start":75,"line_end":75,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81483,"byte_end":81486,"line_start":76,"line_end":76,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81489,"byte_end":81504,"line_start":77,"line_end":77,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81507,"byte_end":81510,"line_start":78,"line_end":78,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81513,"byte_end":81569,"line_start":79,"line_end":79,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81572,"byte_end":81575,"line_start":80,"line_end":80,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81578,"byte_end":81599,"line_start":81,"line_end":81,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81602,"byte_end":81605,"line_start":82,"line_end":82,"column_start":3,"column_end":6}},{"value":"/ - `O`: The ordering type of the source [`BitSlice`] handle.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81608,"byte_end":81671,"line_start":83,"line_end":83,"column_start":3,"column_end":66}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81674,"byte_end":81737,"line_start":84,"line_end":84,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81740,"byte_end":81777,"line_start":85,"line_end":85,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81780,"byte_end":81783,"line_start":86,"line_end":86,"column_start":3,"column_end":6}},{"value":"/ # Aliasing Awareness","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81786,"byte_end":81810,"line_start":87,"line_end":87,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81813,"byte_end":81816,"line_start":88,"line_end":88,"column_start":3,"column_end":6}},{"value":"/ This enum does not grant access to memory outside the scope of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81819,"byte_end":81889,"line_start":89,"line_end":89,"column_start":3,"column_end":73}},{"value":"/ original [`BitSlice`] handle, and so does not need to modfiy any","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81892,"byte_end":81960,"line_start":90,"line_end":90,"column_start":3,"column_end":71}},{"value":"/ aliasing conditions.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81963,"byte_end":81987,"line_start":91,"line_end":91,"column_start":3,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81990,"byte_end":81993,"line_start":92,"line_end":92,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":81996,"byte_end":82036,"line_start":93,"line_end":93,"column_start":3,"column_end":43}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82039,"byte_end":82076,"line_start":94,"line_end":94,"column_start":3,"column_end":40}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":82079,"byte_end":82122,"line_start":95,"line_end":95,"column_start":3,"column_end":46}}]},{"kind":"Enum","id":{"krate":0,"index":3596},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97329,"byte_end":97335,"line_start":634,"line_end":634,"column_start":9,"column_end":15},"name":"Domain","qualname":"::domain::Domain","value":"pub enum Domain<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T)>,\n        body: &'a [T::Unalias],\n        tail: Option<(&'a T, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3599},{"krate":0,"index":3603}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89519,"byte_end":89580,"line_start":378,"line_end":378,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89583,"byte_end":89600,"line_start":379,"line_end":379,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89603,"byte_end":89606,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89609,"byte_end":89678,"line_start":381,"line_end":381,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89681,"byte_end":89747,"line_start":382,"line_end":382,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89750,"byte_end":89821,"line_start":383,"line_end":383,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89824,"byte_end":89893,"line_start":384,"line_end":384,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89896,"byte_end":89967,"line_start":385,"line_end":385,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89970,"byte_end":90038,"line_start":386,"line_end":386,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90041,"byte_end":90087,"line_start":387,"line_end":387,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90090,"byte_end":90093,"line_start":388,"line_end":388,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90096,"byte_end":90160,"line_start":389,"line_end":389,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90163,"byte_end":90234,"line_start":390,"line_end":390,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90237,"byte_end":90308,"line_start":391,"line_end":391,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90311,"byte_end":90377,"line_start":392,"line_end":392,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90380,"byte_end":90441,"line_start":393,"line_end":393,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90444,"byte_end":90447,"line_start":394,"line_end":394,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90450,"byte_end":90465,"line_start":395,"line_end":395,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90468,"byte_end":90471,"line_start":396,"line_end":396,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90474,"byte_end":90530,"line_start":397,"line_end":397,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90533,"byte_end":90536,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90539,"byte_end":90560,"line_start":399,"line_end":399,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90563,"byte_end":90566,"line_start":400,"line_end":400,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90569,"byte_end":90632,"line_start":401,"line_end":401,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90635,"byte_end":90672,"line_start":402,"line_end":402,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90675,"byte_end":90678,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90681,"byte_end":90697,"line_start":404,"line_end":404,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90700,"byte_end":90703,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90706,"byte_end":90775,"line_start":406,"line_end":406,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90778,"byte_end":90849,"line_start":407,"line_end":407,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90852,"byte_end":90923,"line_start":408,"line_end":408,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90926,"byte_end":90998,"line_start":409,"line_end":409,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91001,"byte_end":91063,"line_start":410,"line_end":410,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91066,"byte_end":91137,"line_start":411,"line_end":411,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91140,"byte_end":91150,"line_start":412,"line_end":412,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91153,"byte_end":91156,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91159,"byte_end":91226,"line_start":414,"line_end":414,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91229,"byte_end":91293,"line_start":415,"line_end":415,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91296,"byte_end":91363,"line_start":416,"line_end":416,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91366,"byte_end":91438,"line_start":417,"line_end":417,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91441,"byte_end":91511,"line_start":418,"line_end":418,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91514,"byte_end":91517,"line_start":419,"line_end":419,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91520,"byte_end":91563,"line_start":420,"line_end":420,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91566,"byte_end":91615,"line_start":421,"line_end":421,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91618,"byte_end":91658,"line_start":422,"line_end":422,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91661,"byte_end":91710,"line_start":423,"line_end":423,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91713,"byte_end":91760,"line_start":424,"line_end":424,"column_start":3,"column_end":50}}]},{"kind":"Enum","id":{"krate":0,"index":3624},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97346,"byte_end":97355,"line_start":635,"line_end":635,"column_start":9,"column_end":18},"name":"DomainMut","qualname":"::domain::DomainMut","value":"pub enum DomainMut<'a, T> where T: BitStore {\n    Enclave {\n        head: BitIdx<T::Mem>,\n        elem: &'a T::Access,\n        tail: BitTail<T::Mem>,\n    },\n    Region {\n        head: Option<(BitIdx<T::Mem>, &'a T::Access)>,\n        body: &'a mut [T::Unalias],\n        tail: Option<(&'a T::Access, BitTail<T::Mem>)>,\n    },\n}","parent":null,"children":[{"krate":0,"index":3627},{"krate":0,"index":3631}],"decl_id":null,"docs":" Granular representation of the memory region containing a\n [`BitSlice`].","sig":null,"attributes":[{"value":"/ Granular representation of the memory region containing a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89519,"byte_end":89580,"line_start":378,"line_end":378,"column_start":3,"column_end":64}},{"value":"/ [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89583,"byte_end":89600,"line_start":379,"line_end":379,"column_start":3,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89603,"byte_end":89606,"line_start":380,"line_end":380,"column_start":3,"column_end":6}},{"value":"/ [`BitSlice`] regions can be described in terms of edge and center","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89609,"byte_end":89678,"line_start":381,"line_end":381,"column_start":3,"column_end":72}},{"value":"/ partitions, where the edge partitions must retain the aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89681,"byte_end":89747,"line_start":382,"line_end":382,"column_start":3,"column_end":69}},{"value":"/ status of the source `BitSlice` handle, and the center partition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89750,"byte_end":89821,"line_start":383,"line_end":383,"column_start":3,"column_end":74}},{"value":"/ known to be completely unaliased by any other view. This property","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89824,"byte_end":89893,"line_start":384,"line_end":384,"column_start":3,"column_end":72}},{"value":"/ allows any `BitSlice` handle to be decomposed into smaller regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89896,"byte_end":89967,"line_start":385,"line_end":385,"column_start":3,"column_end":74}},{"value":"/ and safely remove any aliasing markers from the center partition","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89970,"byte_end":90038,"line_start":386,"line_end":386,"column_start":3,"column_end":71}},{"value":"/ that no longer requires such safeguarding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90041,"byte_end":90087,"line_start":387,"line_end":387,"column_start":3,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90090,"byte_end":90093,"line_start":388,"line_end":388,"column_start":3,"column_end":6}},{"value":"/ This enum splits the underlying element slice `[T]` into the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90096,"byte_end":90160,"line_start":389,"line_end":389,"column_start":3,"column_end":67}},{"value":"/ maybe-aliased edge elements and known-unaliased center elements. If","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90163,"byte_end":90234,"line_start":390,"line_end":390,"column_start":3,"column_end":74}},{"value":"/ you do not need to work with the memory elements directly, and only","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90237,"byte_end":90308,"line_start":391,"line_end":391,"column_start":3,"column_end":74}},{"value":"/ need to firmly specify the access behavior of the [`BitSlice`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90311,"byte_end":90377,"line_start":392,"line_end":392,"column_start":3,"column_end":69}},{"value":"/ handle, use the [`BitDomain`] and [`BitDomainMut`] enums.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90380,"byte_end":90441,"line_start":393,"line_end":393,"column_start":3,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90444,"byte_end":90447,"line_start":394,"line_end":394,"column_start":3,"column_end":6}},{"value":"/ # Lifetimes","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90450,"byte_end":90465,"line_start":395,"line_end":395,"column_start":3,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90468,"byte_end":90471,"line_start":396,"line_end":396,"column_start":3,"column_end":6}},{"value":"/ - `'a`: The lifetime of the referent storage region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90474,"byte_end":90530,"line_start":397,"line_end":397,"column_start":3,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90533,"byte_end":90536,"line_start":398,"line_end":398,"column_start":3,"column_end":6}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90539,"byte_end":90560,"line_start":399,"line_end":399,"column_start":3,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90563,"byte_end":90566,"line_start":400,"line_end":400,"column_start":3,"column_end":6}},{"value":"/ - `T`: The register type of the source [`BitSlice`] handle,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90569,"byte_end":90632,"line_start":401,"line_end":401,"column_start":3,"column_end":66}},{"value":"/   including any aliasing markers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90635,"byte_end":90672,"line_start":402,"line_end":402,"column_start":3,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90675,"byte_end":90678,"line_start":403,"line_end":403,"column_start":3,"column_end":6}},{"value":"/ # Mutability","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90681,"byte_end":90697,"line_start":404,"line_end":404,"column_start":3,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90700,"byte_end":90703,"line_start":405,"line_end":405,"column_start":3,"column_end":6}},{"value":"/ The immutable view produces [`T::Alias`] references, which permit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90706,"byte_end":90775,"line_start":406,"line_end":406,"column_start":3,"column_end":72}},{"value":"/ foreign writes to the referent location but disallow writes through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90778,"byte_end":90849,"line_start":407,"line_end":407,"column_start":3,"column_end":74}},{"value":"/ itself. The mutable view produces [`T::Access`] references, because","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90852,"byte_end":90923,"line_start":408,"line_end":408,"column_start":3,"column_end":74}},{"value":"/ `&mut _` references can only ever be produced when no other aliasing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":90926,"byte_end":90998,"line_start":409,"line_end":409,"column_start":3,"column_end":75}},{"value":"/ handle exists. The write permissions must be weakened from","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91001,"byte_end":91063,"line_start":410,"line_end":410,"column_start":3,"column_end":65}},{"value":"/ `&mut T::Alias` to `&T::Access` in order to satisfy the Rust memory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91066,"byte_end":91137,"line_start":411,"line_end":411,"column_start":3,"column_end":74}},{"value":"/ rules.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91140,"byte_end":91150,"line_start":412,"line_end":412,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91153,"byte_end":91156,"line_start":413,"line_end":413,"column_start":3,"column_end":6}},{"value":"/ The edge references do not forbid modifying bits outside of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91159,"byte_end":91226,"line_start":414,"line_end":414,"column_start":3,"column_end":70}},{"value":"/ source [`BitSlice`] domain, and writes out of bounds will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91229,"byte_end":91293,"line_start":415,"line_end":415,"column_start":3,"column_end":67}},{"value":"/ correctly handled by any other handles capable of viewing those","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91296,"byte_end":91363,"line_start":416,"line_end":416,"column_start":3,"column_end":70}},{"value":"/ elements. Doing so is still *incorrect*, though defined, and you are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91366,"byte_end":91438,"line_start":417,"line_end":417,"column_start":3,"column_end":75}},{"value":"/ responsible for writing only within bounds when using `DomainMut`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91441,"byte_end":91511,"line_start":418,"line_end":418,"column_start":3,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91514,"byte_end":91517,"line_start":419,"line_end":419,"column_start":3,"column_end":6}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91520,"byte_end":91563,"line_start":420,"line_end":420,"column_start":3,"column_end":46}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91566,"byte_end":91615,"line_start":421,"line_end":421,"column_start":3,"column_end":52}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91618,"byte_end":91658,"line_start":422,"line_end":422,"column_start":3,"column_end":43}},{"value":"/ [`T::Access`]: crate::store::BitStore::Access","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91661,"byte_end":91710,"line_start":423,"line_end":423,"column_start":3,"column_end":52}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":91713,"byte_end":91760,"line_start":424,"line_end":424,"column_start":3,"column_end":50}}]},{"kind":"Mod","id":{"krate":0,"index":636},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"field","qualname":"::field","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","parent":null,"children":[{"krate":0,"index":637},{"krate":0,"index":638},{"krate":0,"index":641},{"krate":0,"index":644},{"krate":0,"index":645},{"krate":0,"index":648},{"krate":0,"index":651},{"krate":0,"index":654},{"krate":0,"index":657},{"krate":0,"index":658},{"krate":0,"index":661},{"krate":0,"index":662},{"krate":0,"index":664},{"krate":0,"index":665},{"krate":0,"index":667},{"krate":0,"index":670},{"krate":0,"index":673},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":680},{"krate":0,"index":683},{"krate":0,"index":686},{"krate":0,"index":699},{"krate":0,"index":709},{"krate":0,"index":719},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":737},{"krate":0,"index":742},{"krate":0,"index":745}],"decl_id":null,"docs":" Batched load/store access to bitfields.","sig":null,"attributes":[{"value":"* Batched load/store access to bitfields.\n\nThis module provides load/store access to bitfield regions that emulates the\nordinary memory bus. This functionality enables any [`BitSlice`] span to be used\nas a memory region, and provides the basis of a library-level analogue to the\nbitfield language feature found in C and C++. Additionally, orderings that have\ncontiguous positions can transfer more than one bit in an operation, allowing a\nperformance acceleration over sequential bit-by-bit traversal.\n\nThe [`BitField`] trait is open for implementation. Rust’s implementation rules\ncurrently disallow a crate to implement a foreign trait on a foreign type, even\nwhen parameterized over a local type. If you need such a `BitField`\nimplementation with a new `BitOrder` type, please file an issue.\n\n# Batched Behavior\n\nThe first purpose of [`BitField`] is to provide access to [`BitSlice`] regions\nas if they were an ordinary memory location. However, this can be done through\nthe `BitSlice` sequential API. The second purpose of this trait is to accelerate\nsuch access by using the parallel memory bus to transfer more than one bit at a\ntime when the region permits it. As such, implementors should provide a transfer\nbehavior based on shift/mask operations wherever possible, for as wide a span in\na memory element as possible.\n\n# Register Bit Order Preservation\n\nAs a default assumption, each element of the underlying memory region used to\nstore part of a value should not reörder the bit-pattern of that value. While\nthe [`BitOrder`] argument is used to determine which segments of the memory\nregister are live for the purposes of this transfer, it should not be used to\nmap each individual bit of the transferred value to a corresponding bit of the\nstorage element. As an example, the [`Lsb0`] and [`Msb0`] implementations both\nstore the value `12u8` in memory as a four-bit span with its two\nmore-significant bits set and its two less-significant bits cleared; the\ndifference is only in *which* bits of an element are used to store the span.\n\n# Endianness\n\nThe `_le` and `_be` methods of [`BitField`] refer to the order in which\nsuccessive `T` elements of a storage region are assigned numeric significance\nduring a transfer. Within any particular `T` element, the ordering of its memory\nis not governed by the `BitField` trait.\n\nThe provided [`BitOrder`] implementors [`Lsb0`] and [`Msb0`] use the local\nmachine’s byte ordering, and do not reörder bytes during transfer.\n\n## `_le` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_le`]\nbreaks `M` into chunks from the least significant edge. The least significant\nchunk is placed in the lowest-addressed element `T`, then the next more\nsignificant chunk is placed in the successive address, until the most\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_le`]\nuses the same chunking behavior: the lowest-addressed `T` contains the least\nsignificant chunk of the returned `M`, then each successive address contains a\nmore significant chunk, until the highest address contains the most significant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b11010_011;\n//              STUVW XYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b011_00000, 0b000_11010],\n//   XYZ               STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_le(val);\nassert_eq!(\n  store,\n  [0b00000_011, 0b11010_000],\n//         XYZ    STUVW\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the lower three bits of `val` were placed into the element at the\nlower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which* three\nbits in the element were considered to be indexed by `5 .. 8`, but [`store_le`]\nalways placed the least three bits of `val`, *in ordinary register order*, into\nelement `[0]`. Similarly, the higher five bits of `val` were placed into element\n`[1]`; `Lsb0` and `Msb0` selected *which* five bits in the element were indexed\nby `8 .. 13`, and the bits retained their register order.\n\n## `_be` Methods\n\nWhen storing a value `M` into a sequence of memory elements `T`, [`store_be`]\nbreaks `M` into chunks from the most significant edge. The most significant\nchunk is placed in the lowest-addressed element `T`, then the next less\nsignificant chunk is placed in the successive address, until the least\nsignificant chunk of the value `M` is placed in the highest address of a\nlocation `T`.\n\nWhen loading a value `M` out of a sequence of memory elements `T`, [`load_be`]\nuses the same chunking behavior: the lowest-addressed `T` contains the most\nsignificant chunk of the returned `M`, then each successive address contains a\nless significant chunk, until the highest address contains the least\nsignificant.\n\nThe [`BitOrder`] implementation governs *where* in each `T` location a fragment\nof `M` is stored.\n\nLet us store 8 bits into memory, over an element boundary, using both [`Lsb0`]\nand [`Msb0`] orderings:\n\n```rust\nuse bitvec::prelude::*;\n\nlet val: u8 = 0b110_10011;\n//              STU VWXYZ\nlet mut store = [0u8; 2];\n\nstore.view_bits_mut::<Lsb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b110_00000, 0b000_10011],\n//   STU              VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\nstore = [0u8; 2];\n\nstore.view_bits_mut::<Msb0>()\n  [5 .. 13]\n  .store_be(val);\nassert_eq!(\n  store,\n  [0b00000_110, 0b10011_000],\n//         STU    VWXYZ\n# \"[{:08b}, {:08b}]\",\n# store[0],\n# store[1],\n);\n```\n\nIn both cases, the higher three bits of `val` were placed into the element at\nthe lower memory address. The choice of [`Lsb0`] vs [`Msb0`] changed *which*\nthree bits in the element were considered to be indexed by `5 .. 8`, but\n[`store_be`] always placed the greatest three bits of `val`, *in ordinary*\n*register order*, into element `[0]`. Similarly, the lower five bits of `val`\nwere placed into element `[1]`; `Lsb0` and `Msb0` selected *which* five bits in\nthe element were indexed by `8 .. 13`, and the bits retained their register\norder.\n\n# `M` and `T` Relationships\n\n`BitField` permits any type of (unsigned) integer `M` to be stored into or\nloaded from a bit-slice region with any storage type `T`. While the examples\nused `u8` for both, for brevity of writing out values, `BitField` will still\noperate correctly for any other combination of types.\n\n`Bitfield` implementations use the processor’s own concept of integer registers\nto operate. As such, the byte-wise memory access patterns for types wider than\n`u8` depends on your processor’s byte-endianness, as well as which `BitField`\nmethod and which `BitOrder` implementation you are using.\n\n`BitField` only operates within processor registers; traffic of `T` elements\nbetween the memory bank and the processor register is controlled entirely by the\nprocessor.\n\nIf you do not want to introduce the processor’s byte-endianness as a variable\nthat affects the in-memory representation of stored integers, stick to\n`BitSlice<_, u8>` as the bit-field driver. `BitSlice<Msb0, u8>` will fill memory\nin a way that matches a debugger or other memory inspections.\n\n[`BitField`]: crate::field::BitField\n[`BitOrder`]: crate::order::BitOrder\n[`BitSlice`]: crate::slice::BitSlice\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`load_be`]: crate::field::BitField::load_be\n[`load_le`]: crate::field::BitField::load_le\n[`store_be`]: crate::field::BitField::store_be\n[`store_le`]: crate::field::BitField::store_le\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":99828,"byte_end":107698,"line_start":1,"line_end":201,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":686},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110025,"byte_end":110033,"line_start":282,"line_end":282,"column_start":11,"column_end":19},"name":"BitField","qualname":"::field::BitField","value":"BitField","parent":null,"children":[{"krate":0,"index":687},{"krate":0,"index":689},{"krate":0,"index":691},{"krate":0,"index":693},{"krate":0,"index":695},{"krate":0,"index":697}],"decl_id":null,"docs":" Performs C-style bitfield access through a [`BitSlice`].","sig":null,"attributes":[{"value":"* Performs C-style bitfield access through a [`BitSlice`].\n\nThis trait transfers data between a [`BitSlice`] region and a local integer. The\ntrait functions always place the live bits of the value against the least\nsignificant bit edge of the local integer (the return value of the load methods,\nand the argument value of the store methods).\n\nMethods should be called as `bits[start .. end].load_or_store()`, where the\nrange subslice selects no more than the [`M::BITS`] element width.\n\n# Target-Specific Behavior\n\nWhen you are using this trait to manage memory that never leaves your machine,\nyou can use the [`load`] and [`store`] methods. However, if you are using this\ntrait to operate on a de/serialization buffer, where the exact bit pattern in\nmemory is important to your work and/or you need to be aware of the processor\nbyte endianness, you must not use these methods.\n\nInstead, use [`load_le`], [`load_be`], [`store_le`], or[`store_be`] directly.\n\nThe un-suffixed methods choose their implementation based on the target\nprocessor byte endianness; the suffixed methods have a consistent and fixed\nbehavior.\n\n# Element- and Bit- Ordering Combinations\n\nThe `_le` and `_be` method suffices refer to the significance of successive\nelements `T` in memory, while the `BitOrder` trait refers to the order that bits\nwithin a single element `T` are traversed. The `BitField` methods and the\n`BitOrder` implementors are ***not*** related.\n\nWhen a load or store operation is contained in only one memory element, then the\n`_le` and `_be` methods have the same behavior. They differ when the operation\nmust touch more than one element.\n\nThe module documentation contains a more detailed explanation, and examples, for\nthis behavior.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`M::BITS`]: crate::mem::BitMemory::BITS\n[`load`]: Self::load\n[`load_be`]: Self::load_be\n[`load_le`]: Self::load_le\n[`store`]: Self::store\n[`store_be`]: Self::store_be\n[`store_le`]: Self::store_le\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":108044,"byte_end":110014,"line_start":235,"line_end":281,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":687},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111454,"byte_end":111458,"line_start":322,"line_end":322,"column_start":5,"column_end":9},"name":"load","qualname":"::field::BitField::load","value":"pub fn load<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Loads the bits in the `self` region into a local value.","sig":null,"attributes":[{"value":"/ Loads the bits in the `self` region into a local value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110037,"byte_end":110096,"line_start":283,"line_end":283,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110098,"byte_end":110101,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This can load into any of the unsigned integers which implement","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110103,"byte_end":110170,"line_start":285,"line_end":285,"column_start":2,"column_end":69}},{"value":"/ [`BitMemory`]. Any further transformation must be done by the user.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110172,"byte_end":110243,"line_start":286,"line_end":286,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110245,"byte_end":110248,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110250,"byte_end":110280,"line_start":288,"line_end":288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110282,"byte_end":110285,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110287,"byte_end":110348,"line_start":290,"line_end":290,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110350,"byte_end":110353,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`load_le`] on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110355,"byte_end":110423,"line_start":292,"line_end":292,"column_start":2,"column_end":70}},{"value":"/ little-endian byte-ordered CPUs, and [`load_be`] on big-endian","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110425,"byte_end":110491,"line_start":293,"line_end":293,"column_start":2,"column_end":68}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110493,"byte_end":110515,"line_start":294,"line_end":294,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110517,"byte_end":110520,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ If you are using this function from a region that crosses multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110522,"byte_end":110592,"line_start":296,"line_end":296,"column_start":2,"column_end":72}},{"value":"/ elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110594,"byte_end":110661,"line_start":297,"line_end":297,"column_start":2,"column_end":69}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110663,"byte_end":110717,"line_start":298,"line_end":298,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110719,"byte_end":110722,"line_start":299,"line_end":299,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110724,"byte_end":110740,"line_start":300,"line_end":300,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110742,"byte_end":110745,"line_start":301,"line_end":301,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110747,"byte_end":110821,"line_start":302,"line_end":302,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110823,"byte_end":110899,"line_start":303,"line_end":303,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110901,"byte_end":110977,"line_start":304,"line_end":304,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110979,"byte_end":110991,"line_start":305,"line_end":305,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110993,"byte_end":110996,"line_start":306,"line_end":306,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":110998,"byte_end":111011,"line_start":307,"line_end":307,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111013,"byte_end":111016,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111018,"byte_end":111093,"line_start":309,"line_end":309,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111095,"byte_end":111118,"line_start":310,"line_end":310,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111120,"byte_end":111123,"line_start":311,"line_end":311,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111125,"byte_end":111137,"line_start":312,"line_end":312,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111139,"byte_end":111142,"line_start":313,"line_end":313,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111144,"byte_end":111218,"line_start":314,"line_end":314,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111220,"byte_end":111243,"line_start":315,"line_end":315,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111245,"byte_end":111248,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111250,"byte_end":111290,"line_start":317,"line_end":317,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111292,"byte_end":111336,"line_start":318,"line_end":318,"column_start":2,"column_end":46}},{"value":"/ [`load_be`]: Self::load_be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111338,"byte_end":111368,"line_start":319,"line_end":319,"column_start":2,"column_end":32}},{"value":"/ [`load_le`]: Self::load_le","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111370,"byte_end":111400,"line_start":320,"line_end":320,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111402,"byte_end":111449,"line_start":321,"line_end":321,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":689},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113180,"byte_end":113185,"line_start":372,"line_end":372,"column_start":5,"column_end":10},"name":"store","qualname":"::field::BitField::store","value":"pub fn store<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Stores a sequence of bits from the user into the domain of `self`.","sig":null,"attributes":[{"value":"/ Stores a sequence of bits from the user into the domain of `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111629,"byte_end":111699,"line_start":331,"line_end":331,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111701,"byte_end":111704,"line_start":332,"line_end":332,"column_start":2,"column_end":5}},{"value":"/ This can store any of the unsigned integers which implement","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111706,"byte_end":111769,"line_start":333,"line_end":333,"column_start":2,"column_end":65}},{"value":"/ [`BitMemory`]. Any other types must first be transformed by the user.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111771,"byte_end":111844,"line_start":334,"line_end":334,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111846,"byte_end":111849,"line_start":335,"line_end":335,"column_start":2,"column_end":5}},{"value":"/ # Target-Specific Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111851,"byte_end":111881,"line_start":336,"line_end":336,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111883,"byte_end":111886,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ **THIS FUNCTION CHANGES BEHAVIOR FOR DIFFERENT TARGETS.**","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111888,"byte_end":111949,"line_start":338,"line_end":338,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111951,"byte_end":111954,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function calls [`store_le`] on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":111956,"byte_end":112025,"line_start":340,"line_end":340,"column_start":2,"column_end":71}},{"value":"/ little-endian byte-ordered CPUs, and [`store_be`] on big-endian","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112027,"byte_end":112094,"line_start":341,"line_end":341,"column_start":2,"column_end":69}},{"value":"/ byte-ordered CPUs.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112096,"byte_end":112118,"line_start":342,"line_end":342,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112120,"byte_end":112123,"line_start":343,"line_end":343,"column_start":2,"column_end":5}},{"value":"/ If you are using this function to store into a region that crosses","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112125,"byte_end":112195,"line_start":344,"line_end":344,"column_start":2,"column_end":72}},{"value":"/ multiple elements in memory, be aware that it will behave differently on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112197,"byte_end":112273,"line_start":345,"line_end":345,"column_start":2,"column_end":78}},{"value":"/ big-endian and little-endian target architectures.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112275,"byte_end":112329,"line_start":346,"line_end":346,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112331,"byte_end":112334,"line_start":347,"line_end":347,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112336,"byte_end":112352,"line_start":348,"line_end":348,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112354,"byte_end":112357,"line_start":349,"line_end":349,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112359,"byte_end":112435,"line_start":350,"line_end":350,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112437,"byte_end":112511,"line_start":351,"line_end":351,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112513,"byte_end":112587,"line_start":352,"line_end":352,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112589,"byte_end":112608,"line_start":353,"line_end":353,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112610,"byte_end":112685,"line_start":354,"line_end":354,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112687,"byte_end":112712,"line_start":355,"line_end":355,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112714,"byte_end":112717,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112719,"byte_end":112733,"line_start":357,"line_end":357,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112735,"byte_end":112738,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112740,"byte_end":112813,"line_start":359,"line_end":359,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112815,"byte_end":112840,"line_start":360,"line_end":360,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112842,"byte_end":112845,"line_start":361,"line_end":361,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112847,"byte_end":112859,"line_start":362,"line_end":362,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112861,"byte_end":112864,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112866,"byte_end":112940,"line_start":364,"line_end":364,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112942,"byte_end":112965,"line_start":365,"line_end":365,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112967,"byte_end":112970,"line_start":366,"line_end":366,"column_start":2,"column_end":5}},{"value":"/ [`BitMemory`]: crate::mem::BitMemory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":112972,"byte_end":113012,"line_start":367,"line_end":367,"column_start":2,"column_end":42}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113014,"byte_end":113058,"line_start":368,"line_end":368,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113060,"byte_end":113107,"line_start":369,"line_end":369,"column_start":2,"column_end":49}},{"value":"/ [`store_be`]: Self::store_be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113109,"byte_end":113141,"line_start":370,"line_end":370,"column_start":2,"column_end":34}},{"value":"/ [`store_le`]: Self::store_le","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113143,"byte_end":113175,"line_start":371,"line_end":371,"column_start":2,"column_end":34}}]},{"kind":"Method","id":{"krate":0,"index":691},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115938,"byte_end":115945,"line_start":461,"line_end":461,"column_start":5,"column_end":12},"name":"load_le","qualname":"::field::BitField::load_le","value":"pub fn load_le<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Loads from `self`, using little-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using little-endian element `T` ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113353,"byte_end":113417,"line_start":381,"line_end":381,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113419,"byte_end":113422,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113424,"byte_end":113494,"line_start":383,"line_end":383,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113496,"byte_end":113569,"line_start":384,"line_end":384,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113571,"byte_end":113646,"line_start":385,"line_end":385,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113648,"byte_end":113710,"line_start":386,"line_end":386,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113712,"byte_end":113715,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113717,"byte_end":113733,"line_start":388,"line_end":388,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113735,"byte_end":113738,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113740,"byte_end":113814,"line_start":390,"line_end":390,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113816,"byte_end":113892,"line_start":391,"line_end":391,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113894,"byte_end":113970,"line_start":392,"line_end":392,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113972,"byte_end":113984,"line_start":393,"line_end":393,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113986,"byte_end":113989,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":113991,"byte_end":114004,"line_start":395,"line_end":395,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114006,"byte_end":114009,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114011,"byte_end":114086,"line_start":397,"line_end":397,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114088,"byte_end":114159,"line_start":398,"line_end":398,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114161,"byte_end":114234,"line_start":399,"line_end":399,"column_start":2,"column_end":75}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114236,"byte_end":114312,"line_start":400,"line_end":400,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114314,"byte_end":114358,"line_start":401,"line_end":401,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114360,"byte_end":114363,"line_start":402,"line_end":402,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114365,"byte_end":114377,"line_start":403,"line_end":403,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114379,"byte_end":114382,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114384,"byte_end":114458,"line_start":405,"line_end":405,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114460,"byte_end":114483,"line_start":406,"line_end":406,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114485,"byte_end":114488,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114490,"byte_end":114504,"line_start":408,"line_end":408,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114506,"byte_end":114509,"line_start":409,"line_end":409,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114511,"byte_end":114582,"line_start":410,"line_end":410,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114584,"byte_end":114597,"line_start":411,"line_end":411,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114599,"byte_end":114602,"line_start":412,"line_end":412,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114604,"byte_end":114615,"line_start":413,"line_end":413,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114617,"byte_end":114644,"line_start":414,"line_end":414,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114646,"byte_end":114649,"line_start":415,"line_end":415,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114651,"byte_end":114679,"line_start":416,"line_end":416,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114681,"byte_end":114713,"line_start":417,"line_end":417,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114715,"byte_end":114730,"line_start":418,"line_end":418,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114732,"byte_end":114775,"line_start":419,"line_end":419,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114777,"byte_end":114815,"line_start":420,"line_end":420,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114817,"byte_end":114820,"line_start":421,"line_end":421,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114822,"byte_end":114844,"line_start":422,"line_end":422,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1011_1000, 0b1_0000000","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114846,"byte_end":114889,"line_start":423,"line_end":423,"column_start":2,"column_end":45}},{"value":"/ //        XYZ    PQRS TUVW    O","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114891,"byte_end":114926,"line_start":424,"line_end":424,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114928,"byte_end":114935,"line_start":425,"line_end":425,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114937,"byte_end":114940,"line_start":426,"line_end":426,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114942,"byte_end":114980,"line_start":427,"line_end":427,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114982,"byte_end":114997,"line_start":428,"line_end":428,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":114999,"byte_end":115023,"line_start":429,"line_end":429,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115025,"byte_end":115040,"line_start":430,"line_end":430,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115042,"byte_end":115052,"line_start":431,"line_end":431,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115054,"byte_end":115083,"line_start":432,"line_end":432,"column_start":2,"column_end":31}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115085,"byte_end":115113,"line_start":433,"line_end":433,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115115,"byte_end":115121,"line_start":434,"line_end":434,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115123,"byte_end":115130,"line_start":435,"line_end":435,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115132,"byte_end":115135,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115137,"byte_end":115206,"line_start":437,"line_end":437,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementors:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115208,"byte_end":115246,"line_start":438,"line_end":438,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115248,"byte_end":115251,"line_start":439,"line_end":439,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115253,"byte_end":115264,"line_start":440,"line_end":440,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115266,"byte_end":115293,"line_start":441,"line_end":441,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115295,"byte_end":115298,"line_start":442,"line_end":442,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115300,"byte_end":115363,"line_start":443,"line_end":443,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115365,"byte_end":115439,"line_start":444,"line_end":444,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115441,"byte_end":115508,"line_start":445,"line_end":445,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115510,"byte_end":115569,"line_start":446,"line_end":446,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       16  19","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115571,"byte_end":115619,"line_start":447,"line_end":447,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115621,"byte_end":115624,"line_start":448,"line_end":448,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115626,"byte_end":115641,"line_start":449,"line_end":449,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115643,"byte_end":115699,"line_start":450,"line_end":450,"column_start":2,"column_end":58}},{"value":"/   0b111001,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115701,"byte_end":115716,"line_start":451,"line_end":451,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115718,"byte_end":115724,"line_start":452,"line_end":452,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115726,"byte_end":115741,"line_start":453,"line_end":453,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_le::<u8>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115743,"byte_end":115799,"line_start":454,"line_end":454,"column_start":2,"column_end":58}},{"value":"/   0b000111,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115801,"byte_end":115816,"line_start":455,"line_end":455,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115818,"byte_end":115824,"line_start":456,"line_end":456,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115826,"byte_end":115833,"line_start":457,"line_end":457,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115835,"byte_end":115838,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115840,"byte_end":115884,"line_start":459,"line_end":459,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115886,"byte_end":115933,"line_start":460,"line_end":460,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":693},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118594,"byte_end":118601,"line_start":545,"line_end":545,"column_start":5,"column_end":12},"name":"load_be","qualname":"::field::BitField::load_be","value":"pub fn load_be<M>(&Self) -> M where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Loads from `self`, using big-endian element `T` ordering.","sig":null,"attributes":[{"value":"/ Loads from `self`, using big-endian element `T` ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":115984,"byte_end":116045,"line_start":464,"line_end":464,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116047,"byte_end":116050,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116052,"byte_end":116121,"line_start":466,"line_end":466,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116123,"byte_end":116197,"line_start":467,"line_end":467,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116199,"byte_end":116274,"line_start":468,"line_end":468,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116276,"byte_end":116338,"line_start":469,"line_end":469,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116340,"byte_end":116343,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116345,"byte_end":116361,"line_start":471,"line_end":471,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116363,"byte_end":116366,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ - `&self`: A read reference to some bits in memory. This slice must be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116368,"byte_end":116442,"line_start":473,"line_end":473,"column_start":2,"column_end":76}},{"value":"/   trimmed to have a width no more than the [`M::BITS`] width of the type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116444,"byte_end":116520,"line_start":474,"line_end":474,"column_start":2,"column_end":78}},{"value":"/   being loaded. This can be accomplished with range indexing on a larger","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116522,"byte_end":116598,"line_start":475,"line_end":475,"column_start":2,"column_end":78}},{"value":"/   slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116600,"byte_end":116612,"line_start":476,"line_end":476,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116614,"byte_end":116617,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116619,"byte_end":116632,"line_start":478,"line_end":478,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116634,"byte_end":116637,"line_start":479,"line_end":479,"column_start":2,"column_end":5}},{"value":"/ A value `M` whose least [`self.len()`] significant bits are filled with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116639,"byte_end":116714,"line_start":480,"line_end":480,"column_start":2,"column_end":77}},{"value":"/ the bits of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116716,"byte_end":116787,"line_start":481,"line_end":481,"column_start":2,"column_end":73}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116789,"byte_end":116861,"line_start":482,"line_end":482,"column_start":2,"column_end":74}},{"value":"/ bits of the return value `M`, and the highest-address `T` is interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116863,"byte_end":116939,"line_start":483,"line_end":483,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116941,"byte_end":116986,"line_start":484,"line_end":484,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116988,"byte_end":116991,"line_start":485,"line_end":485,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":116993,"byte_end":117005,"line_start":486,"line_end":486,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117007,"byte_end":117010,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117012,"byte_end":117086,"line_start":488,"line_end":488,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117088,"byte_end":117111,"line_start":489,"line_end":489,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117113,"byte_end":117116,"line_start":490,"line_end":490,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117118,"byte_end":117132,"line_start":491,"line_end":491,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117134,"byte_end":117137,"line_start":492,"line_end":492,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117139,"byte_end":117210,"line_start":493,"line_end":493,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117212,"byte_end":117225,"line_start":494,"line_end":494,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117227,"byte_end":117230,"line_start":495,"line_end":495,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117232,"byte_end":117243,"line_start":496,"line_end":496,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117245,"byte_end":117272,"line_start":497,"line_end":497,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117274,"byte_end":117277,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117279,"byte_end":117307,"line_start":499,"line_end":499,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Msb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117309,"byte_end":117341,"line_start":500,"line_end":500,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117343,"byte_end":117358,"line_start":501,"line_end":501,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117360,"byte_end":117403,"line_start":502,"line_end":502,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117405,"byte_end":117443,"line_start":503,"line_end":503,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117445,"byte_end":117448,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117450,"byte_end":117472,"line_start":505,"line_end":505,"column_start":2,"column_end":24}},{"value":"/   0b00000_110, 0b1000_1011, 0b1_0000000","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117474,"byte_end":117517,"line_start":506,"line_end":506,"column_start":2,"column_end":45}},{"value":"/ //        OPQ    RSTU VWXY    Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117519,"byte_end":117554,"line_start":507,"line_end":507,"column_start":2,"column_end":37}},{"value":"/ ]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117556,"byte_end":117563,"line_start":508,"line_end":508,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117565,"byte_end":117568,"line_start":509,"line_end":509,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Msb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117570,"byte_end":117608,"line_start":510,"line_end":510,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117610,"byte_end":117625,"line_start":511,"line_end":511,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117627,"byte_end":117651,"line_start":512,"line_end":512,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117653,"byte_end":117668,"line_start":513,"line_end":513,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117670,"byte_end":117680,"line_start":514,"line_end":514,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117682,"byte_end":117711,"line_start":515,"line_end":515,"column_start":2,"column_end":31}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117713,"byte_end":117741,"line_start":516,"line_end":516,"column_start":2,"column_end":30}},{"value":"/ # \"{:012b}\",","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117743,"byte_end":117759,"line_start":517,"line_end":517,"column_start":2,"column_end":18}},{"value":"/ # val,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117761,"byte_end":117771,"line_start":518,"line_end":518,"column_start":2,"column_end":12}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117773,"byte_end":117779,"line_start":519,"line_end":519,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117781,"byte_end":117788,"line_start":520,"line_end":520,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117790,"byte_end":117793,"line_start":521,"line_end":521,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region will be read by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117795,"byte_end":117864,"line_start":522,"line_end":522,"column_start":2,"column_end":71}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117866,"byte_end":117907,"line_start":523,"line_end":523,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117909,"byte_end":117912,"line_start":524,"line_end":524,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117914,"byte_end":117925,"line_start":525,"line_end":525,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117927,"byte_end":117954,"line_start":526,"line_end":526,"column_start":2,"column_end":29}},{"value":"/ // Bit pos:   14                                     19  16","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":117956,"byte_end":118019,"line_start":527,"line_end":527,"column_start":2,"column_end":65}},{"value":"/ // Lsb0:     ─┤                                       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118021,"byte_end":118095,"line_start":528,"line_end":528,"column_start":2,"column_end":64}},{"value":"/ let arr = [0b0100_0000_0000_0011u16, 0b0001_0000_0000_1110u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118097,"byte_end":118164,"line_start":529,"line_end":529,"column_start":2,"column_end":69}},{"value":"/ // Msb0:                      ├─       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118166,"byte_end":118225,"line_start":530,"line_end":530,"column_start":2,"column_end":49}},{"value":"/ // Bit pos:                  14       15  19","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118227,"byte_end":118275,"line_start":531,"line_end":531,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118277,"byte_end":118280,"line_start":532,"line_end":532,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118282,"byte_end":118297,"line_start":533,"line_end":533,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Lsb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118299,"byte_end":118355,"line_start":534,"line_end":534,"column_start":2,"column_end":58}},{"value":"/   0b011110,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118357,"byte_end":118372,"line_start":535,"line_end":535,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118374,"byte_end":118380,"line_start":536,"line_end":536,"column_start":2,"column_end":8}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118382,"byte_end":118397,"line_start":537,"line_end":537,"column_start":2,"column_end":17}},{"value":"/   arr.view_bits::<Msb0>()[14 .. 20].load_be::<u8>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118399,"byte_end":118455,"line_start":538,"line_end":538,"column_start":2,"column_end":58}},{"value":"/   0b110001,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118457,"byte_end":118472,"line_start":539,"line_end":539,"column_start":2,"column_end":17}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118474,"byte_end":118480,"line_start":540,"line_end":540,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118482,"byte_end":118489,"line_start":541,"line_end":541,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118491,"byte_end":118494,"line_start":542,"line_end":542,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118496,"byte_end":118540,"line_start":543,"line_end":543,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118542,"byte_end":118589,"line_start":544,"line_end":544,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":695},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121519,"byte_end":121527,"line_start":629,"line_end":629,"column_start":5,"column_end":13},"name":"store_le","qualname":"::field::BitField::store_le","value":"pub fn store_le<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Stores into `self`, using little-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using little-endian element ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118640,"byte_end":118701,"line_start":548,"line_end":548,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118703,"byte_end":118706,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its least","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118708,"byte_end":118778,"line_start":550,"line_end":550,"column_start":2,"column_end":72}},{"value":"/ significant chunk in the low memory address, and its most significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118780,"byte_end":118853,"line_start":551,"line_end":551,"column_start":2,"column_end":75}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118855,"byte_end":118930,"line_start":552,"line_end":552,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118932,"byte_end":118994,"line_start":553,"line_end":553,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":118996,"byte_end":118999,"line_start":554,"line_end":554,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119001,"byte_end":119017,"line_start":555,"line_end":555,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119019,"byte_end":119022,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119024,"byte_end":119100,"line_start":557,"line_end":557,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119102,"byte_end":119176,"line_start":558,"line_end":558,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119178,"byte_end":119252,"line_start":559,"line_end":559,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119254,"byte_end":119273,"line_start":560,"line_end":560,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119275,"byte_end":119350,"line_start":561,"line_end":561,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119352,"byte_end":119377,"line_start":562,"line_end":562,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119379,"byte_end":119382,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119384,"byte_end":119398,"line_start":564,"line_end":564,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119400,"byte_end":119403,"line_start":565,"line_end":565,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119405,"byte_end":119478,"line_start":566,"line_end":566,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119480,"byte_end":119553,"line_start":567,"line_end":567,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the least significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119555,"byte_end":119628,"line_start":568,"line_end":568,"column_start":2,"column_end":75}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119630,"byte_end":119706,"line_start":569,"line_end":569,"column_start":2,"column_end":78}},{"value":"/ as containing its most significant bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119708,"byte_end":119752,"line_start":570,"line_end":570,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119754,"byte_end":119757,"line_start":571,"line_end":571,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119759,"byte_end":119771,"line_start":572,"line_end":572,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119773,"byte_end":119776,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119778,"byte_end":119852,"line_start":574,"line_end":574,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119854,"byte_end":119877,"line_start":575,"line_end":575,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119879,"byte_end":119882,"line_start":576,"line_end":576,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119884,"byte_end":119898,"line_start":577,"line_end":577,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119900,"byte_end":119903,"line_start":578,"line_end":578,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119905,"byte_end":119976,"line_start":579,"line_end":579,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119978,"byte_end":119991,"line_start":580,"line_end":580,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119993,"byte_end":119996,"line_start":581,"line_end":581,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":119998,"byte_end":120009,"line_start":582,"line_end":582,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120011,"byte_end":120038,"line_start":583,"line_end":583,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120040,"byte_end":120043,"line_start":584,"line_end":584,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120045,"byte_end":120073,"line_start":585,"line_end":585,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120075,"byte_end":120107,"line_start":586,"line_end":586,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120109,"byte_end":120124,"line_start":587,"line_end":587,"column_start":2,"column_end":17}},{"value":"/   .store_le(0b0000_1_1011_1000_110u16);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120126,"byte_end":120169,"line_start":588,"line_end":588,"column_start":2,"column_end":45}},{"value":"/ //                 O PQRS TUVW XYZ","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120171,"byte_end":120209,"line_start":589,"line_end":589,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120211,"byte_end":120214,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120216,"byte_end":120238,"line_start":591,"line_end":591,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1011_1000, 0b0000000_1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120240,"byte_end":120283,"line_start":592,"line_end":592,"column_start":2,"column_end":45}},{"value":"/ //  XYZ          PQRS TUVW            O","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120285,"byte_end":120328,"line_start":593,"line_end":593,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120330,"byte_end":120337,"line_start":594,"line_end":594,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120339,"byte_end":120342,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120344,"byte_end":120382,"line_start":596,"line_end":596,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120384,"byte_end":120399,"line_start":597,"line_end":597,"column_start":2,"column_end":17}},{"value":"/   .load_le::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120401,"byte_end":120425,"line_start":598,"line_end":598,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120427,"byte_end":120442,"line_start":599,"line_end":599,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120444,"byte_end":120454,"line_start":600,"line_end":600,"column_start":2,"column_end":12}},{"value":"/   0b0000_1_1011_1000_110u16,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120456,"byte_end":120488,"line_start":601,"line_end":601,"column_start":2,"column_end":34}},{"value":"/ //       O PQRS TUVW XYZ","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120490,"byte_end":120518,"line_start":602,"line_end":602,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120520,"byte_end":120526,"line_start":603,"line_end":603,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120528,"byte_end":120535,"line_start":604,"line_end":604,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120537,"byte_end":120540,"line_start":605,"line_end":605,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120542,"byte_end":120609,"line_start":606,"line_end":606,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120611,"byte_end":120652,"line_start":607,"line_end":607,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120654,"byte_end":120657,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120659,"byte_end":120670,"line_start":609,"line_end":609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120672,"byte_end":120699,"line_start":610,"line_end":610,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120701,"byte_end":120746,"line_start":611,"line_end":611,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120748,"byte_end":120793,"line_start":612,"line_end":612,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120795,"byte_end":120798,"line_start":613,"line_end":613,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120800,"byte_end":120868,"line_start":614,"line_end":614,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120870,"byte_end":120949,"line_start":615,"line_end":615,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":120951,"byte_end":121023,"line_start":616,"line_end":616,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121025,"byte_end":121097,"line_start":617,"line_end":617,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121099,"byte_end":121163,"line_start":618,"line_end":618,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       15  19","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121165,"byte_end":121218,"line_start":619,"line_end":619,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121220,"byte_end":121223,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_le(0b111001u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121225,"byte_end":121266,"line_start":621,"line_end":621,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_le(0b000111u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121268,"byte_end":121309,"line_start":622,"line_end":622,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121311,"byte_end":121357,"line_start":623,"line_end":623,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121359,"byte_end":121405,"line_start":624,"line_end":624,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121407,"byte_end":121414,"line_start":625,"line_end":625,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121416,"byte_end":121419,"line_start":626,"line_end":626,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121421,"byte_end":121465,"line_start":627,"line_end":627,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121467,"byte_end":121514,"line_start":628,"line_end":628,"column_start":2,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":697},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124451,"byte_end":124459,"line_start":713,"line_end":713,"column_start":5,"column_end":13},"name":"store_be","qualname":"::field::BitField::store_be","value":"pub fn store_be<M>(&mut Self, M) where M: BitMemory","parent":{"krate":0,"index":686},"children":[],"decl_id":null,"docs":" Stores into `self`, using big-endian element ordering.","sig":null,"attributes":[{"value":"/ Stores into `self`, using big-endian element ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121575,"byte_end":121633,"line_start":632,"line_end":632,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121635,"byte_end":121638,"line_start":633,"line_end":633,"column_start":2,"column_end":5}},{"value":"/ This function interprets a multi-element slice as having its most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121640,"byte_end":121709,"line_start":634,"line_end":634,"column_start":2,"column_end":71}},{"value":"/ significant chunk in the low memory address, and its least significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121711,"byte_end":121785,"line_start":635,"line_end":635,"column_start":2,"column_end":76}},{"value":"/ chunk in the high memory address. Each element `T` is still interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121787,"byte_end":121862,"line_start":636,"line_end":636,"column_start":2,"column_end":77}},{"value":"/ from individual bytes according to the local CPU ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121864,"byte_end":121926,"line_start":637,"line_end":637,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121928,"byte_end":121931,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121933,"byte_end":121949,"line_start":639,"line_end":639,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121951,"byte_end":121954,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: A write reference to some bits in memory. This slice must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":121956,"byte_end":122032,"line_start":641,"line_end":641,"column_start":2,"column_end":78}},{"value":"/   be trimmed to have a width no more than the [`M::BITS`] width of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122034,"byte_end":122108,"line_start":642,"line_end":642,"column_start":2,"column_end":76}},{"value":"/   type being stored. This can be accomplished with range indexing on a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122110,"byte_end":122184,"line_start":643,"line_end":643,"column_start":2,"column_end":76}},{"value":"/   larger slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122186,"byte_end":122205,"line_start":644,"line_end":644,"column_start":2,"column_end":21}},{"value":"/ - `value`: A value, whose [`self.len()`] least significant bits will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122207,"byte_end":122282,"line_start":645,"line_end":645,"column_start":2,"column_end":77}},{"value":"/   stored into `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122284,"byte_end":122309,"line_start":646,"line_end":646,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122311,"byte_end":122314,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122316,"byte_end":122330,"line_start":648,"line_end":648,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122332,"byte_end":122335,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ The [`self.len()`] least significant bits of `value` are written into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122337,"byte_end":122410,"line_start":650,"line_end":650,"column_start":2,"column_end":75}},{"value":"/ the domain of `self`. If `self` spans multiple elements `T`, then the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122412,"byte_end":122485,"line_start":651,"line_end":651,"column_start":2,"column_end":75}},{"value":"/ lowest-address `T` is interpreted as containing the most significant","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122487,"byte_end":122559,"line_start":652,"line_end":652,"column_start":2,"column_end":74}},{"value":"/ bits of the `M` return value, and the highest-address `T` is interpreted","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122561,"byte_end":122637,"line_start":653,"line_end":653,"column_start":2,"column_end":78}},{"value":"/ as containing its least significant bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122639,"byte_end":122684,"line_start":654,"line_end":654,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122686,"byte_end":122689,"line_start":655,"line_end":655,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122691,"byte_end":122703,"line_start":656,"line_end":656,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122705,"byte_end":122708,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ This method is encouraged to panic if `self` is empty, or wider than a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122710,"byte_end":122784,"line_start":658,"line_end":658,"column_start":2,"column_end":76}},{"value":"/ single element `M`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122786,"byte_end":122809,"line_start":659,"line_end":659,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122811,"byte_end":122814,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122816,"byte_end":122830,"line_start":661,"line_end":661,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122832,"byte_end":122835,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ This example shows how a value is segmented across multiple storage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122837,"byte_end":122908,"line_start":663,"line_end":663,"column_start":2,"column_end":73}},{"value":"/ elements:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122910,"byte_end":122923,"line_start":664,"line_end":664,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122925,"byte_end":122928,"line_start":665,"line_end":665,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122930,"byte_end":122941,"line_start":666,"line_end":666,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122943,"byte_end":122970,"line_start":667,"line_end":667,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122972,"byte_end":122975,"line_start":668,"line_end":668,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":122977,"byte_end":123005,"line_start":669,"line_end":669,"column_start":2,"column_end":30}},{"value":"/ data.view_bits_mut::<Lsb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123007,"byte_end":123039,"line_start":670,"line_end":670,"column_start":2,"column_end":34}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123041,"byte_end":123056,"line_start":671,"line_end":671,"column_start":2,"column_end":17}},{"value":"/   .store_be(0b0000_110_1000_1011_1u16);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123058,"byte_end":123101,"line_start":672,"line_end":672,"column_start":2,"column_end":45}},{"value":"/ //                 OPQ RSTU VWXY Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123103,"byte_end":123141,"line_start":673,"line_end":673,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123143,"byte_end":123146,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(data, [","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123148,"byte_end":123170,"line_start":675,"line_end":675,"column_start":2,"column_end":24}},{"value":"/   0b110_00000, 0b1000_1011, 0b0000000_1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123172,"byte_end":123215,"line_start":676,"line_end":676,"column_start":2,"column_end":45}},{"value":"/ //  OPQ          RSTU VWXY            Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123217,"byte_end":123260,"line_start":677,"line_end":677,"column_start":2,"column_end":45}},{"value":"/ ]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123262,"byte_end":123269,"line_start":678,"line_end":678,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123271,"byte_end":123274,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ let val = data.view_bits::<Lsb0>()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123276,"byte_end":123314,"line_start":680,"line_end":680,"column_start":2,"column_end":40}},{"value":"/   [5 .. 17]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123316,"byte_end":123331,"line_start":681,"line_end":681,"column_start":2,"column_end":17}},{"value":"/   .load_be::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123333,"byte_end":123357,"line_start":682,"line_end":682,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123359,"byte_end":123374,"line_start":683,"line_end":683,"column_start":2,"column_end":17}},{"value":"/   val,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123376,"byte_end":123386,"line_start":684,"line_end":684,"column_start":2,"column_end":12}},{"value":"/   0b0000_110_1000_1011_1u16,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123388,"byte_end":123420,"line_start":685,"line_end":685,"column_start":2,"column_end":34}},{"value":"/ //       OPQ RSTU VWXY Z","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123422,"byte_end":123450,"line_start":686,"line_end":686,"column_start":2,"column_end":30}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123452,"byte_end":123458,"line_start":687,"line_end":687,"column_start":2,"column_end":8}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123460,"byte_end":123467,"line_start":688,"line_end":688,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123469,"byte_end":123472,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ And this example shows how the same memory region is written by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123474,"byte_end":123541,"line_start":690,"line_end":690,"column_start":2,"column_end":69}},{"value":"/ different `BitOrder` implementations:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123543,"byte_end":123584,"line_start":691,"line_end":691,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123586,"byte_end":123589,"line_start":692,"line_end":692,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123591,"byte_end":123602,"line_start":693,"line_end":693,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123604,"byte_end":123631,"line_start":694,"line_end":694,"column_start":2,"column_end":29}},{"value":"/ let mut lsb0 = bitarr![Lsb0, u16; 0; 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123633,"byte_end":123678,"line_start":695,"line_end":695,"column_start":2,"column_end":47}},{"value":"/ let mut msb0 = bitarr![Msb0, u16; 0; 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123680,"byte_end":123725,"line_start":696,"line_end":696,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123727,"byte_end":123730,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ // Bit pos:        14                                     19  16","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123732,"byte_end":123800,"line_start":698,"line_end":698,"column_start":2,"column_end":70}},{"value":"/ // Lsb0:          ─┤                                       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123802,"byte_end":123881,"line_start":699,"line_end":699,"column_start":2,"column_end":69}},{"value":"/ let exp_lsb0 = [0b0100_0000_0000_0000u16, 0b0000_0000_0000_1110u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123883,"byte_end":123955,"line_start":700,"line_end":700,"column_start":2,"column_end":74}},{"value":"/ let exp_msb0 = [0b0000_0000_0000_0011u16, 0b0001_0000_0000_0000u16];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":123957,"byte_end":124029,"line_start":701,"line_end":701,"column_start":2,"column_end":74}},{"value":"/ // Msb0:                           ├─       ├──┤","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124031,"byte_end":124095,"line_start":702,"line_end":702,"column_start":2,"column_end":54}},{"value":"/ // Bit pos:                       14       15  19","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124097,"byte_end":124150,"line_start":703,"line_end":703,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124152,"byte_end":124155,"line_start":704,"line_end":704,"column_start":2,"column_end":5}},{"value":"/ lsb0[14 ..= 19].store_be(0b011110u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124157,"byte_end":124198,"line_start":705,"line_end":705,"column_start":2,"column_end":43}},{"value":"/ msb0[14 ..= 19].store_be(0b110001u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124200,"byte_end":124241,"line_start":706,"line_end":706,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(lsb0.as_raw_slice(), exp_lsb0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124243,"byte_end":124289,"line_start":707,"line_end":707,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(msb0.as_raw_slice(), exp_msb0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124291,"byte_end":124337,"line_start":708,"line_end":708,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124339,"byte_end":124346,"line_start":709,"line_end":709,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124348,"byte_end":124351,"line_start":710,"line_end":710,"column_start":2,"column_end":5}},{"value":"/ [`M::BITS`]: crate::mem::BitMemory::BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124353,"byte_end":124397,"line_start":711,"line_end":711,"column_start":2,"column_end":46}},{"value":"/ [`self.len()`]: crate::slice::BitSlice::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124399,"byte_end":124446,"line_start":712,"line_end":712,"column_start":2,"column_end":49}}]},{"kind":"Mod","id":{"krate":0,"index":748},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"index","qualname":"::index","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","parent":null,"children":[{"krate":0,"index":749},{"krate":0,"index":750},{"krate":0,"index":753},{"krate":0,"index":756},{"krate":0,"index":757},{"krate":0,"index":760},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":767},{"krate":0,"index":770},{"krate":0,"index":771},{"krate":0,"index":773},{"krate":0,"index":776},{"krate":0,"index":779},{"krate":0,"index":780},{"krate":0,"index":783},{"krate":0,"index":786},{"krate":0,"index":787},{"krate":0,"index":789},{"krate":0,"index":790},{"krate":0,"index":793},{"krate":0,"index":796},{"krate":0,"index":3651},{"krate":0,"index":3655},{"krate":0,"index":3658},{"krate":0,"index":3660},{"krate":0,"index":3663},{"krate":0,"index":3665},{"krate":0,"index":3668},{"krate":0,"index":3672},{"krate":0,"index":3675},{"krate":0,"index":3677},{"krate":0,"index":3681},{"krate":0,"index":799},{"krate":0,"index":823},{"krate":0,"index":827},{"krate":0,"index":830},{"krate":0,"index":833},{"krate":0,"index":3684},{"krate":0,"index":3688},{"krate":0,"index":3691},{"krate":0,"index":3693},{"krate":0,"index":3696},{"krate":0,"index":3698},{"krate":0,"index":3701},{"krate":0,"index":3705},{"krate":0,"index":3708},{"krate":0,"index":3710},{"krate":0,"index":3714},{"krate":0,"index":836},{"krate":0,"index":840},{"krate":0,"index":843},{"krate":0,"index":3717},{"krate":0,"index":3721},{"krate":0,"index":3724},{"krate":0,"index":3726},{"krate":0,"index":3729},{"krate":0,"index":3731},{"krate":0,"index":3734},{"krate":0,"index":3738},{"krate":0,"index":3741},{"krate":0,"index":3743},{"krate":0,"index":3747},{"krate":0,"index":846},{"krate":0,"index":857},{"krate":0,"index":860},{"krate":0,"index":863},{"krate":0,"index":3750},{"krate":0,"index":3754},{"krate":0,"index":3757},{"krate":0,"index":3759},{"krate":0,"index":3762},{"krate":0,"index":3764},{"krate":0,"index":3767},{"krate":0,"index":3771},{"krate":0,"index":3774},{"krate":0,"index":3776},{"krate":0,"index":3780},{"krate":0,"index":866},{"krate":0,"index":876},{"krate":0,"index":879},{"krate":0,"index":882},{"krate":0,"index":3783},{"krate":0,"index":3786},{"krate":0,"index":3789},{"krate":0,"index":3791},{"krate":0,"index":3794},{"krate":0,"index":3796},{"krate":0,"index":3799},{"krate":0,"index":3803},{"krate":0,"index":3806},{"krate":0,"index":3808},{"krate":0,"index":3812},{"krate":0,"index":885},{"krate":0,"index":893},{"krate":0,"index":896},{"krate":0,"index":899},{"krate":0,"index":3815},{"krate":0,"index":3818},{"krate":0,"index":3821},{"krate":0,"index":3823},{"krate":0,"index":3826},{"krate":0,"index":3828},{"krate":0,"index":3831},{"krate":0,"index":3835},{"krate":0,"index":3838},{"krate":0,"index":3840},{"krate":0,"index":3844},{"krate":0,"index":902},{"krate":0,"index":911},{"krate":0,"index":914},{"krate":0,"index":917},{"krate":0,"index":920},{"krate":0,"index":924},{"krate":0,"index":928},{"krate":0,"index":932}],"decl_id":null,"docs":" Well-typed counters and register descriptors.","sig":null,"attributes":[{"value":"* Well-typed counters and register descriptors.\n\nThis module provides session types which encode a strict chain of modification\nto map semantic indices within a [`BitSlice`] to the electrical register values\nused to interact with the memory bus.\n\nThe main advantage of the types in this module is that they provide\nregister-dependent range requirements for counter values, making it impossible\nto have an index out of bounds for a register. They also create a sequence of\ntype transformations that assure the library about the continued validity of\neach value in its surrounding context.\n\nBy eliminating public constructors from arbitrary integers, [`bitvec`] can\nguarantee that only it can produce seed values, and only trusted functions can\ntransform their numeric values or types, until the program reaches the property\nthat it requires. This chain of assurance means that memory operations can be\nconfident in the correctness of their actions and effects.\n\n# Type Sequence\n\nThe library produces [`BitIdx`] values from region computation. These types\ncannot be publicly constructed, and are only ever the result of pointer\nanalysis. As such, they rely on correctness of the memory regions provided to\nlibrary entry points, and those entry points can leverage the Rust type system\nto ensure safety there.\n\n[`BitIdx`] is transformed to [`BitPos`] through the [`BitOrder`] trait. The\n[`order`] module provides verification functions that implementors can use to\ndemonstrate correctness. `BitPos` is the seed type that describes memory\noperations, and is used to create selection masks [`BitSel`] and [`BitMask`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitMask`]: crate::index::BitMask\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`BitSel`]: crate::index::BitSel\n[`BitSlice`]: crate::slice::BitSlice\n[`bitvec`]: crate\n[`order`]: crate::order\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":151295,"byte_end":153164,"line_start":1,"line_end":40,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":3651},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":154933,"byte_end":154939,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitIdx","qualname":"::index::BitIdx","value":"BitIdx {  }","parent":null,"children":[{"krate":0,"index":3653},{"krate":0,"index":3654}],"decl_id":null,"docs":" A semantic index counter within a register element `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark a semantic\nindex within some register element. It is a virtual index, and is the stored\nvalue used in pointer encodings to track region start information.\n\nIt is translated to an electrical index through the [`BitOrder`] trait. This\nvirtual index is the only counter that can be used for address computation, and\nonce lowered to an electrical index through [`BitOrder::at`], the electrical\naddress can only be used for instruction selection.\n\n# Type Parameters\n\n- `R`: The register element that this index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can never be constructed outside of the [`bitvec`] crate. It is passed\nin to [`BitOrder`] implementations, which may use it to construct electrical\nposition, selection, or mask values from it. All values of this type constructed\nby [`bitvec`] are known to be correct in their region; no other construction\nsite can be trusted.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: crate::mem::BitMemory::BITS\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":153421,"byte_end":154779,"line_start":69,"line_end":102,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":154831,"byte_end":154851,"line_start":104,"line_end":104,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":801},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155222,"byte_end":155226,"line_start":119,"line_end":119,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitIdx::<R>::LAST","value":"Self","parent":{"krate":0,"index":799},"children":[],"decl_id":null,"docs":" The inclusive maximum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum index within an element `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155156,"byte_end":155210,"line_start":118,"line_end":118,"column_start":2,"column_end":56}}]},{"kind":"Const","id":{"krate":0,"index":802},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155349,"byte_end":155353,"line_start":124,"line_end":124,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitIdx::<R>::ZERO","value":"Self","parent":{"krate":0,"index":799},"children":[],"decl_id":null,"docs":" The inclusive minimum index within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum index within an element `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155283,"byte_end":155337,"line_start":123,"line_end":123,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":803},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155880,"byte_end":155883,"line_start":143,"line_end":143,"column_start":9,"column_end":12},"name":"new","qualname":"<BitIdx<R>>::new","value":"pub fn new(u8) -> Result<Self, BitIdxError<R>>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good index into an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155405,"byte_end":155474,"line_start":129,"line_end":129,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155476,"byte_end":155479,"line_start":130,"line_end":130,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155481,"byte_end":155497,"line_start":131,"line_end":131,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155499,"byte_end":155502,"line_start":132,"line_end":132,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155504,"byte_end":155579,"line_start":133,"line_end":133,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155581,"byte_end":155640,"line_start":134,"line_end":134,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155642,"byte_end":155645,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155647,"byte_end":155660,"line_start":136,"line_end":136,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155662,"byte_end":155665,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as either a valid or invalid index by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155667,"byte_end":155737,"line_start":138,"line_end":138,"column_start":2,"column_end":72}},{"value":"/ whether or not it is within the valid range `0 .. R::BITS`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155739,"byte_end":155802,"line_start":139,"line_end":139,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155804,"byte_end":155807,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155809,"byte_end":155839,"line_start":141,"line_end":141,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155841,"byte_end":155871,"line_start":142,"line_end":142,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":804},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156627,"byte_end":156640,"line_start":169,"line_end":169,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitIdx<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good index into an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good index into an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156046,"byte_end":156118,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156120,"byte_end":156123,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156125,"byte_end":156141,"line_start":152,"line_end":152,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156143,"byte_end":156146,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as an index. This must be not less","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156148,"byte_end":156223,"line_start":154,"line_end":154,"column_start":2,"column_end":77}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156225,"byte_end":156284,"line_start":155,"line_end":155,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156286,"byte_end":156289,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156291,"byte_end":156304,"line_start":157,"line_end":157,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156306,"byte_end":156309,"line_start":158,"line_end":158,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156311,"byte_end":156361,"line_start":159,"line_end":159,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156363,"byte_end":156366,"line_start":160,"line_end":160,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156368,"byte_end":156380,"line_start":161,"line_end":161,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156382,"byte_end":156385,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156387,"byte_end":156453,"line_start":163,"line_end":163,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156455,"byte_end":156528,"line_start":164,"line_end":164,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156530,"byte_end":156542,"line_start":165,"line_end":165,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156544,"byte_end":156547,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156549,"byte_end":156579,"line_start":167,"line_end":167,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156581,"byte_end":156611,"line_start":168,"line_end":168,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":805},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157032,"byte_end":157036,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitIdx<R>>::cast","value":"pub fn cast<S>(Self) -> Result<BitIdx<S>, BitIdxError<S>> where S: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Casts to a new index type.","sig":null,"attributes":[{"value":"/ Casts to a new index type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156827,"byte_end":156857,"line_start":182,"line_end":182,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156859,"byte_end":156862,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ This will always succeed if `self.value()` is a valid index in the `S`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156864,"byte_end":156938,"line_start":184,"line_end":184,"column_start":2,"column_end":76}},{"value":"/ register; it will return an error if the `self` index is too wide for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":156940,"byte_end":157013,"line_start":185,"line_end":185,"column_start":2,"column_end":75}},{"value":"/ `S`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157015,"byte_end":157023,"line_start":186,"line_end":186,"column_start":2,"column_end":10}}]},{"kind":"Method","id":{"krate":0,"index":807},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157241,"byte_end":157246,"line_start":194,"line_end":194,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdx<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the index wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the index wrapper, leaving the internal counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157140,"byte_end":157200,"line_start":192,"line_end":192,"column_start":2,"column_end":62}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157202,"byte_end":157232,"line_start":193,"line_end":193,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":808},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157562,"byte_end":157566,"line_start":208,"line_end":208,"column_start":9,"column_end":13},"name":"next","qualname":"<BitIdx<R>>::next","value":"pub fn next(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Increments an index counter, wrapping at the back edge of the register.","sig":null,"attributes":[{"value":"/ Increments an index counter, wrapping at the back edge of the register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157277,"byte_end":157352,"line_start":198,"line_end":198,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157354,"byte_end":157357,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157359,"byte_end":157375,"line_start":200,"line_end":200,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157377,"byte_end":157380,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to increment.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157382,"byte_end":157419,"line_start":202,"line_end":202,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157421,"byte_end":157424,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157426,"byte_end":157439,"line_start":204,"line_end":204,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157441,"byte_end":157444,"line_start":205,"line_end":205,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The next index after `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157446,"byte_end":157486,"line_start":206,"line_end":206,"column_start":2,"column_end":42}},{"value":"/ - `.1`: Indicates that the new index is in the next register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157488,"byte_end":157553,"line_start":207,"line_end":207,"column_start":2,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":809},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157997,"byte_end":158001,"line_start":226,"line_end":226,"column_start":9,"column_end":13},"name":"prev","qualname":"<BitIdx<R>>::prev","value":"pub fn prev(Self) -> (Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Decrements an index counter, wrapping at the front edge of the register.","sig":null,"attributes":[{"value":"/ Decrements an index counter, wrapping at the front edge of the register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157702,"byte_end":157778,"line_start":216,"line_end":216,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157780,"byte_end":157783,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157785,"byte_end":157801,"line_start":218,"line_end":218,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157803,"byte_end":157806,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `self`: The index to decrement.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157808,"byte_end":157845,"line_start":220,"line_end":220,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157847,"byte_end":157850,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157852,"byte_end":157865,"line_start":222,"line_end":222,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157867,"byte_end":157870,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The previous index before `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157872,"byte_end":157917,"line_start":224,"line_end":224,"column_start":2,"column_end":47}},{"value":"/ - `.1`: Indicates that the new index is in the previous register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":157919,"byte_end":157988,"line_start":225,"line_end":225,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":810},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158431,"byte_end":158439,"line_start":241,"line_end":241,"column_start":9,"column_end":17},"name":"position","qualname":"<BitIdx<R>>::position","value":"pub fn position<O>(Self) -> BitPos<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit position corresponding to `self` under some ordering.","sig":null,"attributes":[{"value":"/ Computes the bit position corresponding to `self` under some ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158147,"byte_end":158221,"line_start":234,"line_end":234,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158223,"byte_end":158226,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::at::<R>`], which is the only public, safe,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158228,"byte_end":158296,"line_start":236,"line_end":236,"column_start":2,"column_end":70}},{"value":"/ constructor for a position counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158298,"byte_end":158337,"line_start":237,"line_end":237,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158339,"byte_end":158342,"line_start":238,"line_end":238,"column_start":2,"column_end":5}},{"value":"/ [`O::at::<R>`]: crate::order::BitOrder::at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158344,"byte_end":158390,"line_start":239,"line_end":239,"column_start":2,"column_end":48}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158392,"byte_end":158422,"line_start":240,"line_end":240,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":812},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158797,"byte_end":158803,"line_start":253,"line_end":253,"column_start":9,"column_end":15},"name":"select","qualname":"<BitIdx<R>>::select","value":"pub fn select<O>(Self) -> BitSel<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self` under an ordering.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self` under an ordering.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158507,"byte_end":158579,"line_start":246,"line_end":246,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158581,"byte_end":158584,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`O::select::<R>`], which is the only public, safe,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158586,"byte_end":158658,"line_start":248,"line_end":248,"column_start":2,"column_end":74}},{"value":"/ constructor for a bit selector.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158660,"byte_end":158695,"line_start":249,"line_end":249,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158697,"byte_end":158700,"line_start":250,"line_end":250,"column_start":2,"column_end":5}},{"value":"/ [`O::select::<R>`]: crate::order::BitOrder::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158702,"byte_end":158756,"line_start":251,"line_end":251,"column_start":2,"column_end":56}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158758,"byte_end":158788,"line_start":252,"line_end":252,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":814},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159071,"byte_end":159075,"line_start":264,"line_end":264,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitIdx<R>>::mask","value":"pub fn mask<O>(Self) -> BitMask<R> where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158875,"byte_end":158936,"line_start":258,"line_end":258,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158938,"byte_end":158941,"line_start":259,"line_end":259,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158943,"byte_end":158989,"line_start":260,"line_end":260,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158991,"byte_end":158994,"line_start":261,"line_end":261,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":158996,"byte_end":159030,"line_start":262,"line_end":262,"column_start":2,"column_end":36}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159032,"byte_end":159062,"line_start":263,"line_end":263,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":816},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160037,"byte_end":160042,"line_start":294,"line_end":294,"column_start":9,"column_end":14},"name":"range","qualname":"<BitIdx<R>>::range","value":"pub fn range(Self, BitTail<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all indices between an inclusive start and exclusive end\n point.","sig":null,"attributes":[{"value":"/ Iterates over all indices between an inclusive start and exclusive end","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159153,"byte_end":159227,"line_start":269,"line_end":269,"column_start":2,"column_end":76}},{"value":"/ point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159229,"byte_end":159239,"line_start":270,"line_end":270,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159241,"byte_end":159244,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159246,"byte_end":159320,"line_start":272,"line_end":272,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159322,"byte_end":159396,"line_start":273,"line_end":273,"column_start":2,"column_end":76}},{"value":"/ not supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159398,"byte_end":159469,"line_start":274,"line_end":274,"column_start":2,"column_end":73}},{"value":"/ [`Range<BitIdx<R>>`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159471,"byte_end":159496,"line_start":275,"line_end":275,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159498,"byte_end":159501,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159503,"byte_end":159519,"line_start":277,"line_end":277,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159521,"byte_end":159524,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159526,"byte_end":159600,"line_start":279,"line_end":279,"column_start":2,"column_end":76}},{"value":"/   index produced by the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159602,"byte_end":159639,"line_start":280,"line_end":280,"column_start":2,"column_end":39}},{"value":"/ - `upto`: The exclusive high bound of the range. The iterator will halt","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159641,"byte_end":159716,"line_start":281,"line_end":281,"column_start":2,"column_end":77}},{"value":"/   before yielding an index of this value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159718,"byte_end":159763,"line_start":282,"line_end":282,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159765,"byte_end":159768,"line_start":283,"line_end":283,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159770,"byte_end":159783,"line_start":284,"line_end":284,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159785,"byte_end":159788,"line_start":285,"line_end":285,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from .. upto`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159790,"byte_end":159860,"line_start":286,"line_end":286,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159862,"byte_end":159865,"line_start":287,"line_end":287,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159867,"byte_end":159885,"line_start":288,"line_end":288,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159887,"byte_end":159890,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ `from` must be no greater than `upto`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159892,"byte_end":159934,"line_start":290,"line_end":290,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159936,"byte_end":159939,"line_start":291,"line_end":291,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159941,"byte_end":159984,"line_start":292,"line_end":292,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitIdx<R>>`]: core::ops::Range","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":159986,"byte_end":160028,"line_start":293,"line_end":293,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":819},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160408,"byte_end":160417,"line_start":307,"line_end":307,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitIdx<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible index values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible index values.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160355,"byte_end":160399,"line_start":306,"line_end":306,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":821},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161430,"byte_end":161436,"line_start":335,"line_end":335,"column_start":9,"column_end":15},"name":"offset","qualname":"<BitIdx<R>>::offset","value":"pub fn offset(Self, isize) -> (isize, Self)","parent":null,"children":[],"decl_id":null,"docs":" Computes the jump distance for some number of bits away from a starting\n index.","sig":null,"attributes":[{"value":"/ Computes the jump distance for some number of bits away from a starting","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160554,"byte_end":160629,"line_start":314,"line_end":314,"column_start":2,"column_end":77}},{"value":"/ index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160631,"byte_end":160641,"line_start":315,"line_end":315,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160643,"byte_end":160646,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ This computes the number of elements by which to adjust a base pointer,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160648,"byte_end":160723,"line_start":317,"line_end":317,"column_start":2,"column_end":77}},{"value":"/ and then the bit index of the destination bit in the new referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160725,"byte_end":160794,"line_start":318,"line_end":318,"column_start":2,"column_end":71}},{"value":"/ register element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160796,"byte_end":160817,"line_start":319,"line_end":319,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160819,"byte_end":160822,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160824,"byte_end":160840,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160842,"byte_end":160845,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ - `self`: An index within some element, from which the offset is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160847,"byte_end":160915,"line_start":323,"line_end":323,"column_start":2,"column_end":70}},{"value":"/   computed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160917,"byte_end":160932,"line_start":324,"line_end":324,"column_start":2,"column_end":17}},{"value":"/ - `by`: The distance by which to jump. Negative values move lower in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":160934,"byte_end":161010,"line_start":325,"line_end":325,"column_start":2,"column_end":78}},{"value":"/   index and element-pointer space; positive values move higher.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161012,"byte_end":161079,"line_start":326,"line_end":326,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161081,"byte_end":161084,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161086,"byte_end":161099,"line_start":328,"line_end":328,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161101,"byte_end":161104,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements `R` by which to adjust a base pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161106,"byte_end":161179,"line_start":330,"line_end":330,"column_start":2,"column_end":75}},{"value":"/   This value can be passed directly into [`ptr::offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161181,"byte_end":161242,"line_start":331,"line_end":331,"column_start":2,"column_end":63}},{"value":"/ - `.1`: The index of the destination bit within the destination element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161244,"byte_end":161320,"line_start":332,"line_end":332,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161322,"byte_end":161325,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ [`ptr::offset`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":161327,"byte_end":161421,"line_start":334,"line_end":334,"column_start":2,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164284,"byte_end":164288,"line_start":409,"line_end":409,"column_start":9,"column_end":13},"name":"span","qualname":"<BitIdx<R>>::span","value":"pub fn span(Self, usize) -> (usize, BitTail<R>)","parent":null,"children":[],"decl_id":null,"docs":" Computes the span information for a region beginning at `self` for `len`\n bits.","sig":null,"attributes":[{"value":"/ Computes the span information for a region beginning at `self` for `len`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163454,"byte_end":163530,"line_start":387,"line_end":387,"column_start":2,"column_end":78}},{"value":"/ bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163532,"byte_end":163541,"line_start":388,"line_end":388,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163543,"byte_end":163546,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ The span information is the number of elements in the region that hold","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163548,"byte_end":163622,"line_start":390,"line_end":390,"column_start":2,"column_end":76}},{"value":"/ live bits, and the position of the tail marker after the live bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163624,"byte_end":163695,"line_start":391,"line_end":391,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163697,"byte_end":163700,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ This forwards to [`BitTail::span`], as the computation is identical for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163702,"byte_end":163777,"line_start":393,"line_end":393,"column_start":2,"column_end":77}},{"value":"/ the two types. Beginning a span at any `Idx` is equivalent to beginning","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163779,"byte_end":163854,"line_start":394,"line_end":394,"column_start":2,"column_end":77}},{"value":"/ it at the tail of a previous span.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163856,"byte_end":163894,"line_start":395,"line_end":395,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163896,"byte_end":163899,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163901,"byte_end":163917,"line_start":397,"line_end":397,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163919,"byte_end":163922,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ - `self`: The start bit of the span.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163924,"byte_end":163964,"line_start":399,"line_end":399,"column_start":2,"column_end":42}},{"value":"/ - `len`: The number of bits in the span.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":163966,"byte_end":164010,"line_start":400,"line_end":400,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164012,"byte_end":164015,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164017,"byte_end":164030,"line_start":402,"line_end":402,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164032,"byte_end":164035,"line_start":403,"line_end":403,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The number of elements, starting in the element that contains","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164037,"byte_end":164110,"line_start":404,"line_end":404,"column_start":2,"column_end":75}},{"value":"/   `self`, that contain live bits of the span.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164112,"byte_end":164161,"line_start":405,"line_end":405,"column_start":2,"column_end":51}},{"value":"/ - `.1`: The tail counter of the span’s end point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164163,"byte_end":164218,"line_start":406,"line_end":406,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164220,"byte_end":164223,"line_start":407,"line_end":407,"column_start":2,"column_end":5}},{"value":"/ [`BitTail::span`]: crate::index::BitTail::span","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164225,"byte_end":164275,"line_start":408,"line_end":408,"column_start":2,"column_end":52}}]},{"kind":"Struct","id":{"krate":0,"index":3684},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165253,"byte_end":165264,"line_start":453,"line_end":453,"column_start":12,"column_end":23},"name":"BitIdxError","qualname":"::index::BitIdxError","value":"BitIdxError {  }","parent":null,"children":[{"krate":0,"index":3686},{"krate":0,"index":3687}],"decl_id":null,"docs":" Marks an index that is invalid for a register type.\n","sig":null,"attributes":[{"value":"/ Marks an index that is invalid for a register type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165095,"byte_end":165150,"line_start":450,"line_end":450,"column_start":1,"column_end":56}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165151,"byte_end":165171,"line_start":451,"line_end":451,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":839},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166197,"byte_end":166202,"line_start":496,"line_end":496,"column_start":9,"column_end":14},"name":"value","qualname":"<BitIdxError<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the error wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the error wrapper, leaving the internal counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166096,"byte_end":166156,"line_start":494,"line_end":494,"column_start":2,"column_end":62}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166158,"byte_end":166188,"line_start":495,"line_end":495,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3717},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168218,"byte_end":168225,"line_start":565,"line_end":565,"column_start":12,"column_end":19},"name":"BitTail","qualname":"::index::BitTail","value":"BitTail {  }","parent":null,"children":[{"krate":0,"index":3719},{"krate":0,"index":3720}],"decl_id":null,"docs":" A semantic index counter within *or one bit past the end of* a register\nelement `R`.","sig":null,"attributes":[{"value":"* A semantic index counter within *or one bit past the end of* a register\nelement `R`.\n\nThis type is a counter in the ring `0 ..= R::BITS`, and serves to mark a\nsemantic index of a dead bit *after* a live region. As such, following in the\nC++ and LLVM memory model of first-live/first-dead region descriptiors, it marks\nan endpoint outside some bit-region, and may be used to compute the startpoint\nof a bit-region immediately succeeding, but not overlapping, the source.\n\nAs a dead-bit index, this *cannot* be used for indexing into a register. It is\nused only in abstract region computation.\n\nThis type is necessary in order to preserve the distinction between a dead\nmemory address that is *not* part of a buffer and a live memory address that is\nwithin a region. [`BitIdx`] is insufficient to this task, and causes buffer\nmanagement errors when used in its stead.\n\n# Type Parameters\n\n- `R`: The register element that this end index governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 ..= R::BITS`. Any\nvalue greater than [`R::BITS`] makes the program invalid, and will likely cause\neither a crash or incorrect memory access.\n\n# Construction\n\nThis type can only be publicly constructed through [`BitIdx::span`].\n\n[`BitIdx`]: crate::index::BitIdx\n[`R::BITS`]: crate::mem::BitMemory::BITS\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166791,"byte_end":168115,"line_start":529,"line_end":562,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168116,"byte_end":168136,"line_start":563,"line_end":563,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":848},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168520,"byte_end":168524,"line_start":579,"line_end":579,"column_start":12,"column_end":16},"name":"LAST","qualname":"::index::BitTail::<R>::LAST","value":"Self","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":" The inclusive maximum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive maximum tail within an element `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168455,"byte_end":168508,"line_start":578,"line_end":578,"column_start":2,"column_end":55}}]},{"kind":"Const","id":{"krate":0,"index":849},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168646,"byte_end":168650,"line_start":584,"line_end":584,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitTail::<R>::ZERO","value":"Self","parent":{"krate":0,"index":846},"children":[],"decl_id":null,"docs":" The inclusive minimum tail within an element `R`.\n","sig":null,"attributes":[{"value":"/ The inclusive minimum tail within an element `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168581,"byte_end":168634,"line_start":583,"line_end":583,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":850},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169145,"byte_end":169148,"line_start":603,"line_end":603,"column_start":9,"column_end":12},"name":"new","qualname":"<BitTail<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good tail of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good tail of an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168702,"byte_end":168768,"line_start":589,"line_end":589,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168770,"byte_end":168773,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168775,"byte_end":168791,"line_start":591,"line_end":591,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168793,"byte_end":168796,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a tail. This must be not less","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168798,"byte_end":168871,"line_start":593,"line_end":593,"column_start":2,"column_end":75}},{"value":"/   than [`Self::ZERO`] and not more than [`Self::LAST`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168873,"byte_end":168932,"line_start":594,"line_end":594,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168934,"byte_end":168937,"line_start":595,"line_end":595,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168939,"byte_end":168952,"line_start":596,"line_end":596,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168954,"byte_end":168957,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168959,"byte_end":169035,"line_start":598,"line_end":598,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169037,"byte_end":169067,"line_start":599,"line_end":599,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169069,"byte_end":169072,"line_start":600,"line_end":600,"column_start":2,"column_end":5}},{"value":"/ [`Self::LAST`]: Self::LAST","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169074,"byte_end":169104,"line_start":601,"line_end":601,"column_start":2,"column_end":32}},{"value":"/ [`Self::ZERO`]: Self::ZERO","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":169106,"byte_end":169136,"line_start":602,"line_end":602,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":852},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170153,"byte_end":170158,"line_start":644,"line_end":644,"column_start":9,"column_end":14},"name":"value","qualname":"<BitTail<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the tail wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the tail wrapper, leaving the internal counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170053,"byte_end":170112,"line_start":642,"line_end":642,"column_start":2,"column_end":61}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170114,"byte_end":170144,"line_start":643,"line_end":643,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":853},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170882,"byte_end":170892,"line_start":667,"line_end":667,"column_start":9,"column_end":19},"name":"range_from","qualname":"<BitTail<R>>::range_from","value":"pub fn range_from(BitIdx<R>) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all tail indices at and after an inclusive starting point.","sig":null,"attributes":[{"value":"/ Iterates over all tail indices at and after an inclusive starting point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170189,"byte_end":170265,"line_start":648,"line_end":648,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170267,"byte_end":170270,"line_start":649,"line_end":649,"column_start":2,"column_end":5}},{"value":"/ Because implementation details of the range type family, including the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170272,"byte_end":170346,"line_start":650,"line_end":650,"column_start":2,"column_end":76}},{"value":"/ [`RangeBounds`] trait, are not yet stable, and heterogenous ranges are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170348,"byte_end":170422,"line_start":651,"line_end":651,"column_start":2,"column_end":76}},{"value":"/ not yet supported, this must be an opaque iterator rather than a direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170424,"byte_end":170499,"line_start":652,"line_end":652,"column_start":2,"column_end":77}},{"value":"/ [`Range<BitTail<R>>`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170501,"byte_end":170527,"line_start":653,"line_end":653,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170529,"byte_end":170532,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170534,"byte_end":170550,"line_start":655,"line_end":655,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170552,"byte_end":170555,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive low bound of the range. This will be the first","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170557,"byte_end":170631,"line_start":657,"line_end":657,"column_start":2,"column_end":76}},{"value":"/   tail produced by the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170633,"byte_end":170669,"line_start":658,"line_end":658,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170671,"byte_end":170674,"line_start":659,"line_end":659,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170676,"byte_end":170689,"line_start":660,"line_end":660,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170691,"byte_end":170694,"line_start":661,"line_end":661,"column_start":2,"column_end":5}},{"value":"/ An opaque iterator that is equivalent to the range `from ..=","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170696,"byte_end":170760,"line_start":662,"line_end":662,"column_start":2,"column_end":66}},{"value":"/ Self::LAST`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170762,"byte_end":170778,"line_start":663,"line_end":663,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170780,"byte_end":170783,"line_start":664,"line_end":664,"column_start":2,"column_end":5}},{"value":"/ [`RangeBounds`]: core::ops::RangeBounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170785,"byte_end":170828,"line_start":665,"line_end":665,"column_start":2,"column_end":45}},{"value":"/ [`Range<BitTail<R>>`]: core::ops::Range","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":170830,"byte_end":170873,"line_start":666,"line_end":666,"column_start":2,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":3750},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174465,"byte_end":174471,"line_start":788,"line_end":788,"column_start":12,"column_end":18},"name":"BitPos","qualname":"::index::BitPos","value":"BitPos {  }","parent":null,"children":[{"krate":0,"index":3752},{"krate":0,"index":3753}],"decl_id":null,"docs":" An electrical position counter within a register element `R`.","sig":null,"attributes":[{"value":"* An electrical position counter within a register element `R`.\n\nThis type is a counter in the ring `0 .. R::BITS`, and serves to mark an\nelectrical address of a real bit. It is the shift distance in the expression\n`1 << n`. It is only produced by applying a [`BitOrder::at`] transformation to\nsome [`BitIdx`] produced by this library.\n\n# Type Parameters\n\n- `R`: The register element that this position governs.\n\n# Validity\n\nValues of this type are **required** to be in the range `0 .. R::BITS`. Any\nvalue not less than [`R::BITS`] makes the program invalid, and will likely cause\na crash. In addition, [`BitOrder::at`] has a list of requirements that its\nimplementations must uphold in order to make construction of this type\nsemantically correct in a program.\n\n# Construction\n\nThis type is publicly constructible. [`bitvec`] will only request its creation\nby calling [`BitOrder::at`], and has no sites that can publicly accept untrusted\nvalues.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder::at`]: crate::order::BitOrder::at\n[`R::BITS`]: crate::mem::BitMemory::BITS\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173238,"byte_end":174311,"line_start":756,"line_end":784,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174363,"byte_end":174383,"line_start":786,"line_end":786,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":868},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175050,"byte_end":175053,"line_start":812,"line_end":812,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPos<R>>::new","value":"pub fn new(u8) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good position within an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good position within an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174698,"byte_end":174772,"line_start":801,"line_end":801,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174774,"byte_end":174777,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174779,"byte_end":174795,"line_start":803,"line_end":803,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174797,"byte_end":174800,"line_start":804,"line_end":804,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174802,"byte_end":174877,"line_start":805,"line_end":805,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174879,"byte_end":174906,"line_start":806,"line_end":806,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174908,"byte_end":174911,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174913,"byte_end":174926,"line_start":808,"line_end":808,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174928,"byte_end":174931,"line_start":809,"line_end":809,"column_start":2,"column_end":5}},{"value":"/ This returns `Some(value)` when it is in the valid range `0 .. R::BITS`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174933,"byte_end":175009,"line_start":810,"line_end":810,"column_start":2,"column_end":78}},{"value":"/ and `None` when it is not.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175011,"byte_end":175041,"line_start":811,"line_end":811,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":869},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175671,"byte_end":175684,"line_start":836,"line_end":836,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitPos<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good position within an `R`\n register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good position within an `R`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175178,"byte_end":175245,"line_start":819,"line_end":819,"column_start":2,"column_end":69}},{"value":"/ register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175247,"byte_end":175260,"line_start":820,"line_end":820,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175262,"byte_end":175265,"line_start":821,"line_end":821,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175267,"byte_end":175283,"line_start":822,"line_end":822,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175285,"byte_end":175288,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ - `value`: The counter value to mark as a position. This must be in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175290,"byte_end":175365,"line_start":824,"line_end":824,"column_start":2,"column_end":77}},{"value":"/   range `0 .. R::BITS`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175367,"byte_end":175394,"line_start":825,"line_end":825,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175396,"byte_end":175399,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175401,"byte_end":175414,"line_start":827,"line_end":827,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175416,"byte_end":175419,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ This returns `value`, marked as a valid position.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175421,"byte_end":175474,"line_start":829,"line_end":829,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175476,"byte_end":175479,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175481,"byte_end":175493,"line_start":831,"line_end":831,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175495,"byte_end":175498,"line_start":832,"line_end":832,"column_start":2,"column_end":5}},{"value":"/ If the `value` is outside the valid range, then the program is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175500,"byte_end":175566,"line_start":833,"line_end":833,"column_start":2,"column_end":68}},{"value":"/ incorrect. Debug builds will panic; release builds do not inspect the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175568,"byte_end":175641,"line_start":834,"line_end":834,"column_start":2,"column_end":75}},{"value":"/ `value`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175643,"byte_end":175655,"line_start":835,"line_end":835,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":870},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175978,"byte_end":175983,"line_start":851,"line_end":851,"column_start":9,"column_end":14},"name":"value","qualname":"<BitPos<R>>::value","value":"pub fn value(Self) -> u8","parent":null,"children":[],"decl_id":null,"docs":" Removes the position wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the position wrapper, leaving the internal counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175874,"byte_end":175937,"line_start":849,"line_end":849,"column_start":2,"column_end":65}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":175939,"byte_end":175969,"line_start":850,"line_end":850,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":871},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176119,"byte_end":176125,"line_start":858,"line_end":858,"column_start":9,"column_end":15},"name":"select","qualname":"<BitPos<R>>::select","value":"pub fn select(Self) -> BitSel<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector corresponding to `self`.","sig":null,"attributes":[{"value":"/ Computes the bit selector corresponding to `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176014,"byte_end":176068,"line_start":855,"line_end":855,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176070,"byte_end":176073,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ This is always `1 << self.pos`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176075,"byte_end":176110,"line_start":857,"line_end":857,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176403,"byte_end":176407,"line_start":868,"line_end":868,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitPos<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes the bit selector for `self` as an accessor mask.","sig":null,"attributes":[{"value":"/ Computes the bit selector for `self` as an accessor mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176207,"byte_end":176268,"line_start":862,"line_end":862,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176270,"byte_end":176273,"line_start":863,"line_end":863,"column_start":2,"column_end":5}},{"value":"/ This is a type-cast over [`Self::select`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176275,"byte_end":176321,"line_start":864,"line_end":864,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176323,"byte_end":176326,"line_start":865,"line_end":865,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176328,"byte_end":176362,"line_start":866,"line_end":866,"column_start":2,"column_end":36}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176364,"byte_end":176394,"line_start":867,"line_end":867,"column_start":2,"column_end":32}}]},{"kind":"Struct","id":{"krate":0,"index":3783},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178332,"byte_end":178338,"line_start":941,"line_end":941,"column_start":12,"column_end":18},"name":"BitSel","qualname":"::index::BitSel","value":"BitSel {  }","parent":null,"children":[{"krate":0,"index":3785}],"decl_id":null,"docs":" A one-hot selection mask for a register element `R`.","sig":null,"attributes":[{"value":"* A one-hot selection mask for a register element `R`.\n\nThis type selects exactly one bit in a register. It is used to apply test and\nwrite operations into memory.\n\n# Type Parameters\n\n- `R`: The register element this selector governs.\n\n# Validity\n\nValues of this type are required to have exactly one bit set high, and all\nothers set low.\n\n# Construction\n\nThis type is only constructed from the [`BitPos::select`] and\n[`BitOrder::select`] functions. It is always equivalent to\n`1 << BitPos::unwrap`.\n\nThe chain of custody, from known-good [`BitIdx`] values, through proven-good\n[`BitOrder`] implementations, into [`BitPos`] and then `BitSel`, proves that\nvalues of this type are always correct to apply to underlying memory.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitOrder::select`]: crate::order::BitOrder::select\n[`BitPos`]: crate::index::BitPos\n[`BitPos::select`]: crate::index::BitPos::select\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177242,"byte_end":178178,"line_start":908,"line_end":937,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178230,"byte_end":178250,"line_start":939,"line_end":939,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":887},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178948,"byte_end":178951,"line_start":965,"line_end":965,"column_start":9,"column_end":12},"name":"new","qualname":"<BitSel<R>>::new","value":"pub fn new(R) -> Option<Self>","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as a known-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as a known-good selection of an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178451,"byte_end":178522,"line_start":951,"line_end":951,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178524,"byte_end":178527,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178529,"byte_end":178545,"line_start":953,"line_end":953,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178547,"byte_end":178550,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178552,"byte_end":178620,"line_start":955,"line_end":955,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178622,"byte_end":178625,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178627,"byte_end":178640,"line_start":957,"line_end":957,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178642,"byte_end":178645,"line_start":958,"line_end":958,"column_start":2,"column_end":5}},{"value":"/ If `value` is a power of two (exactly one bit set high and all others","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178647,"byte_end":178720,"line_start":959,"line_end":959,"column_start":2,"column_end":75}},{"value":"/ set low), it returns `Some` of a `BitSel` wrapping the `value`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178722,"byte_end":178789,"line_start":960,"line_end":960,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178791,"byte_end":178794,"line_start":961,"line_end":961,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::at`]: crate:order::BitOrder::at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178796,"byte_end":178843,"line_start":962,"line_end":962,"column_start":2,"column_end":49}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178845,"byte_end":178901,"line_start":963,"line_end":963,"column_start":2,"column_end":58}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178903,"byte_end":178939,"line_start":964,"line_end":964,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179720,"byte_end":179733,"line_start":992,"line_end":992,"column_start":16,"column_end":29},"name":"new_unchecked","qualname":"<BitSel<R>>::new_unchecked","value":"pub unsafe fn new_unchecked(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps a counter value as an assumed-good selection of an `R` register.","sig":null,"attributes":[{"value":"/ Wraps a counter value as an assumed-good selection of an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179082,"byte_end":179156,"line_start":972,"line_end":972,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179158,"byte_end":179161,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179163,"byte_end":179179,"line_start":974,"line_end":974,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179181,"byte_end":179184,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ - `value`: A one-hot selection mask of a bit in an `R` register.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179186,"byte_end":179254,"line_start":976,"line_end":976,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179256,"byte_end":179259,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179261,"byte_end":179274,"line_start":978,"line_end":978,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179276,"byte_end":179279,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ `value` wrapped in a `BitSel`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179281,"byte_end":179315,"line_start":980,"line_end":980,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179317,"byte_end":179320,"line_start":981,"line_end":981,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179322,"byte_end":179334,"line_start":982,"line_end":982,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179336,"byte_end":179339,"line_start":983,"line_end":983,"column_start":2,"column_end":5}},{"value":"/ `value` **must** be a power of two: one bit set high and all others set","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179341,"byte_end":179416,"line_start":984,"line_end":984,"column_start":2,"column_end":77}},{"value":"/ low. In debug builds, invalid `value`s cause a panic; release builds do","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179418,"byte_end":179493,"line_start":985,"line_end":985,"column_start":2,"column_end":77}},{"value":"/ not check the input.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179495,"byte_end":179519,"line_start":986,"line_end":986,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179521,"byte_end":179524,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ This function must only be called in a [`BitOrder::select`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179526,"byte_end":179589,"line_start":988,"line_end":988,"column_start":2,"column_end":65}},{"value":"/ implementation that is verified to be correct.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179591,"byte_end":179641,"line_start":989,"line_end":989,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179643,"byte_end":179646,"line_start":990,"line_end":990,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::select`]: crate::order::BitOrder::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179648,"byte_end":179704,"line_start":991,"line_end":991,"column_start":2,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":889},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180034,"byte_end":180039,"line_start":1004,"line_end":1004,"column_start":9,"column_end":14},"name":"value","qualname":"<BitSel<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the selector wrapper, leaving the internal counter.\n","sig":null,"attributes":[{"value":"/ Removes the selector wrapper, leaving the internal counter.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179930,"byte_end":179993,"line_start":1002,"line_end":1002,"column_start":2,"column_end":65}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":179995,"byte_end":180025,"line_start":1003,"line_end":1003,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180185,"byte_end":180189,"line_start":1011,"line_end":1011,"column_start":9,"column_end":13},"name":"mask","qualname":"<BitSel<R>>::mask","value":"pub fn mask(Self) -> BitMask<R>","parent":null,"children":[],"decl_id":null,"docs":" Computes a bit-mask for `self`. This is a type-cast.\n","sig":null,"attributes":[{"value":"/ Computes a bit-mask for `self`. This is a type-cast.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180069,"byte_end":180125,"line_start":1008,"line_end":1008,"column_start":2,"column_end":58}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180127,"byte_end":180144,"line_start":1009,"line_end":1009,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180146,"byte_end":180176,"line_start":1010,"line_end":1010,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":891},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180298,"byte_end":180307,"line_start":1016,"line_end":1016,"column_start":9,"column_end":18},"name":"range_all","qualname":"<BitSel<R>>::range_all","value":"pub fn range_all() -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Iterates over all possible selector values.\n","sig":null,"attributes":[{"value":"/ Iterates over all possible selector values.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180242,"byte_end":180289,"line_start":1015,"line_end":1015,"column_start":2,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":3815},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181664,"byte_end":181671,"line_start":1071,"line_end":1071,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::index::BitMask","value":"BitMask {  }","parent":null,"children":[{"krate":0,"index":3817}],"decl_id":null,"docs":" A multi-bit selection mask for a register `R`.","sig":null,"attributes":[{"value":"* A multi-bit selection mask for a register `R`.\n\nUnlike [`BitSel`], which enforces a strict one-hot mask encoding, this mask type\npermits any number of bits to be set or unset. This is used to accumulate\nselections for a batched operation on a register.\n\n# Type Parameters\n\n- `R`: The register element that this masks.\n\n# Construction\n\nThis can only be constructed by combining [`BitSel`] selection mask produced\nthrough the [`BitIdx`] and [`BitOrder`] chain of custody.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitSel`]: crate::index::BitSel\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180980,"byte_end":181561,"line_start":1050,"line_end":1068,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181562,"byte_end":181582,"line_start":1069,"line_end":1069,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":904},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181827,"byte_end":181830,"line_start":1082,"line_end":1082,"column_start":12,"column_end":15},"name":"ALL","qualname":"::index::BitMask::<R>::ALL","value":"Self","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" A full mask.\n","sig":null,"attributes":[{"value":"/ A full mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181799,"byte_end":181815,"line_start":1081,"line_end":1081,"column_start":2,"column_end":18}}]},{"kind":"Const","id":{"krate":0,"index":905},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181893,"byte_end":181897,"line_start":1084,"line_end":1084,"column_start":12,"column_end":16},"name":"ZERO","qualname":"::index::BitMask::<R>::ZERO","value":"Self","parent":{"krate":0,"index":902},"children":[],"decl_id":null,"docs":" An empty mask.\n","sig":null,"attributes":[{"value":"/ An empty mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181863,"byte_end":181881,"line_start":1083,"line_end":1083,"column_start":2,"column_end":20}}]},{"kind":"Method","id":{"krate":0,"index":906},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182636,"byte_end":182639,"line_start":1109,"line_end":1109,"column_start":9,"column_end":12},"name":"new","qualname":"<BitMask<R>>::new","value":"pub fn new(R) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Wraps any `R` value as a bit-mask.","sig":null,"attributes":[{"value":"/ Wraps any `R` value as a bit-mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181932,"byte_end":181970,"line_start":1086,"line_end":1086,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181972,"byte_end":181975,"line_start":1087,"line_end":1087,"column_start":2,"column_end":5}},{"value":"/ This constructor is provided to explicitly declare that an operation is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181977,"byte_end":182052,"line_start":1088,"line_end":1088,"column_start":2,"column_end":77}},{"value":"/ discarding the numeric value of an integer and instead using it only as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182054,"byte_end":182129,"line_start":1089,"line_end":1089,"column_start":2,"column_end":77}},{"value":"/ a bit-mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182131,"byte_end":182146,"line_start":1090,"line_end":1090,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182148,"byte_end":182151,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182153,"byte_end":182169,"line_start":1092,"line_end":1092,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182171,"byte_end":182174,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ - `value`: Some integer to use as a bit-mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182176,"byte_end":182225,"line_start":1094,"line_end":1094,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182227,"byte_end":182230,"line_start":1095,"line_end":1095,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182232,"byte_end":182245,"line_start":1096,"line_end":1096,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182247,"byte_end":182250,"line_start":1097,"line_end":1097,"column_start":2,"column_end":5}},{"value":"/ The `value` wrapped as a bit-mask, with its numeric context discarded.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182252,"byte_end":182326,"line_start":1098,"line_end":1098,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182328,"byte_end":182331,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ Prefer accumulating [`BitSel`] values using the `Sum` implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182333,"byte_end":182406,"line_start":1100,"line_end":1100,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182408,"byte_end":182411,"line_start":1101,"line_end":1101,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182413,"byte_end":182425,"line_start":1102,"line_end":1102,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182427,"byte_end":182430,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ The `value` must be computed from a set of valid bit positions in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182432,"byte_end":182505,"line_start":1104,"line_end":1104,"column_start":2,"column_end":75}},{"value":"/ caller’s context.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182507,"byte_end":182530,"line_start":1105,"line_end":1105,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182532,"byte_end":182535,"line_start":1106,"line_end":1106,"column_start":2,"column_end":5}},{"value":"/ [`BitOrder::mask`]: crate::order::BitOrder::mask","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182537,"byte_end":182589,"line_start":1107,"line_end":1107,"column_start":2,"column_end":54}},{"value":"/ [`BitSel`]: crate::index::BitSel","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182591,"byte_end":182627,"line_start":1108,"line_end":1108,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":907},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182786,"byte_end":182791,"line_start":1115,"line_end":1115,"column_start":9,"column_end":14},"name":"value","qualname":"<BitMask<R>>::value","value":"pub fn value(Self) -> R","parent":null,"children":[],"decl_id":null,"docs":" Removes the mask wrapper, leaving the internal value.\n","sig":null,"attributes":[{"value":"/ Removes the mask wrapper, leaving the internal value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182688,"byte_end":182745,"line_start":1113,"line_end":1113,"column_start":2,"column_end":59}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182747,"byte_end":182777,"line_start":1114,"line_end":1114,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":908},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183057,"byte_end":183061,"line_start":1129,"line_end":1129,"column_start":9,"column_end":13},"name":"test","qualname":"<BitMask<R>>::test","value":"pub fn test(&Self, BitSel<R>) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the mask contains a given selector bit.","sig":null,"attributes":[{"value":"/ Tests whether the mask contains a given selector bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182822,"byte_end":182879,"line_start":1119,"line_end":1119,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182881,"byte_end":182884,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182886,"byte_end":182902,"line_start":1121,"line_end":1121,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182904,"byte_end":182907,"line_start":1122,"line_end":1122,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182909,"byte_end":182922,"line_start":1123,"line_end":1123,"column_start":2,"column_end":15}},{"value":"/ - `sel`: Some single selection bit to test in `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182924,"byte_end":182981,"line_start":1124,"line_end":1124,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182983,"byte_end":182986,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":182988,"byte_end":183001,"line_start":1126,"line_end":1126,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183003,"byte_end":183006,"line_start":1127,"line_end":1127,"column_start":2,"column_end":5}},{"value":"/ Whether `self` is set high at `sel`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183008,"byte_end":183048,"line_start":1128,"line_end":1128,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":909},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183355,"byte_end":183361,"line_start":1143,"line_end":1143,"column_start":9,"column_end":15},"name":"insert","qualname":"<BitMask<R>>::insert","value":"pub fn insert(&mut Self, BitSel<R>)","parent":null,"children":[],"decl_id":null,"docs":" Inserts a selector bit into an existing mask.","sig":null,"attributes":[{"value":"/ Inserts a selector bit into an existing mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183133,"byte_end":183182,"line_start":1133,"line_end":1133,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183184,"byte_end":183187,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183189,"byte_end":183205,"line_start":1135,"line_end":1135,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183207,"byte_end":183210,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183212,"byte_end":183229,"line_start":1137,"line_end":1137,"column_start":2,"column_end":19}},{"value":"/ - `sel`: A selector bit to set in `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183231,"byte_end":183276,"line_start":1138,"line_end":1138,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183278,"byte_end":183281,"line_start":1139,"line_end":1139,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183283,"byte_end":183296,"line_start":1140,"line_end":1140,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183298,"byte_end":183301,"line_start":1141,"line_end":1141,"column_start":2,"column_end":5}},{"value":"/ The bit at `sel` is set high in `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183303,"byte_end":183346,"line_start":1142,"line_end":1142,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":910},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183639,"byte_end":183646,"line_start":1157,"line_end":1157,"column_start":9,"column_end":16},"name":"combine","qualname":"<BitMask<R>>::combine","value":"pub fn combine(Self, BitSel<R>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new mask with a selector bit activated.","sig":null,"attributes":[{"value":"/ Creates a new mask with a selector bit activated.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183420,"byte_end":183473,"line_start":1147,"line_end":1147,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183475,"byte_end":183478,"line_start":1148,"line_end":1148,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183480,"byte_end":183496,"line_start":1149,"line_end":1149,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183498,"byte_end":183501,"line_start":1150,"line_end":1150,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183503,"byte_end":183515,"line_start":1151,"line_end":1151,"column_start":2,"column_end":14}},{"value":"/ - `sel`: A selector bit to set in `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183517,"byte_end":183561,"line_start":1152,"line_end":1152,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183563,"byte_end":183566,"line_start":1153,"line_end":1153,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183568,"byte_end":183581,"line_start":1154,"line_end":1154,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183583,"byte_end":183586,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ A copy of `self`, with `sel` set high.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183588,"byte_end":183630,"line_start":1156,"line_end":1156,"column_start":2,"column_end":44}}]},{"kind":"Mod","id":{"krate":0,"index":936},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mem","qualname":"::mem","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","parent":null,"children":[{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":943},{"krate":0,"index":946},{"krate":0,"index":950},{"krate":0,"index":3847},{"krate":0,"index":3848},{"krate":0,"index":3849},{"krate":0,"index":3850},{"krate":0,"index":3851},{"krate":0,"index":3852},{"krate":0,"index":3853},{"krate":0,"index":3854},{"krate":0,"index":3855},{"krate":0,"index":3856},{"krate":0,"index":3857},{"krate":0,"index":3858},{"krate":0,"index":3859},{"krate":0,"index":3862},{"krate":0,"index":3865},{"krate":0,"index":955},{"krate":0,"index":3868},{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":965}],"decl_id":null,"docs":" Memory element descriptions.","sig":null,"attributes":[{"value":"* Memory element descriptions.\n\nThis module describes memory integers and processor registers used to hold and\nmanipulate [`bitvec`] data buffers.\n\nThe [`BitMemory`] trait adds descriptive information to the unsigned integers\navailable in the language.\n\nThe [`BitRegister`] trait marks the unsigned integers that correspond to\nprocessor registers, and can therefore be used for buffer control. The integers\nthat are `BitMemory` but not `BitRegister` can be composed out of register\nvalues, but are unable to be used in buffer type parameters.\n\n[`BitMemory`]: crate::mem::BitMemory\n[`BitRegister`]: crate::mem::BitRegister\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":194489,"byte_end":195134,"line_start":1,"line_end":17,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":946},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195639,"byte_end":195648,"line_start":34,"line_end":34,"column_start":11,"column_end":20},"name":"BitMemory","qualname":"::mem::BitMemory","value":"BitMemory: IsUnsigned + seal::Sealed","parent":null,"children":[{"krate":0,"index":947},{"krate":0,"index":948},{"krate":0,"index":949}],"decl_id":null,"docs":" Description of an integer memory element.","sig":null,"attributes":[{"value":"* Description of an integer memory element.\n\nThis trait provides information used to describe integer-typed regions of memory\nand enables other parts of the project to adequately describe the memory bus.\nThis trait has **no** bearing on the processor instructions or registers used to\ninteract with memory. It solely describes integers that can exist on a system.\n\nThis trait cannot be implemented outside this crate.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195205,"byte_end":195628,"line_start":25,"line_end":33,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":947},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196002,"byte_end":196006,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"BITS","qualname":"::mem::BitMemory::BITS","value":"u8","parent":{"krate":0,"index":946},"children":[],"decl_id":null,"docs":" The bit width of the integer.","sig":null,"attributes":[{"value":"/ The bit width of the integer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195679,"byte_end":195712,"line_start":35,"line_end":35,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195714,"byte_end":195717,"line_start":36,"line_end":36,"column_start":2,"column_end":5}},{"value":"/ [`mem::size_of`] returns the size in bytes, and bytes are always eight","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195719,"byte_end":195793,"line_start":37,"line_end":37,"column_start":2,"column_end":76}},{"value":"/ bits wide on architectures that Rust targets.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195795,"byte_end":195844,"line_start":38,"line_end":38,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195846,"byte_end":195849,"line_start":39,"line_end":39,"column_start":2,"column_end":5}},{"value":"/ Issue #76904 will place this constant on the fundamental integers","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195851,"byte_end":195920,"line_start":40,"line_end":40,"column_start":2,"column_end":71}},{"value":"/ directly, as a `u32`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195922,"byte_end":195947,"line_start":41,"line_end":41,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195949,"byte_end":195952,"line_start":42,"line_end":42,"column_start":2,"column_end":5}},{"value":"/ [`mem::size_of`]: core::mem::size_of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195954,"byte_end":195994,"line_start":43,"line_end":43,"column_start":2,"column_end":42}}]},{"kind":"Const","id":{"krate":0,"index":948},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196132,"byte_end":196136,"line_start":47,"line_end":47,"column_start":8,"column_end":12},"name":"INDX","qualname":"::mem::BitMemory::INDX","value":"u8","parent":{"krate":0,"index":946},"children":[],"decl_id":null,"docs":" The number of bits required to store an index in the range `0 .. BITS`.\n","sig":null,"attributes":[{"value":"/ The number of bits required to store an index in the range `0 .. BITS`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196049,"byte_end":196124,"line_start":46,"line_end":46,"column_start":2,"column_end":77}}]},{"kind":"Const","id":{"krate":0,"index":949},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196338,"byte_end":196342,"line_start":51,"line_end":51,"column_start":8,"column_end":12},"name":"MASK","qualname":"::mem::BitMemory::MASK","value":"u8","parent":{"krate":0,"index":946},"children":[],"decl_id":null,"docs":" A mask over all bits that can be used as an index within the element.\n This is the value with the least significant `INDX`-many bits set high.\n","sig":null,"attributes":[{"value":"/ A mask over all bits that can be used as an index within the element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196180,"byte_end":196253,"line_start":49,"line_end":49,"column_start":2,"column_end":75}},{"value":"/ This is the value with the least significant `INDX`-many bits set high.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196255,"byte_end":196330,"line_start":50,"line_end":50,"column_start":2,"column_end":77}}]},{"kind":"Trait","id":{"krate":0,"index":950},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196667,"byte_end":196678,"line_start":61,"line_end":61,"column_start":11,"column_end":22},"name":"BitRegister","qualname":"::mem::BitRegister","value":"BitRegister: BitMemory + BitOps","parent":null,"children":[{"krate":0,"index":951},{"krate":0,"index":952}],"decl_id":null,"docs":" Description of a processor register.","sig":null,"attributes":[{"value":"* Description of a processor register.\n\nThis trait provides information used to describe processor registers. It only\nneeds to contain constant values for `1` and `!0`; the rest of its information\nis contained in the presence or absence of its implementation on particular\nintegers.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196368,"byte_end":196656,"line_start":54,"line_end":60,"column_start":1,"column_end":4}}]},{"kind":"Const","id":{"krate":0,"index":951},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196730,"byte_end":196733,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"ONE","qualname":"::mem::BitRegister::ONE","value":"Self","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" The literal `1`.\n","sig":null,"attributes":[{"value":"/ The literal `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196702,"byte_end":196722,"line_start":62,"line_end":62,"column_start":2,"column_end":22}}]},{"kind":"Const","id":{"krate":0,"index":952},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196771,"byte_end":196774,"line_start":65,"line_end":65,"column_start":8,"column_end":11},"name":"ALL","qualname":"::mem::BitRegister::ALL","value":"Self","parent":{"krate":0,"index":950},"children":[],"decl_id":null,"docs":" The literal `!0`.\n","sig":null,"attributes":[{"value":"/ The literal `!0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196742,"byte_end":196763,"line_start":64,"line_end":64,"column_start":2,"column_end":23}}]},{"kind":"Function","id":{"krate":0,"index":958},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":197805,"byte_end":197809,"line_start":115,"line_end":115,"column_start":14,"column_end":18},"name":"elts","qualname":"::mem::elts","value":"pub const fn elts<T>(usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the number of elements required to store some number of bits.","sig":null,"attributes":[{"value":"* Computes the number of elements required to store some number of bits.\n\n# Parameters\n\n- `bits`: The number of bits to store in a `[T]` array.\n\n# Returns\n\nThe number of elements `T` required to store `bits`.\n\nAs this is a const function, when `bits` is a constant expression, this can be\nused to compute the size of an array type `[T; elts(bits)]`.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":197421,"byte_end":197776,"line_start":101,"line_end":113,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":966},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":199085,"byte_end":199091,"line_start":165,"line_end":165,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mem::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":968},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200216,"byte_end":200226,"line_start":8,"line_end":8,"column_start":11,"column_end":21},"name":"Mutability","qualname":"::mutability::Mutability","value":"Mutability: 'static + seal::Sealed","parent":null,"children":[],"decl_id":null,"docs":" A marker trait for distinguishing `*const` vs `*mut` when working with\n structs, rather than raw pointers.\n","sig":null,"attributes":[{"value":"/ A marker trait for distinguishing `*const` vs `*mut` when working with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200092,"byte_end":200166,"line_start":6,"line_end":6,"column_start":1,"column_end":75}},{"value":"/ structs, rather than raw pointers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200167,"byte_end":200205,"line_start":7,"line_end":7,"column_start":1,"column_end":39}}]},{"kind":"Struct","id":{"krate":0,"index":3871},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200354,"byte_end":200359,"line_start":12,"line_end":12,"column_start":12,"column_end":17},"name":"Const","qualname":"::mutability::Const","value":"","parent":null,"children":[],"decl_id":null,"docs":" An immutable pointer.\n","sig":null,"attributes":[{"value":"/ An immutable pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200255,"byte_end":200280,"line_start":10,"line_end":10,"column_start":1,"column_end":26}}]},{"kind":"Struct","id":{"krate":0,"index":3888},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200677,"byte_end":200680,"line_start":24,"line_end":24,"column_start":12,"column_end":15},"name":"Mut","qualname":"::mutability::Mut","value":"","parent":null,"children":[],"decl_id":null,"docs":" A mutable pointer. Contexts with a `Mutable` may lower to `Immutable`, then\n re-raise to `Mutable`; contexts with `Immutable` may not raise to `Mutable`\n on their own.\n","sig":null,"attributes":[{"value":"/ A mutable pointer. Contexts with a `Mutable` may lower to `Immutable`, then","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200426,"byte_end":200505,"line_start":20,"line_end":20,"column_start":1,"column_end":80}},{"value":"/ re-raise to `Mutable`; contexts with `Immutable` may not raise to `Mutable`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200506,"byte_end":200585,"line_start":21,"line_end":21,"column_start":1,"column_end":80}},{"value":"/ on their own.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200586,"byte_end":200603,"line_start":22,"line_end":22,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":974},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200796,"byte_end":200802,"line_start":35,"line_end":35,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::mutability::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":975},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"order","qualname":"::order","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","parent":null,"children":[{"krate":0,"index":976},{"krate":0,"index":977},{"krate":0,"index":978},{"krate":0,"index":981},{"krate":0,"index":984},{"krate":0,"index":987},{"krate":0,"index":990},{"krate":0,"index":993},{"krate":0,"index":996},{"krate":0,"index":3905},{"krate":0,"index":3907},{"krate":0,"index":3909},{"krate":0,"index":3910},{"krate":0,"index":3912},{"krate":0,"index":3914},{"krate":0,"index":3915},{"krate":0,"index":3917},{"krate":0,"index":3920},{"krate":0,"index":3922},{"krate":0,"index":3923},{"krate":0,"index":3925},{"krate":0,"index":1005},{"krate":0,"index":3927},{"krate":0,"index":3929},{"krate":0,"index":3931},{"krate":0,"index":3932},{"krate":0,"index":3934},{"krate":0,"index":3936},{"krate":0,"index":3937},{"krate":0,"index":3939},{"krate":0,"index":3942},{"krate":0,"index":3944},{"krate":0,"index":3945},{"krate":0,"index":3947},{"krate":0,"index":1014},{"krate":0,"index":1023},{"krate":0,"index":1024},{"krate":0,"index":1026},{"krate":0,"index":1028}],"decl_id":null,"docs":" Ordering of bits within register elements.","sig":null,"attributes":[{"value":"* Ordering of bits within register elements.\n\n[`bitvec`] data structures are parametric over any ordering of bits within a\nregister type. The [`BitOrder`] trait translates a cursor position (indicated by\nthe [`BitIdx`] type) to an electrical position (indicated by the [`BitPos`]\ntype) within that register, thereby defining the order of traversal over a\nregister.\n\nImplementors of [`BitOrder`] are required to satisfy a set of requirements on\ntheir transform function, and must have identical behavior to the\ndefault-provided trait functions if they choose to override them for\nperformance. These can all be proven by use of the [`verify`] or\n[`verify_for_type`] functions in the implementor’s test suite.\n\n[`BitOrder`] is a stateless trait, and implementors should be zero-sized types.\n\n[`BitIdx`]: crate::index::BitIdx\n[`BitOrder`]: crate::order::BitOrder\n[`BitPos`]: crate::index::BitPos\n[`bitvec`]: crate\n[`verify`]: crate::order::verify\n[`verify_for_type`]: crate::order::verify_for_type\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":200809,"byte_end":201810,"line_start":1,"line_end":23,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":996},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204165,"byte_end":204173,"line_start":105,"line_end":105,"column_start":18,"column_end":26},"name":"BitOrder","qualname":"::order::BitOrder","value":"BitOrder: 'static","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":999},{"krate":0,"index":1001}],"decl_id":null,"docs":" An ordering over a register.","sig":null,"attributes":[{"value":"* An ordering over a register.\n\n# Usage\n\n[`bitvec`] structures store and operate on semantic index counters, not\nelectrical bit positions. The [`BitOrder::at`] function takes a semantic\nordering, [`BitIdx`], and produces a corresponding electrical position,\n[`BitPos`].\n\n# Safety\n\nIf your implementation violates any of the requirements on these functions, then\nthe program will become incorrect, and have unspecified behavior. The best-case\noutcome is that operations relying on your implementation will crash the\nprogram; the worst-case is that memory access will silently become corrupt.\n\nYou are responsible for adhering to the requirements of these functions. There\nare verification functions that you can use in your test suite; however, it is\nnot yet possible to prove correctness at compile-time.\n\nThis is an `unsafe trait` to implement because you are responsible for upholding\nthe stated requirements.\n\nThe implementations of `BitOrder` are trusted to drive safe code, and once data\nleaves a `BitOrder` implementation, it is considered safe to use as the basis\nfor interaction with memory.\n\n# Verification\n\nThe [`verify`] and [`verify_for_type`] functions are available for your test\nsuites. They ensure that a `BitOrder` implementation satisfies the requirements\nwhen invoked for a given register type.\n\n# Examples\n\nImplementations are not required to remain contiguous over a register. This\nexample swizzles the high and low halves of each byte, but any translation is\nvalid as long as it satisfies the strict one-to-one requirement of\nindex-to-position.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":201914,"byte_end":203486,"line_start":36,"line_end":75,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203487,"byte_end":203490,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203491,"byte_end":203502,"line_start":77,"line_end":77,"column_start":1,"column_end":12}},{"value":"/ use bitvec::{","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203503,"byte_end":203520,"line_start":78,"line_end":78,"column_start":1,"column_end":18}},{"value":"/   prelude::BitOrder,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203521,"byte_end":203545,"line_start":79,"line_end":79,"column_start":1,"column_end":25}},{"value":"/   // Additional symbols:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203546,"byte_end":203574,"line_start":80,"line_end":80,"column_start":1,"column_end":29}},{"value":"/   index::{BitIdx, BitPos},","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203575,"byte_end":203605,"line_start":81,"line_end":81,"column_start":1,"column_end":31}},{"value":"/   mem::BitRegister,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203606,"byte_end":203629,"line_start":82,"line_end":82,"column_start":1,"column_end":24}},{"value":"/ };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203630,"byte_end":203636,"line_start":83,"line_end":83,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203637,"byte_end":203640,"line_start":84,"line_end":84,"column_start":1,"column_end":4}},{"value":"/ pub struct HiLo;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203641,"byte_end":203661,"line_start":85,"line_end":85,"column_start":1,"column_end":21}},{"value":"/ unsafe impl BitOrder for HiLo {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203662,"byte_end":203697,"line_start":86,"line_end":86,"column_start":1,"column_end":36}},{"value":"/   fn at<R: BitRegister>(idx: BitIdx<R>) -> BitPos<R> {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203698,"byte_end":203756,"line_start":87,"line_end":87,"column_start":1,"column_end":59}},{"value":"/     BitPos::new(idx.value() ^ 4).unwrap()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203757,"byte_end":203802,"line_start":88,"line_end":88,"column_start":1,"column_end":46}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203803,"byte_end":203810,"line_start":89,"line_end":89,"column_start":1,"column_end":8}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203811,"byte_end":203816,"line_start":90,"line_end":90,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203817,"byte_end":203820,"line_start":91,"line_end":91,"column_start":1,"column_end":4}},{"value":"/ #[test]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203821,"byte_end":203832,"line_start":92,"line_end":92,"column_start":1,"column_end":12}},{"value":"/ #[cfg(test)]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203833,"byte_end":203849,"line_start":93,"line_end":93,"column_start":1,"column_end":17}},{"value":"/ fn prove_hilo() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203850,"byte_end":203871,"line_start":94,"line_end":94,"column_start":1,"column_end":22}},{"value":"/   bitvec::order::verify::<HiLo>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203872,"byte_end":203910,"line_start":95,"line_end":95,"column_start":1,"column_end":39}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203911,"byte_end":203916,"line_start":96,"line_end":96,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203917,"byte_end":203924,"line_start":97,"line_end":97,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203925,"byte_end":203928,"line_start":98,"line_end":98,"column_start":1,"column_end":4}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203929,"byte_end":203965,"line_start":99,"line_end":99,"column_start":1,"column_end":37}},{"value":"/ [`BitOrder::at`]: Self::at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203966,"byte_end":203996,"line_start":100,"line_end":100,"column_start":1,"column_end":31}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":203997,"byte_end":204033,"line_start":101,"line_end":101,"column_start":1,"column_end":37}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204034,"byte_end":204055,"line_start":102,"line_end":102,"column_start":1,"column_end":22}},{"value":"/ [`verify`]: crate::order::verify","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204056,"byte_end":204092,"line_start":103,"line_end":103,"column_start":1,"column_end":37}},{"value":"/ [`verify_for_type`]: crate::order::verify_for_type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204093,"byte_end":204147,"line_start":104,"line_end":104,"column_start":1,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206557,"byte_end":206559,"line_start":169,"line_end":169,"column_start":5,"column_end":7},"name":"at","qualname":"::order::BitOrder::at","value":"pub fn at<R>(BitIdx<R>) -> BitPos<R> where R: BitRegister","parent":{"krate":0,"index":996},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into an electrical bit position.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into an electrical bit position.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204186,"byte_end":204252,"line_start":106,"line_end":106,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204254,"byte_end":204257,"line_start":107,"line_end":107,"column_start":2,"column_end":5}},{"value":"/ This function is the basis of the trait, and must adhere to a number of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204259,"byte_end":204334,"line_start":108,"line_end":108,"column_start":2,"column_end":77}},{"value":"/ requirements in order for an implementation to be correct.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204336,"byte_end":204398,"line_start":109,"line_end":109,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204400,"byte_end":204403,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204405,"byte_end":204426,"line_start":111,"line_end":111,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204428,"byte_end":204431,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and position govern.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204433,"byte_end":204497,"line_start":113,"line_end":113,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204499,"byte_end":204502,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204504,"byte_end":204520,"line_start":115,"line_end":115,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204522,"byte_end":204525,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204527,"byte_end":204592,"line_start":117,"line_end":117,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204594,"byte_end":204597,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204599,"byte_end":204612,"line_start":119,"line_end":119,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204614,"byte_end":204617,"line_start":120,"line_end":120,"column_start":2,"column_end":5}},{"value":"/ The electrical position of the indexed bit within the register `R`. See","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204619,"byte_end":204694,"line_start":121,"line_end":121,"column_start":2,"column_end":77}},{"value":"/ the [`BitPos`] documentation for what electrical positions are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204696,"byte_end":204762,"line_start":122,"line_end":122,"column_start":2,"column_end":68}},{"value":"/ considered to mean.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204764,"byte_end":204787,"line_start":123,"line_end":123,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204789,"byte_end":204792,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204794,"byte_end":204812,"line_start":125,"line_end":125,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204814,"byte_end":204817,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ This function must satisfy the following requirements for all possible","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204819,"byte_end":204893,"line_start":127,"line_end":127,"column_start":2,"column_end":76}},{"value":"/ input and output values, for all possible `R` type parameters:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204895,"byte_end":204961,"line_start":128,"line_end":128,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204963,"byte_end":204966,"line_start":129,"line_end":129,"column_start":2,"column_end":5}},{"value":"/ ## Totality","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204968,"byte_end":204983,"line_start":130,"line_end":130,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204985,"byte_end":204988,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ This function must be able to accept every input in the range","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":204990,"byte_end":205055,"line_start":132,"line_end":132,"column_start":2,"column_end":67}},{"value":"/ [`BitIdx::ZERO`] to [`BitIdx::LAST`], and produce a value in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205057,"byte_end":205130,"line_start":133,"line_end":133,"column_start":2,"column_end":75}},{"value":"/ range as a [`BitPos`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205132,"byte_end":205158,"line_start":134,"line_end":134,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205160,"byte_end":205163,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ## Bijection","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205165,"byte_end":205181,"line_start":136,"line_end":136,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205183,"byte_end":205186,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ There must be an exactly one-to-one correspondence between input value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205188,"byte_end":205262,"line_start":138,"line_end":138,"column_start":2,"column_end":76}},{"value":"/ and output value. No input index may choose its output from a set of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205264,"byte_end":205336,"line_start":139,"line_end":139,"column_start":2,"column_end":74}},{"value":"/ more than one position, and no output position may be produced by more","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205338,"byte_end":205412,"line_start":140,"line_end":140,"column_start":2,"column_end":76}},{"value":"/ than one input index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205414,"byte_end":205439,"line_start":141,"line_end":141,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205441,"byte_end":205444,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ ## Purity","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205446,"byte_end":205459,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205461,"byte_end":205464,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ The translation from index to position must be consistent for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205466,"byte_end":205535,"line_start":145,"line_end":145,"column_start":2,"column_end":71}},{"value":"/ lifetime of *at least* all data structures in the program. This function","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205537,"byte_end":205613,"line_start":146,"line_end":146,"column_start":2,"column_end":78}},{"value":"/ *may* refer to global state, but that state **must** be immutable while","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205615,"byte_end":205690,"line_start":147,"line_end":147,"column_start":2,"column_end":77}},{"value":"/ any [`bitvec`] data structures exist, and must not be used to violate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205692,"byte_end":205765,"line_start":148,"line_end":148,"column_start":2,"column_end":75}},{"value":"/ the totality or bijection requirements.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205767,"byte_end":205810,"line_start":149,"line_end":149,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205812,"byte_end":205815,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ ## Output Validity","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205817,"byte_end":205839,"line_start":151,"line_end":151,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205841,"byte_end":205844,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ The produced [`BitPos`] must be within the valid range of that type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205846,"byte_end":205918,"line_start":153,"line_end":153,"column_start":2,"column_end":74}},{"value":"/ Call sites of this function will not take any steps to constrain or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205920,"byte_end":205991,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/ check the return value. If you use `unsafe` code to produce an invalid","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":205993,"byte_end":206067,"line_start":155,"line_end":155,"column_start":2,"column_end":76}},{"value":"/ `BitPos`, the program is incorrect, and will likely crash.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206069,"byte_end":206131,"line_start":156,"line_end":156,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206133,"byte_end":206136,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ # Usage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206138,"byte_end":206149,"line_start":158,"line_end":158,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206151,"byte_end":206154,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ This function is only ever called with input values in the valid","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206156,"byte_end":206224,"line_start":160,"line_end":160,"column_start":2,"column_end":70}},{"value":"/ [`BitIdx`] range. Implementors are not required to consider any values","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206226,"byte_end":206300,"line_start":161,"line_end":161,"column_start":2,"column_end":76}},{"value":"/ outside this range in their function body.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206302,"byte_end":206348,"line_start":162,"line_end":162,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206350,"byte_end":206353,"line_start":163,"line_end":163,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206355,"byte_end":206391,"line_start":164,"line_end":164,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx::LAST`]: crate::index::BitIdx::LAST","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206393,"byte_end":206441,"line_start":165,"line_end":165,"column_start":2,"column_end":50}},{"value":"/ [`BitIdx::ZERO`]: crate::index::BitIdx::ZERO","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206443,"byte_end":206491,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ [`BitPos`]: crate::index::BitPos","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206493,"byte_end":206529,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"/ [`bitvec`]: crate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206531,"byte_end":206552,"line_start":168,"line_end":168,"column_start":2,"column_end":23}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207913,"byte_end":207919,"line_start":206,"line_end":206,"column_start":5,"column_end":11},"name":"select","qualname":"::order::BitOrder::select","value":"pub fn select<R>(BitIdx<R>) -> BitSel<R> where R: BitRegister","parent":{"krate":0,"index":996},"children":[],"decl_id":null,"docs":" Converts a semantic bit index into a one-hot selector mask.","sig":null,"attributes":[{"value":"/ Converts a semantic bit index into a one-hot selector mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206619,"byte_end":206682,"line_start":172,"line_end":172,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206684,"byte_end":206687,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ This is an optional function; a default implementation is provided for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206689,"byte_end":206763,"line_start":174,"line_end":174,"column_start":2,"column_end":76}},{"value":"/ you. If you choose to override it, your implementation **must** retain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206765,"byte_end":206839,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ the behavior of the default implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206841,"byte_end":206888,"line_start":176,"line_end":176,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206890,"byte_end":206893,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ The default implementation calls [`Self::at`] to convert the index into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206895,"byte_end":206970,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ a position, then turns that position into a selector mask with the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":206972,"byte_end":207042,"line_start":179,"line_end":179,"column_start":2,"column_end":72}},{"value":"/ expression `1 << pos`. `BitOrder` implementations may choose to provide","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207044,"byte_end":207119,"line_start":180,"line_end":180,"column_start":2,"column_end":77}},{"value":"/ a faster mask production here, as long as they match this behavior.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207121,"byte_end":207192,"line_start":181,"line_end":181,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207194,"byte_end":207197,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207199,"byte_end":207220,"line_start":183,"line_end":183,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207222,"byte_end":207225,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type that the index and selector govern.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207227,"byte_end":207291,"line_start":185,"line_end":185,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207293,"byte_end":207296,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207298,"byte_end":207314,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207316,"byte_end":207319,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `index`: The semantic index of a bit within a register `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207321,"byte_end":207386,"line_start":189,"line_end":189,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207388,"byte_end":207391,"line_start":190,"line_end":190,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207393,"byte_end":207406,"line_start":191,"line_end":191,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207408,"byte_end":207411,"line_start":192,"line_end":192,"column_start":2,"column_end":5}},{"value":"/ A one-hot selector mask for the bit indicated by the index value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207413,"byte_end":207482,"line_start":193,"line_end":193,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207484,"byte_end":207487,"line_start":194,"line_end":194,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207489,"byte_end":207507,"line_start":195,"line_end":195,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207509,"byte_end":207512,"line_start":196,"line_end":196,"column_start":2,"column_end":5}},{"value":"/ A one-hot encoding means that there is exactly one bit set in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207514,"byte_end":207583,"line_start":197,"line_end":197,"column_start":2,"column_end":71}},{"value":"/ produced value. It must be equivalent to `1 << Self::at::<R>(index)`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207585,"byte_end":207658,"line_start":198,"line_end":198,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207660,"byte_end":207663,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ As with `at`, this function must produce a unique mapping from each","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207665,"byte_end":207736,"line_start":200,"line_end":200,"column_start":2,"column_end":73}},{"value":"/ legal index in the [`BitIdx`] domain to a one-hot value of `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207738,"byte_end":207805,"line_start":201,"line_end":201,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207807,"byte_end":207810,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207812,"byte_end":207848,"line_start":203,"line_end":203,"column_start":2,"column_end":38}},{"value":"/ [`Self::at`]: Self::at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207850,"byte_end":207876,"line_start":204,"line_end":204,"column_start":2,"column_end":28}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":207878,"byte_end":207908,"line_start":205,"line_end":205,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208948,"byte_end":208952,"line_start":243,"line_end":243,"column_start":5,"column_end":9},"name":"mask","qualname":"::order::BitOrder::mask","value":"pub fn mask<R, impl Into<Option<BitIdx<R>>>: Into<Option<BitIdx<R>>>,\n            impl Into<Option<BitTail<R>>>: Into<Option<BitTail<R>>>>(impl Into<Option<BitIdx<R>>>,\n                                                                     impl Into<Option<BitTail<R>>>)\n-> BitMask<R> where R: BitRegister","parent":{"krate":0,"index":996},"children":[],"decl_id":null,"docs":" Constructs a multiple-bit selector mask for batched operations on a\n register `R`.","sig":null,"attributes":[{"value":"/ Constructs a multiple-bit selector mask for batched operations on a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208015,"byte_end":208086,"line_start":211,"line_end":211,"column_start":2,"column_end":73}},{"value":"/ register `R`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208088,"byte_end":208105,"line_start":212,"line_end":212,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208107,"byte_end":208110,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ The default implementation of this function traverses the index range,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208112,"byte_end":208186,"line_start":214,"line_end":214,"column_start":2,"column_end":76}},{"value":"/ converting each index into a single-bit selector with [`Self::select`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208188,"byte_end":208262,"line_start":215,"line_end":215,"column_start":2,"column_end":76}},{"value":"/ and accumulating into a combined register value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208264,"byte_end":208316,"line_start":216,"line_end":216,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208318,"byte_end":208321,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208323,"byte_end":208344,"line_start":218,"line_end":218,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208346,"byte_end":208349,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ - `R`: The register type for which the mask is built.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208351,"byte_end":208408,"line_start":220,"line_end":220,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208410,"byte_end":208413,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208415,"byte_end":208431,"line_start":222,"line_end":222,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208433,"byte_end":208436,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ - `from`: The inclusive starting index for the mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208438,"byte_end":208494,"line_start":224,"line_end":224,"column_start":2,"column_end":58}},{"value":"/ - `upto`: The exclusive ending index for the mask.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208496,"byte_end":208550,"line_start":225,"line_end":225,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208552,"byte_end":208555,"line_start":226,"line_end":226,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208557,"byte_end":208570,"line_start":227,"line_end":227,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208572,"byte_end":208575,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ A bit-mask with all bits corresponding to the input index range set high","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208577,"byte_end":208653,"line_start":229,"line_end":229,"column_start":2,"column_end":78}},{"value":"/ and all others set low.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208655,"byte_end":208682,"line_start":230,"line_end":230,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208684,"byte_end":208687,"line_start":231,"line_end":231,"column_start":2,"column_end":5}},{"value":"/ # Requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208689,"byte_end":208707,"line_start":232,"line_end":232,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208709,"byte_end":208712,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ This function must always be equivalent to this expression:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208714,"byte_end":208777,"line_start":234,"line_end":234,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208779,"byte_end":208782,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ ```rust,ignore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208784,"byte_end":208802,"line_start":236,"line_end":236,"column_start":2,"column_end":20}},{"value":"/ (from .. upto)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208804,"byte_end":208822,"line_start":237,"line_end":237,"column_start":2,"column_end":20}},{"value":"/   .map(Self::select::<R>)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208824,"byte_end":208853,"line_start":238,"line_end":238,"column_start":2,"column_end":31}},{"value":"/   .fold(0, |mask, sel| mask | sel)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208855,"byte_end":208893,"line_start":239,"line_end":239,"column_start":2,"column_end":40}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208895,"byte_end":208902,"line_start":240,"line_end":240,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208904,"byte_end":208907,"line_start":241,"line_end":241,"column_start":2,"column_end":5}},{"value":"/ [`Self::select`]: Self::select","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":208909,"byte_end":208943,"line_start":242,"line_end":242,"column_start":2,"column_end":36}}]},{"kind":"Struct","id":{"krate":0,"index":3905},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209543,"byte_end":209547,"line_start":262,"line_end":262,"column_start":12,"column_end":16},"name":"Lsb0","qualname":"::order::Lsb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the least significant bit to the most significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the least significant bit to the most significant.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209374,"byte_end":209454,"line_start":260,"line_end":260,"column_start":1,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":3927},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210754,"byte_end":210758,"line_start":305,"line_end":305,"column_start":12,"column_end":16},"name":"Msb0","qualname":"::order::Msb0","value":"","parent":null,"children":[],"decl_id":null,"docs":" Traverses a register from the most significant bit to the least significant.\n","sig":null,"attributes":[{"value":"/ Traverses a register from the most significant bit to the least significant.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210585,"byte_end":210665,"line_start":303,"line_end":303,"column_start":1,"column_end":81}}]},{"kind":"Function","id":{"krate":0,"index":1026},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213491,"byte_end":213497,"line_start":401,"line_end":401,"column_start":8,"column_end":14},"name":"verify","qualname":"::order::verify","value":"pub fn verify<O>(bool) where O: BitOrder","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules.\n\nThis function checks some [`BitOrder`] implementation’s behavior on each of the\n[`BitRegister`] types it must handle, and reports any violation of the rules\nthat it detects.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor `O`.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":212876,"byte_end":213483,"line_start":378,"line_end":400,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":1028},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":214635,"byte_end":214650,"line_start":439,"line_end":439,"column_start":8,"column_end":23},"name":"verify_for_type","qualname":"::order::verify_for_type","value":"pub fn verify_for_type<O, R>(bool) where O: BitOrder, R: BitRegister","parent":null,"children":[],"decl_id":null,"docs":" Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.","sig":null,"attributes":[{"value":"* Verifies a [`BitOrder`] implementation’s adherence to the stated rules, for\none register type.\n\nThis function checks some [`BitOrder`] implementation against only one of the\n[`BitRegister`] types that it will encounter. This is useful if you are\nimplementing an ordering that only needs to be concerned with a subset of the\ntypes, and you know that you will never use it with the types it does not\nsupport.\n\n# Type Parameters\n\n- `O`: The [`BitOrder`] implementation to test.\n- `R`: The [`BitRegister`] type for which to test `O`.\n\n# Parameters\n\n- `verbose`: Sets whether the test should print diagnostic information to\n  `stdout`.\n\n# Panics\n\nThis panics if it detects any violation of the [`BitOrder`] implementation rules\nfor the combination of input types and index values.\n\n[`BitOrder`]: crate::order::BitOrder\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":213763,"byte_end":214627,"line_start":412,"line_end":438,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1034},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"prelude","qualname":"::prelude","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","parent":null,"children":[{"krate":0,"index":1035},{"krate":0,"index":1036},{"krate":0,"index":1039},{"krate":0,"index":1042},{"krate":0,"index":1045},{"krate":0,"index":1048},{"krate":0,"index":1049},{"krate":0,"index":1052},{"krate":0,"index":1053},{"krate":0,"index":1055},{"krate":0,"index":1056},{"krate":0,"index":1058},{"krate":0,"index":1059},{"krate":0,"index":1061},{"krate":0,"index":1062},{"krate":0,"index":1065},{"krate":0,"index":1068},{"krate":0,"index":1071},{"krate":0,"index":1074},{"krate":0,"index":1077}],"decl_id":null,"docs":" [`bitvec`] symbol export.","sig":null,"attributes":[{"value":"* [`bitvec`] symbol export.\n\nThis module collects the general public API into a single spot for inclusion, as\n`use bitvec::prelude::*;`, without polluting the root namespace of the crate.\n\n[`bitvec`]: crate\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/prelude.rs","byte_start":218058,"byte_end":218270,"line_start":1,"line_end":7,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1080},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ptr","qualname":"::ptr","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","parent":null,"children":[{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1085},{"krate":0,"index":1088},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1093},{"krate":0,"index":1095},{"krate":0,"index":1098},{"krate":0,"index":1252},{"krate":0,"index":1446},{"krate":0,"index":1598},{"krate":0,"index":1860},{"krate":0,"index":2048},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2059},{"krate":0,"index":2060},{"krate":0,"index":2061},{"krate":0,"index":2064},{"krate":0,"index":2067},{"krate":0,"index":2070},{"krate":0,"index":2073},{"krate":0,"index":2074},{"krate":0,"index":2077},{"krate":0,"index":2080},{"krate":0,"index":2083},{"krate":0,"index":2088},{"krate":0,"index":2093},{"krate":0,"index":2097},{"krate":0,"index":2101},{"krate":0,"index":2104},{"krate":0,"index":2107},{"krate":0,"index":2110},{"krate":0,"index":2113},{"krate":0,"index":2116},{"krate":0,"index":2121},{"krate":0,"index":2126},{"krate":0,"index":2129}],"decl_id":null,"docs":" Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.","sig":null,"attributes":[{"value":"* Mirror of the [`core::ptr`] module and `bitvec`-specific pointer structures.\n\n# Types\n\nAs `bitvec` is not the standard library, it does not have the freedom to use\nlanguage builtins such as actual pointers. Instead, `bitvec` uses its own\nanalagous structures:\n\n- [`BitPtr<M, O, T>`]: This represents a pointer to a single bit, and is vaguely\n  similar to `*const bool`, `*mut bool`, and `NonNull<bool>`. It consists of a\n  (non-null, well-aligned) pointer to a `T` memory element and a bit-index\n  within that element. It uses the `O` ordering implementation to access the\n  selected bit, and uses `M` to determine whether it has write permissions to\n  the location.\n- [`BitPtrRange<M, O, T>`]: This is equivalent to `Range<BitPtr<M, O, T>>`. It\n  exists because [`Range`] has some associated types that are still unstable to\n  implement for its type parameters. It is also smaller than the `Range` would\n  be, because it can take advantage of layout optimizations.\n- [`BitRef<M, O, T>`]: This is a proxy reference type, equivalent to the C++\n  [`bitset<N>::reference`]. It implements `Deref` and, if `M` is `Mut`,\n  `DerefMut` to bool, so that it can be read from and written to as if it were\n  an `&bool` or `&mut bool`. It is **not** a referent type, and cannot be used\n  in APIs that expect actual references. It is implemented under the hood as a\n  `BitPtr` with a `bool` cached in one of the padding bytes.\n- `BitSpan<M, O, T>`: This is a crate-internal type that encodes a `BitPtr` and\n  a length counter into a two-word structure that can be transmuted into\n  `*BitSlice<O, T>`. This type enforces the non-null/well-aligned rule, and is\n  the source of the limitation that `bitvec` region types can only address ⅛ of\n  a `usize`, rather than the ½ limitation of the standard library collections.\n\n  This type is not public API; it will only ever appear in its transmuted form,\n  `*BitSlice<O, T>`. Users are **not permitted** to use any of the [`core::ptr`]\n  or [`pointer`] functions to view or modify `*BitSlice` pointers, or their\n  referent locations, in any way.\n\n# Safety\n\nThe functions in this module take `bitvec` equivalents to raw pointers as their\narguments and read from or write to them. For this to be safe, these pointers\nmust be *valid*. Whether a pointer is valid depends on the operation it is used\nfor (reading or writing), and the extent of the memory that is accessed (i.e.\nhow many bits are read/written in and how many underlying memory elements are\naccessed). Most functions use [`BitPtr`] to access only a single bit, in which\ncase the documentation omits the size and implicitly assumes it to be one bit in\none `T` element.\n\nThe Rust rules about pointer validity are always in effect; `bitvec` refines\nthem to a bit-precision granularity, but must still respect the byte-level and\nelement-level rules.\n\n# Crate-Specific Restrictions\n\n`bitvec` uses an internal encoding scheme to make bit-region pointers fit into a\nstandard Rust slice pointer. This encoding requires that the base element\naddress of a bit-pointer be *non-null* and *well-aligned* for all pointers that\nare used in the encoding scheme.\n\nThe `bitvec` structure used to emulate a pointer to a single bit is larger than\none processor word, and thus cannot be encoded to fit in a `*const Bit`. To ease\ninternal complexity, these restrictions are universal in `bitvec`: the crate as\na whole refuses to operate on null pointers, or pointers that are not aligned to\ntheir referent type, even if your usage never touches the span encoding.\n\nAs such, the pointer types in this module can essentially only be sourced from\nreferences, not from arbitrary address values. While this module attempts to\nrely on actual Rust references as much as possible, and instead use only the\nordinary [`core::ptr`] and [`pointer`] functions. This is not always possible;\nin particular, Rust does not offer stable atomic intrinsics, and instead only\nallows them to be used on references.\n\n[`BitPtr`]: crate::ptr::BitPtr\n[`BitPtr<M, O, T>`]: crate::ptr::BitPtr\n[`BitPtrRange<M, O, T>`]: crate::ptr::BitPtrRange\n[`BitRef<M, O, T>`]: crate::ptr::BitRef\n[`BitSpan<M, O, T>`]: crate::ptr::BitSpan\n[`Range`]: core::ops::Range\n[`bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n[`core::ptr`]: core::ptr\n[`pointer`]: https://doc.rust-lang.org/std/primitive.pointer.html\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":218594,"byte_end":222973,"line_start":1,"line_end":80,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":1169},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":240640,"byte_end":240647,"line_start":54,"line_end":54,"column_start":12,"column_end":19},"name":"Address","qualname":"::ptr::address::Address","value":"Address {  }","parent":null,"children":[{"krate":0,"index":1172},{"krate":0,"index":1173}],"decl_id":null,"docs":" A non-null, well-aligned, `BitStore` element address.","sig":null,"attributes":[{"value":"* A non-null, well-aligned, `BitStore` element address.\n\nThis adds non-null and well-aligned requirements to memory addresses so that the\ncrate can rely on these invariants throughout its implementation. The type is\npublic API, but opaque, and only constructible through conversions of pointer\nand reference values.\n\n# Type Parameters\n\n- `M`: The mutability permissions of the source pointer.\n- `T`: The referent type of the source pointer.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":240161,"byte_end":240607,"line_start":41,"line_end":52,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":240608,"byte_end":240628,"line_start":53,"line_end":53,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":1186},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":243691,"byte_end":243699,"line_start":181,"line_end":181,"column_start":9,"column_end":17},"name":"to_const","qualname":"<Address<M, T>>::to_const","value":"pub fn to_const(Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the address as a read-only pointer.\n","sig":null,"attributes":[{"value":"/ Gets the address as a read-only pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":243619,"byte_end":243663,"line_start":179,"line_end":179,"column_start":2,"column_end":46}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":243665,"byte_end":243682,"line_start":180,"line_end":180,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1191},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244429,"byte_end":244435,"line_start":212,"line_end":212,"column_start":9,"column_end":15},"name":"to_mut","qualname":"<Address<Mut, T>>::to_mut","value":"pub fn to_mut(Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the address as a write-capable pointer.\n","sig":null,"attributes":[{"value":"/ Gets the address as a write-capable pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244304,"byte_end":244352,"line_start":209,"line_end":209,"column_start":2,"column_end":50}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244354,"byte_end":244371,"line_start":210,"line_end":210,"column_start":2,"column_end":19}},{"value":"allow(clippy :: clippy :: wrong_self_convention)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244373,"byte_end":244420,"line_start":211,"line_end":211,"column_start":2,"column_end":49}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3951},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247682,"byte_end":247686,"line_start":387,"line_end":387,"column_start":2,"column_end":6},"name":"Null","qualname":"::ptr::address::AddressError::Null","value":"AddressError::Null","parent":{"krate":0,"index":3949},"children":[],"decl_id":null,"docs":" `Address` cannot use the null pointer.\n","sig":null,"attributes":[{"value":"/ `Address` cannot use the null pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247638,"byte_end":247680,"line_start":386,"line_end":386,"column_start":2,"column_end":44}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3953},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247752,"byte_end":247762,"line_start":389,"line_end":389,"column_start":2,"column_end":12},"name":"Misaligned","qualname":"::ptr::address::AddressError::Misaligned","value":"AddressError::Misaligned(*const T)","parent":{"krate":0,"index":3949},"children":[],"decl_id":null,"docs":" `Address` cannot be misaligned for the referent type `T`.\n","sig":null,"attributes":[{"value":"/ `Address` cannot be misaligned for the referent type `T`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247689,"byte_end":247750,"line_start":388,"line_end":388,"column_start":2,"column_end":63}}]},{"kind":"Enum","id":{"krate":0,"index":3949},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247601,"byte_end":247613,"line_start":383,"line_end":383,"column_start":10,"column_end":22},"name":"AddressError","qualname":"::ptr::address::AddressError","value":"pub enum AddressError<T> where T: BitStore { Null, Misaligned(*const T), }","parent":null,"children":[{"krate":0,"index":3951},{"krate":0,"index":3953}],"decl_id":null,"docs":" An error produced when consuming `BitStore` memory addresses.\n","sig":null,"attributes":[{"value":"/ An error produced when consuming `BitStore` memory addresses.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247458,"byte_end":247523,"line_start":381,"line_end":381,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":1326},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251481,"byte_end":251487,"line_start":112,"line_end":112,"column_start":12,"column_end":18},"name":"BitRef","qualname":"::ptr::proxy::BitRef","value":"BitRef {  }","parent":null,"children":[{"krate":0,"index":1331},{"krate":0,"index":1332},{"krate":0,"index":1333},{"krate":0,"index":1335}],"decl_id":null,"docs":" A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].","sig":null,"attributes":[{"value":"* A proxy reference, equivalent to C++ [`std::bitset<N>::reference`].\n\nThis type wraps a `BitPtr` and caches a `bool` in a padding byte. It is then\nable to freely produce references to the cached bool, and commits the cache back\nto the referent bit location on `drop`.\n\n# Lifetimes\n\n- `'a`: The lifetime of the source `&'a mut BitSlice` that created the `BitRef`.\n\n# Type Parameters\n\n- `M`: The write permission of the reference. When this is `Const`, the\n  `DerefMut` implementation is removed, forbidding the proxy from writing back\n  to memory.\n- `O`: The ordering used to address a bit in memory.\n- `T`: The storage type containing the referent bit.\n\n# Quirks\n\nBecause this type has both a lifetime and a destructor, it can introduce an\nuncommon error condition in Rust. When an expression that produces this type is\nin the final expression of a block, including if that expression is used as a\ncondition in a `match`, `if let`, or `if`, then the compiler will attempt to\nextend the drop scope of this type to the outside of the block. This causes a\nlifetime mismatch error if the source region from which this proxy is produced\ngoes out of scope at the end of the block.\n\nIf you get a compiler error that this type causes something to be dropped while\nborrowed, you can end the borrow by putting any expression-ending syntax element\nafter the offending expression that produces this type, including a semicolon or\nan item definition.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\n\nlet (left, right) = bits.split_at_mut(1);\nlet mut first = left.get_mut(0).unwrap();\nlet second = right.get_mut(0).unwrap();\n\n// Referential behavior\n*first = true;\n// Direct write\nsecond.set(true);\n\ndrop(first); // it’s not a reference!\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`std::bitset<N>::reference`]: https://en.cppreference.com/w/cpp/utility/bitset/reference\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":249304,"byte_end":251188,"line_start":50,"line_end":104,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251357,"byte_end":251374,"line_start":107,"line_end":107,"column_start":41,"column_end":58}}]},{"kind":"Method","id":{"krate":0,"index":1340},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252399,"byte_end":252410,"line_start":152,"line_end":152,"column_start":16,"column_end":27},"name":"from_bitptr","qualname":"<BitRef>::from_bitptr","value":"pub unsafe fn from_bitptr(BitPtr<M, O, T>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251940,"byte_end":251994,"line_start":134,"line_end":134,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251996,"byte_end":251999,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ The conversion reads from the pointer, then stores the `bool` in a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252001,"byte_end":252071,"line_start":136,"line_end":136,"column_start":2,"column_end":72}},{"value":"/ padding byte.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252073,"byte_end":252090,"line_start":137,"line_end":137,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252092,"byte_end":252095,"line_start":138,"line_end":138,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252097,"byte_end":252113,"line_start":139,"line_end":139,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252115,"byte_end":252118,"line_start":140,"line_end":140,"column_start":2,"column_end":5}},{"value":"/ - `bitptr`: A bit-pointer to turn into a bit-reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252120,"byte_end":252179,"line_start":141,"line_end":141,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252181,"byte_end":252184,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252186,"byte_end":252199,"line_start":143,"line_end":143,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252201,"byte_end":252204,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ A bit-reference pointing at `bitptr`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252206,"byte_end":252247,"line_start":145,"line_end":145,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252249,"byte_end":252252,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252254,"byte_end":252266,"line_start":147,"line_end":147,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252268,"byte_end":252271,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ The `bitptr` must address a location that is valid for reads and, if `M`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252273,"byte_end":252349,"line_start":149,"line_end":149,"column_start":2,"column_end":78}},{"value":"/ is `Mut`, writes.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252351,"byte_end":252372,"line_start":150,"line_end":150,"column_start":2,"column_end":23}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252374,"byte_end":252383,"line_start":151,"line_end":151,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1344},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253318,"byte_end":253329,"line_start":190,"line_end":190,"column_start":9,"column_end":20},"name":"into_bitptr","qualname":"<BitRef>::into_bitptr","value":"pub fn into_bitptr(Self) -> BitPtr<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Decays the bit-reference to an ordinary bit-pointer.","sig":null,"attributes":[{"value":"/ Decays the bit-reference to an ordinary bit-pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":252956,"byte_end":253012,"line_start":177,"line_end":177,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253014,"byte_end":253017,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253019,"byte_end":253035,"line_start":179,"line_end":179,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253037,"byte_end":253040,"line_start":180,"line_end":180,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253042,"byte_end":253054,"line_start":181,"line_end":181,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253056,"byte_end":253059,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253061,"byte_end":253074,"line_start":183,"line_end":183,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253076,"byte_end":253079,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ The interior bit-pointer, without the associated cache. If this was a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253081,"byte_end":253154,"line_start":185,"line_end":185,"column_start":2,"column_end":75}},{"value":"/ write-capable pointer, then the cached bit is committed to memory before","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253156,"byte_end":253232,"line_start":186,"line_end":186,"column_start":2,"column_end":78}},{"value":"/ this method returns.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253234,"byte_end":253258,"line_start":187,"line_end":187,"column_start":2,"column_end":26}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253260,"byte_end":253277,"line_start":188,"line_end":188,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253279,"byte_end":253309,"line_start":189,"line_end":189,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1348},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253645,"byte_end":253652,"line_start":207,"line_end":207,"column_start":9,"column_end":16},"name":"replace","qualname":"<BitRef>::replace","value":"pub fn replace(&mut Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the referenced bit, returning the previous value.","sig":null,"attributes":[{"value":"/ Moves `src` into the referenced bit, returning the previous value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253447,"byte_end":253517,"line_start":200,"line_end":200,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253519,"byte_end":253522,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253524,"byte_end":253538,"line_start":202,"line_end":202,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253540,"byte_end":253543,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ [`mem::replace`](core::mem::replace)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253545,"byte_end":253585,"line_start":204,"line_end":204,"column_start":2,"column_end":42}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253587,"byte_end":253604,"line_start":205,"line_end":205,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253606,"byte_end":253636,"line_start":206,"line_end":206,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1349},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253935,"byte_end":253939,"line_start":219,"line_end":219,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitRef>::swap","value":"pub fn swap<O2, T2>(&mut Self, &mut BitRef<, Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations, without deïnitializing either\n one.","sig":null,"attributes":[{"value":"/ Swaps the values at two mutable locations, without deïnitializing either","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253726,"byte_end":253803,"line_start":211,"line_end":211,"column_start":2,"column_end":78}},{"value":"/ one.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253805,"byte_end":253813,"line_start":212,"line_end":212,"column_start":2,"column_end":10}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253815,"byte_end":253818,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253820,"byte_end":253834,"line_start":214,"line_end":214,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253836,"byte_end":253839,"line_start":215,"line_end":215,"column_start":2,"column_end":5}},{"value":"/ [`mem::swap`](core::mem::swap)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253841,"byte_end":253875,"line_start":216,"line_end":216,"column_start":2,"column_end":36}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253877,"byte_end":253894,"line_start":217,"line_end":217,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253896,"byte_end":253926,"line_start":218,"line_end":218,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1352},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254732,"byte_end":254735,"line_start":242,"line_end":242,"column_start":9,"column_end":12},"name":"set","qualname":"<BitRef>::set","value":"pub fn set(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a bit into the proxied location without an intermediate copy.","sig":null,"attributes":[{"value":"/ Writes a bit into the proxied location without an intermediate copy.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254084,"byte_end":254156,"line_start":227,"line_end":227,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254158,"byte_end":254161,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ This function writes `value` directly into the proxied location, and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254163,"byte_end":254235,"line_start":229,"line_end":229,"column_start":2,"column_end":74}},{"value":"/ does not store `value` in the proxy’s internal cache. This should be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254237,"byte_end":254311,"line_start":230,"line_end":230,"column_start":2,"column_end":74}},{"value":"/ equivalent to the behavior seen when using ordinary [`DerefMut`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254313,"byte_end":254381,"line_start":231,"line_end":231,"column_start":2,"column_end":70}},{"value":"/ proxying, but the latter depends on compiler optimization.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254383,"byte_end":254445,"line_start":232,"line_end":232,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254447,"byte_end":254450,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254452,"byte_end":254468,"line_start":234,"line_end":234,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254470,"byte_end":254473,"line_start":235,"line_end":235,"column_start":2,"column_end":5}},{"value":"/ - `self`: This destroys the proxy, as it becomes invalid when writing","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254475,"byte_end":254548,"line_start":236,"line_end":236,"column_start":2,"column_end":75}},{"value":"/   directly to the location without updating the cache.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254550,"byte_end":254608,"line_start":237,"line_end":237,"column_start":2,"column_end":60}},{"value":"/ - `value`: The new bit to write into the proxied slot.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254610,"byte_end":254668,"line_start":238,"line_end":238,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254670,"byte_end":254673,"line_start":239,"line_end":239,"column_start":2,"column_end":5}},{"value":"/ [`DerefMut`]: core::ops::DerefMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254675,"byte_end":254712,"line_start":240,"line_end":240,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":254714,"byte_end":254723,"line_start":241,"line_end":241,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1505},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263041,"byte_end":263052,"line_start":67,"line_end":67,"column_start":12,"column_end":23},"name":"BitPtrRange","qualname":"::ptr::range::BitPtrRange","value":"BitPtrRange { start, end }","parent":null,"children":[{"krate":0,"index":1509},{"krate":0,"index":1510}],"decl_id":null,"docs":" Equivalent to `Range<BitPtr<M, O, T>>`.","sig":null,"attributes":[{"value":"* Equivalent to `Range<BitPtr<M, O, T>>`.\n\nAs with `Range`, this is a half-open set: the starting pointer is included in\nthe set of live addresses, while the ending pointer is one-past-the-end of live\naddresses, and is not usable.\n\nThis structure exists because `Range` does not permit foreign implementations of\nits internal traits.\n\n# Original\n\n[`Range<*bool>`](core::ops::Range)\n\n# API Differences\n\nThis cannot be constructed directly from the `..` syntax, though a `From`\nimplementation is provided.\n\n# Type Parameters\n\n- `M`: The write permissions of the pointers this range produces.\n- `O`: The bit-ordering within a storage element used to access bits.\n- `T`: The storage element type containing the referent bits.\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":262021,"byte_end":262748,"line_start":36,"line_end":59,"column_start":1,"column_end":4}},{"value":"repr(C, align(8))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":262917,"byte_end":262934,"line_start":62,"line_end":62,"column_start":41,"column_end":58}}]},{"kind":"Field","id":{"krate":0,"index":1509},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263181,"byte_end":263186,"line_start":74,"line_end":74,"column_start":6,"column_end":11},"name":"start","qualname":"::ptr::range::BitPtrRange::start","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" The lower bound of the range (inclusive).\n","sig":null,"attributes":[{"value":"/ The lower bound of the range (inclusive).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263130,"byte_end":263175,"line_start":73,"line_end":73,"column_start":2,"column_end":47}}]},{"kind":"Field","id":{"krate":0,"index":1510},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263258,"byte_end":263261,"line_start":76,"line_end":76,"column_start":6,"column_end":9},"name":"end","qualname":"::ptr::range::BitPtrRange::end","value":"ptr::single::BitPtr<M, O, T>","parent":{"krate":0,"index":1505},"children":[],"decl_id":null,"docs":" The higher bound of the range (exclusive).\n","sig":null,"attributes":[{"value":"/ The higher bound of the range (exclusive).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263206,"byte_end":263252,"line_start":75,"line_end":75,"column_start":2,"column_end":48}}]},{"kind":"Const","id":{"krate":0,"index":1515},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263465,"byte_end":263470,"line_start":87,"line_end":87,"column_start":12,"column_end":17},"name":"EMPTY","qualname":"::ptr::range::BitPtrRange::<M, O, T>::EMPTY","value":"Self","parent":{"krate":0,"index":1511},"children":[],"decl_id":null,"docs":" The canonical empty range. All ranges with zero length are equally\n empty.\n","sig":null,"attributes":[{"value":"/ The canonical empty range. All ranges with zero length are equally","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263371,"byte_end":263441,"line_start":85,"line_end":85,"column_start":2,"column_end":72}},{"value":"/ empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263443,"byte_end":263453,"line_start":86,"line_end":86,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1516},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263660,"byte_end":263669,"line_start":95,"line_end":95,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtrRange<M, O, T>>::raw_parts","value":"pub fn raw_parts(&Self) -> (BitPtr<M, O, T>, BitPtr<M, O, T>)","parent":null,"children":[],"decl_id":null,"docs":" Destructures the range back into its start and end pointers.\n","sig":null,"attributes":[{"value":"/ Destructures the range back into its start and end pointers.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263544,"byte_end":263608,"line_start":92,"line_end":92,"column_start":2,"column_end":66}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263610,"byte_end":263619,"line_start":93,"line_end":93,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263621,"byte_end":263651,"line_start":94,"line_end":94,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1517},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263926,"byte_end":263936,"line_start":103,"line_end":103,"column_start":9,"column_end":19},"name":"into_range","qualname":"<BitPtrRange<M, O, T>>::into_range","value":"pub fn into_range(Self) -> Range<BitPtr<M, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Converts the structure into an actual `Range`. The `Range` will have\n limited functionality compared to `self`.\n","sig":null,"attributes":[{"value":"/ Converts the structure into an actual `Range`. The `Range` will have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263747,"byte_end":263819,"line_start":99,"line_end":99,"column_start":2,"column_end":74}},{"value":"/ limited functionality compared to `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263821,"byte_end":263866,"line_start":100,"line_end":100,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263868,"byte_end":263885,"line_start":101,"line_end":101,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263887,"byte_end":263917,"line_start":102,"line_end":102,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1518},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264498,"byte_end":264506,"line_start":128,"line_end":128,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitPtrRange<M, O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if the range is empty (the distance between pointers is `0`).","sig":null,"attributes":[{"value":"/ Tests if the range is empty (the distance between pointers is `0`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264001,"byte_end":264072,"line_start":107,"line_end":107,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264074,"byte_end":264077,"line_start":108,"line_end":108,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264079,"byte_end":264093,"line_start":109,"line_end":109,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264095,"byte_end":264098,"line_start":110,"line_end":110,"column_start":2,"column_end":5}},{"value":"/ [`Range::is_empty`](core::ops::Range::is_empty)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264100,"byte_end":264151,"line_start":111,"line_end":111,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264153,"byte_end":264156,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264158,"byte_end":264172,"line_start":113,"line_end":113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264174,"byte_end":264177,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264179,"byte_end":264190,"line_start":115,"line_end":115,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264192,"byte_end":264219,"line_start":116,"line_end":116,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264221,"byte_end":264254,"line_start":117,"line_end":117,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264256,"byte_end":264259,"line_start":118,"line_end":118,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264261,"byte_end":264280,"line_start":119,"line_end":119,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264282,"byte_end":264334,"line_start":120,"line_end":120,"column_start":2,"column_end":54}},{"value":"/ let mut range = unsafe { ptr.range(1) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264336,"byte_end":264380,"line_start":121,"line_end":121,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264382,"byte_end":264385,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ assert!(!range.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264387,"byte_end":264418,"line_start":123,"line_end":123,"column_start":2,"column_end":33}},{"value":"/ range.next();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264420,"byte_end":264437,"line_start":124,"line_end":124,"column_start":2,"column_end":19}},{"value":"/ assert!(range.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264439,"byte_end":264469,"line_start":125,"line_end":125,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264471,"byte_end":264478,"line_start":126,"line_end":126,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264480,"byte_end":264489,"line_start":127,"line_end":127,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1519},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265877,"byte_end":265885,"line_start":175,"line_end":175,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitPtrRange<M, O, T>>::contains","value":"pub fn contains<M2, T2>(&Self, &BitPtr<M2, O, T2>) -> bool where\nM2: Mutability, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the `pointer` is contained in the range.","sig":null,"attributes":[{"value":"/ Returns `true` if the `pointer` is contained in the range.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264554,"byte_end":264616,"line_start":132,"line_end":132,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264618,"byte_end":264621,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264623,"byte_end":264637,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264639,"byte_end":264642,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`Range::contains`](core::ops::Range::contains)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264644,"byte_end":264695,"line_start":136,"line_end":136,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264697,"byte_end":264700,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264702,"byte_end":264723,"line_start":138,"line_end":138,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264725,"byte_end":264728,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ The candidate pointer may differ in mutability permissions and exact","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264730,"byte_end":264802,"line_start":140,"line_end":140,"column_start":2,"column_end":74}},{"value":"/ storage type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264804,"byte_end":264821,"line_start":141,"line_end":141,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264823,"byte_end":264826,"line_start":142,"line_end":142,"column_start":2,"column_end":5}},{"value":"/ If `T2::Mem` is not `T::Mem`, then this always returns `false`. If `T2`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264828,"byte_end":264903,"line_start":143,"line_end":143,"column_start":2,"column_end":77}},{"value":"/ and `T` have the same memory type, but different alias permissions, then","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264905,"byte_end":264981,"line_start":144,"line_end":144,"column_start":2,"column_end":78}},{"value":"/ the comparison can continue.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":264983,"byte_end":265015,"line_start":145,"line_end":145,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265017,"byte_end":265020,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265022,"byte_end":265036,"line_start":147,"line_end":147,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265038,"byte_end":265041,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265043,"byte_end":265054,"line_start":149,"line_end":149,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265056,"byte_end":265083,"line_start":150,"line_end":150,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr::BitPtrRange;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265085,"byte_end":265118,"line_start":151,"line_end":151,"column_start":2,"column_end":35}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265120,"byte_end":265145,"line_start":152,"line_end":152,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265147,"byte_end":265150,"line_start":153,"line_end":153,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265152,"byte_end":265172,"line_start":154,"line_end":154,"column_start":2,"column_end":22}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265174,"byte_end":265226,"line_start":155,"line_end":155,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265228,"byte_end":265231,"line_start":156,"line_end":156,"column_start":2,"column_end":5}},{"value":"/ let mut range = unsafe { ptr.range(16) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265233,"byte_end":265278,"line_start":157,"line_end":157,"column_start":2,"column_end":47}},{"value":"/ // Reduce the range contents.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265280,"byte_end":265313,"line_start":158,"line_end":158,"column_start":2,"column_end":35}},{"value":"/ range.nth(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265315,"byte_end":265332,"line_start":159,"line_end":159,"column_start":2,"column_end":19}},{"value":"/ range.nth_back(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265334,"byte_end":265356,"line_start":160,"line_end":160,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265358,"byte_end":265361,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ // The start pointer is now excluded, but the interior remains.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265363,"byte_end":265430,"line_start":162,"line_end":162,"column_start":2,"column_end":69}},{"value":"/ assert!(!range.contains(&ptr));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265432,"byte_end":265467,"line_start":163,"line_end":163,"column_start":2,"column_end":37}},{"value":"/ assert!(range.contains(&unsafe { ptr.add(8) }));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265469,"byte_end":265521,"line_start":164,"line_end":164,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265523,"byte_end":265526,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ // Different base types are always excluded.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265528,"byte_end":265576,"line_start":166,"line_end":166,"column_start":2,"column_end":50}},{"value":"/ let casted = ptr.cast::<u8>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265578,"byte_end":265612,"line_start":167,"line_end":167,"column_start":2,"column_end":36}},{"value":"/ assert!(!range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265614,"byte_end":265670,"line_start":168,"line_end":168,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265672,"byte_end":265675,"line_start":169,"line_end":169,"column_start":2,"column_end":5}},{"value":"/ // Casting to a different alias model with the same width is valid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265677,"byte_end":265748,"line_start":170,"line_end":170,"column_start":2,"column_end":73}},{"value":"/ let casted = ptr.cast::<Cell<u16>>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265750,"byte_end":265791,"line_start":171,"line_end":171,"column_start":2,"column_end":43}},{"value":"/ assert!(range.contains(&unsafe { casted.add(8) }));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265793,"byte_end":265848,"line_start":172,"line_end":172,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265850,"byte_end":265857,"line_start":173,"line_end":173,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":265859,"byte_end":265868,"line_start":174,"line_end":174,"column_start":2,"column_end":11}}]},{"kind":"Struct","id":{"krate":0,"index":1705},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273476,"byte_end":273482,"line_start":106,"line_end":106,"column_start":12,"column_end":18},"name":"BitPtr","qualname":"::ptr::single::BitPtr","value":"BitPtr {  }","parent":null,"children":[{"krate":0,"index":1709},{"krate":0,"index":1710},{"krate":0,"index":1711}],"decl_id":null,"docs":" Pointer to an individual bit in a memory element. Analagous to `*bool`.","sig":null,"attributes":[{"value":"* Pointer to an individual bit in a memory element. Analagous to `*bool`.\n\n# Original\n\n[`*bool`](https://doc.rust-lang.org/std/primitive.pointer.html) and\n[`NonNull<bool>`](core::ptr::NonNull)\n\n# API Differences\n\nThis must be a structure, rather than a raw pointer, for two reasons:\n\n- It is larger than a raw pointer.\n- Raw pointers are not `#[fundamental]` and cannot have foreign implementations.\n\nAdditionally, rather than create two structures to map to `*const bool` and\n`*mut bool`, respectively, this takes mutability as a type parameter.\n\nBecause the encoded span pointer requires that memory addresses are well\naligned, this type also imposes the alignment requirement and refuses\nconstruction for misaligned element addresses. While this type is used in the\nAPI equivalent of ordinary raw pointers, it is restricted in value to only be\n*references* to memory elements.\n\n# ABI Differences\n\nThis has alignment `1`, rather than an alignment to the processor word. This is\nnecessary for some crate-internal optimizations.\n\n# Type Parameters\n\n- `M`: Marks whether the pointer permits mutation of memory through it.\n- `O`: The ordering of bits within a memory element.\n- `T`: A memory type used to select both the register size and the access\n  behavior when performing loads/stores.\n\n# Usage\n\nThis structure is used as the [`bitvec`] equivalent to `*bool`. It is used in\nall raw-pointer APIs, and provides behavior to emulate raw pointers. It cannot\nbe directly dereferenced, as it is not a pointer; it can only be transformed\nback into higher referential types, or used in [`bitvec::ptr`] free functions.\n\nThese pointers can never be null, or misaligned.\n\n[`bitvec`]: crate\n[`bitvec::ptr`]: crate::ptr\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":271731,"byte_end":273445,"line_start":58,"line_end":104,"column_start":1,"column_end":4}},{"value":"repr(C, packed)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273446,"byte_end":273464,"line_start":105,"line_end":105,"column_start":1,"column_end":19}}]},{"kind":"Const","id":{"krate":0,"index":1716},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273985,"byte_end":273993,"line_start":128,"line_end":128,"column_start":12,"column_end":20},"name":"DANGLING","qualname":"::ptr::single::BitPtr::<M, O, T>::DANGLING","value":"Self","parent":{"krate":0,"index":1712},"children":[],"decl_id":null,"docs":" The dangling pointer. This selects the starting bit of the `T` dangling\n address.\n","sig":null,"attributes":[{"value":"/ The dangling pointer. This selects the starting bit of the `T` dangling","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273884,"byte_end":273959,"line_start":126,"line_end":126,"column_start":2,"column_end":77}},{"value":"/ address.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273961,"byte_end":273973,"line_start":127,"line_end":127,"column_start":2,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1718},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275336,"byte_end":275343,"line_start":169,"line_end":169,"column_start":9,"column_end":16},"name":"try_new","qualname":"<BitPtr<M, O, T>>::try_new","value":"pub fn try_new<A>(A, u8) -> Result<Self, BitPtrError<T>> where\nA: TryInto<Address<M, T>>, BitPtrError<T>: From<A::Error>","parent":null,"children":[],"decl_id":null,"docs":" Tries to construct a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Tries to construct a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274496,"byte_end":274569,"line_start":145,"line_end":145,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274571,"byte_end":274574,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274576,"byte_end":274597,"line_start":147,"line_end":147,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274599,"byte_end":274602,"line_start":148,"line_end":148,"column_start":2,"column_end":5}},{"value":"/ - `A`: This accepts anything that may be used as a memory address.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274604,"byte_end":274674,"line_start":149,"line_end":149,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274676,"byte_end":274679,"line_start":150,"line_end":150,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274681,"byte_end":274697,"line_start":151,"line_end":151,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274699,"byte_end":274702,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ - `addr`: The memory address to use in the `BitPtr`. If this value","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274704,"byte_end":274774,"line_start":153,"line_end":153,"column_start":2,"column_end":72}},{"value":"/   violates the [`Address`] rules, then its conversion error will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274776,"byte_end":274847,"line_start":154,"line_end":154,"column_start":2,"column_end":73}},{"value":"/   returned.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274849,"byte_end":274864,"line_start":155,"line_end":155,"column_start":2,"column_end":17}},{"value":"/ - `head`: The index of the bit in `*addr` that this pointer selects. If","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274866,"byte_end":274941,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/   this value violates the [`BitIdx`] rules, then its conversion error","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":274943,"byte_end":275016,"line_start":157,"line_end":157,"column_start":2,"column_end":75}},{"value":"/   will be returned.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275018,"byte_end":275041,"line_start":158,"line_end":158,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275043,"byte_end":275046,"line_start":159,"line_end":159,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275048,"byte_end":275061,"line_start":160,"line_end":160,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275063,"byte_end":275066,"line_start":161,"line_end":161,"column_start":2,"column_end":5}},{"value":"/ A new `BitPtr`, selecting the memory location `addr` and the bit `head`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275068,"byte_end":275144,"line_start":162,"line_end":162,"column_start":2,"column_end":78}},{"value":"/ If either `addr` or `head` are invalid values, then this propagates","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275146,"byte_end":275217,"line_start":163,"line_end":163,"column_start":2,"column_end":73}},{"value":"/ their error.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275219,"byte_end":275235,"line_start":164,"line_end":164,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275237,"byte_end":275240,"line_start":165,"line_end":165,"column_start":2,"column_end":5}},{"value":"/ [`Address`]: crate::ptr::Address","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275242,"byte_end":275278,"line_start":166,"line_end":166,"column_start":2,"column_end":38}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275280,"byte_end":275316,"line_start":167,"line_end":167,"column_start":2,"column_end":38}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275318,"byte_end":275327,"line_start":168,"line_end":168,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1720},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276034,"byte_end":276037,"line_start":193,"line_end":193,"column_start":9,"column_end":12},"name":"new","qualname":"<BitPtr<M, O, T>>::new","value":"pub fn new(Address<M, T>, BitIdx<T::Mem>) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a memory location and a bit index.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a memory location and a bit index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275530,"byte_end":275595,"line_start":177,"line_end":177,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275597,"byte_end":275600,"line_start":178,"line_end":178,"column_start":2,"column_end":5}},{"value":"/ Since this requires that the address and bit index are already","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275602,"byte_end":275668,"line_start":179,"line_end":179,"column_start":2,"column_end":68}},{"value":"/ well-formed, it can assemble the `BitPtr` without inspecting their","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275670,"byte_end":275740,"line_start":180,"line_end":180,"column_start":2,"column_end":72}},{"value":"/ values.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275742,"byte_end":275753,"line_start":181,"line_end":181,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275755,"byte_end":275758,"line_start":182,"line_end":182,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275760,"byte_end":275776,"line_start":183,"line_end":183,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275778,"byte_end":275781,"line_start":184,"line_end":184,"column_start":2,"column_end":5}},{"value":"/ - `addr`: A well-formed memory address of `T`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275783,"byte_end":275833,"line_start":185,"line_end":185,"column_start":2,"column_end":52}},{"value":"/ - `head`: A well-formed bit index within `T`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275835,"byte_end":275884,"line_start":186,"line_end":186,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275886,"byte_end":275889,"line_start":187,"line_end":187,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275891,"byte_end":275904,"line_start":188,"line_end":188,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275906,"byte_end":275909,"line_start":189,"line_end":189,"column_start":2,"column_end":5}},{"value":"/ A `BitPtr` selecting the `head` bit in the location `addr`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275911,"byte_end":275974,"line_start":190,"line_end":190,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275976,"byte_end":275993,"line_start":191,"line_end":191,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":275995,"byte_end":276025,"line_start":192,"line_end":192,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1721},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276469,"byte_end":276478,"line_start":213,"line_end":213,"column_start":9,"column_end":18},"name":"raw_parts","qualname":"<BitPtr<M, O, T>>::raw_parts","value":"pub fn raw_parts(Self) -> (Address<M, T>, BitIdx<T::Mem>)","parent":null,"children":[],"decl_id":null,"docs":" Decomposes the pointer into its element address and bit index.","sig":null,"attributes":[{"value":"/ Decomposes the pointer into its element address and bit index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276149,"byte_end":276215,"line_start":201,"line_end":201,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276217,"byte_end":276220,"line_start":202,"line_end":202,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276222,"byte_end":276238,"line_start":203,"line_end":203,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276240,"byte_end":276243,"line_start":204,"line_end":204,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276245,"byte_end":276257,"line_start":205,"line_end":205,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276259,"byte_end":276262,"line_start":206,"line_end":206,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276264,"byte_end":276277,"line_start":207,"line_end":207,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276279,"byte_end":276282,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ - `.0`: The memory address in which the referent bit is located.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276284,"byte_end":276352,"line_start":209,"line_end":209,"column_start":2,"column_end":70}},{"value":"/ - `.1`: The index of the referent bit within `*.0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276354,"byte_end":276409,"line_start":210,"line_end":210,"column_start":2,"column_end":57}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276411,"byte_end":276428,"line_start":211,"line_end":211,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":276430,"byte_end":276460,"line_start":212,"line_end":212,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1724},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278811,"byte_end":278816,"line_start":288,"line_end":288,"column_start":16,"column_end":21},"name":"range","qualname":"<BitPtr<M, O, T>>::range","value":"pub unsafe fn range(Self, usize) -> BitPtrRange<M, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Produces a pointer range starting at `self` and running for `count`\n bits.","sig":null,"attributes":[{"value":"/ Produces a pointer range starting at `self` and running for `count`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278095,"byte_end":278166,"line_start":264,"line_end":264,"column_start":2,"column_end":73}},{"value":"/ bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278168,"byte_end":278177,"line_start":265,"line_end":265,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278179,"byte_end":278182,"line_start":266,"line_end":266,"column_start":2,"column_end":5}},{"value":"/ This calls `self.add(count)`, then bundles the resulting pointer as the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278184,"byte_end":278259,"line_start":267,"line_end":267,"column_start":2,"column_end":77}},{"value":"/ high end of the produced range.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278261,"byte_end":278296,"line_start":268,"line_end":268,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278298,"byte_end":278301,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278303,"byte_end":278319,"line_start":270,"line_end":270,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278321,"byte_end":278324,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ - `self`: The starting pointer of the produced range.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278326,"byte_end":278383,"line_start":272,"line_end":272,"column_start":2,"column_end":59}},{"value":"/ - `count`: The number of bits that the produced range includes.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278385,"byte_end":278452,"line_start":273,"line_end":273,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278454,"byte_end":278457,"line_start":274,"line_end":274,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278459,"byte_end":278472,"line_start":275,"line_end":275,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278474,"byte_end":278477,"line_start":276,"line_end":276,"column_start":2,"column_end":5}},{"value":"/ A half-open range of pointers, beginning at (and including) `self`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278479,"byte_end":278550,"line_start":277,"line_end":277,"column_start":2,"column_end":73}},{"value":"/ running for `count` bits, and ending at (and excluding)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278552,"byte_end":278611,"line_start":278,"line_end":278,"column_start":2,"column_end":61}},{"value":"/ `self.add(count)`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278613,"byte_end":278635,"line_start":279,"line_end":279,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278637,"byte_end":278640,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278642,"byte_end":278654,"line_start":281,"line_end":281,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278656,"byte_end":278659,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ `count` cannot violate the constraints in [`add`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278661,"byte_end":278715,"line_start":283,"line_end":283,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278717,"byte_end":278720,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278722,"byte_end":278744,"line_start":285,"line_end":285,"column_start":2,"column_end":24}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278746,"byte_end":278763,"line_start":286,"line_end":286,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278765,"byte_end":278795,"line_start":287,"line_end":287,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1725},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279121,"byte_end":279132,"line_start":302,"line_end":302,"column_start":16,"column_end":27},"name":"into_bitref","qualname":"<BitPtr<M, O, T>>::into_bitref","value":"pub unsafe fn into_bitref<'a>(Self) -> BitRef","parent":null,"children":[],"decl_id":null,"docs":" Converts a bit-pointer into a proxy bit-reference.","sig":null,"attributes":[{"value":"/ Converts a bit-pointer into a proxy bit-reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278929,"byte_end":278983,"line_start":295,"line_end":295,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278985,"byte_end":278988,"line_start":296,"line_end":296,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":278990,"byte_end":279002,"line_start":297,"line_end":297,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279004,"byte_end":279007,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ The pointer must be valid to dereference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279009,"byte_end":279054,"line_start":299,"line_end":299,"column_start":2,"column_end":47}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279056,"byte_end":279073,"line_start":300,"line_end":300,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279075,"byte_end":279105,"line_start":301,"line_end":301,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1727},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279310,"byte_end":279315,"line_start":309,"line_end":309,"column_start":9,"column_end":14},"name":"immut","qualname":"<BitPtr<M, O, T>>::immut","value":"pub fn immut(Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Removes write permissions from a bit-pointer.\n","sig":null,"attributes":[{"value":"/ Removes write permissions from a bit-pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279201,"byte_end":279250,"line_start":306,"line_end":306,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279252,"byte_end":279269,"line_start":307,"line_end":307,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279271,"byte_end":279301,"line_start":308,"line_end":308,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1728},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279658,"byte_end":279668,"line_start":325,"line_end":325,"column_start":16,"column_end":26},"name":"assert_mut","qualname":"<BitPtr<M, O, T>>::assert_mut","value":"pub unsafe fn assert_mut(Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds write permissions to a bit-pointer.","sig":null,"attributes":[{"value":"/ Adds write permissions to a bit-pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279459,"byte_end":279503,"line_start":318,"line_end":318,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279505,"byte_end":279508,"line_start":319,"line_end":319,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279510,"byte_end":279522,"line_start":320,"line_end":320,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279524,"byte_end":279527,"line_start":321,"line_end":321,"column_start":2,"column_end":5}},{"value":"/ This pointer must have been derived from a `*mut` pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279529,"byte_end":279591,"line_start":322,"line_end":322,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279593,"byte_end":279610,"line_start":323,"line_end":323,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279612,"byte_end":279642,"line_start":324,"line_end":324,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1729},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280254,"byte_end":280261,"line_start":347,"line_end":347,"column_start":9,"column_end":16},"name":"is_null","qualname":"<BitPtr<M, O, T>>::is_null","value":"pub fn is_null(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if a bit-pointer is the null value.","sig":null,"attributes":[{"value":"/ Tests if a bit-pointer is the null value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279844,"byte_end":279889,"line_start":336,"line_end":336,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279891,"byte_end":279894,"line_start":337,"line_end":337,"column_start":2,"column_end":5}},{"value":"/ This is always false, as `BitPtr` is a `NonNull` internally. Use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279896,"byte_end":279964,"line_start":338,"line_end":338,"column_start":2,"column_end":70}},{"value":"/ `Option<BitPtr>` to express the potential for a null pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":279966,"byte_end":280031,"line_start":339,"line_end":339,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280033,"byte_end":280036,"line_start":340,"line_end":340,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280038,"byte_end":280052,"line_start":341,"line_end":341,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280054,"byte_end":280057,"line_start":342,"line_end":342,"column_start":2,"column_end":5}},{"value":"/ [`pointer::is_null`](https://doc.rust-lang.org/std/primitive.pointer.html#method.is_null)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280059,"byte_end":280152,"line_start":343,"line_end":343,"column_start":2,"column_end":95}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280154,"byte_end":280171,"line_start":344,"line_end":344,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280173,"byte_end":280203,"line_start":345,"line_end":345,"column_start":2,"column_end":32}},{"value":"deprecated = \"`BitPtr` is never null\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280205,"byte_end":280245,"line_start":346,"line_end":346,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1730},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280888,"byte_end":280892,"line_start":366,"line_end":366,"column_start":9,"column_end":13},"name":"cast","qualname":"<BitPtr<M, O, T>>::cast","value":"pub fn cast<U>(Self) -> BitPtr<M, O, U> where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Casts to a bit-pointer of another storage type, preserving the\n bit-ordering and mutability permissions.","sig":null,"attributes":[{"value":"/ Casts to a bit-pointer of another storage type, preserving the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280291,"byte_end":280357,"line_start":351,"line_end":351,"column_start":2,"column_end":68}},{"value":"/ bit-ordering and mutability permissions.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280359,"byte_end":280403,"line_start":352,"line_end":352,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280405,"byte_end":280408,"line_start":353,"line_end":353,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280410,"byte_end":280424,"line_start":354,"line_end":354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280426,"byte_end":280429,"line_start":355,"line_end":355,"column_start":2,"column_end":5}},{"value":"/ [`pointer::cast`](https://doc.rust-lang.org/std/primitive.pointer.html#method.cast)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280431,"byte_end":280518,"line_start":356,"line_end":356,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280520,"byte_end":280523,"line_start":357,"line_end":357,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280525,"byte_end":280539,"line_start":358,"line_end":358,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280541,"byte_end":280544,"line_start":359,"line_end":359,"column_start":2,"column_end":5}},{"value":"/ This is not a free typecast! It encodes the pointer as a crate-internal","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280546,"byte_end":280621,"line_start":360,"line_end":360,"column_start":2,"column_end":77}},{"value":"/ span descriptor, casts the span descriptor to the `U` storage element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280623,"byte_end":280696,"line_start":361,"line_end":361,"column_start":2,"column_end":75}},{"value":"/ parameter, then decodes the result. This preserves general correctness,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280698,"byte_end":280773,"line_start":362,"line_end":362,"column_start":2,"column_end":77}},{"value":"/ but will likely change both the virtual and physical bits addressed by","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280775,"byte_end":280849,"line_start":363,"line_end":363,"column_start":2,"column_end":76}},{"value":"/ this pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280851,"byte_end":280868,"line_start":364,"line_end":364,"column_start":2,"column_end":19}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":280870,"byte_end":280879,"line_start":365,"line_end":365,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1732},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282294,"byte_end":282300,"line_start":411,"line_end":411,"column_start":16,"column_end":22},"name":"as_ref","qualname":"<BitPtr<M, O, T>>::as_ref","value":"pub unsafe fn as_ref<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy reference to the referent bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281059,"byte_end":281110,"line_start":373,"line_end":373,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281112,"byte_end":281115,"line_start":374,"line_end":374,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281117,"byte_end":281186,"line_start":375,"line_end":375,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281188,"byte_end":281207,"line_start":376,"line_end":376,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281209,"byte_end":281212,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281214,"byte_end":281228,"line_start":378,"line_end":378,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281230,"byte_end":281233,"line_start":379,"line_end":379,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_ref`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_ref)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281235,"byte_end":281326,"line_start":380,"line_end":380,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281328,"byte_end":281331,"line_start":381,"line_end":381,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281333,"byte_end":281354,"line_start":382,"line_end":382,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281356,"byte_end":281359,"line_start":383,"line_end":383,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281361,"byte_end":281431,"line_start":384,"line_end":384,"column_start":2,"column_end":72}},{"value":"/ implements `Deref<Target = bool>`, and can be converted to `&bool` with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281433,"byte_end":281508,"line_start":385,"line_end":385,"column_start":2,"column_end":77}},{"value":"/ `&*`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281510,"byte_end":281519,"line_start":386,"line_end":386,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281521,"byte_end":281524,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281526,"byte_end":281538,"line_start":388,"line_end":388,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281540,"byte_end":281543,"line_start":389,"line_end":389,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281545,"byte_end":281620,"line_start":390,"line_end":390,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281622,"byte_end":281695,"line_start":391,"line_end":391,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281697,"byte_end":281720,"line_start":392,"line_end":392,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281722,"byte_end":281725,"line_start":393,"line_end":393,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281727,"byte_end":281802,"line_start":394,"line_end":394,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281804,"byte_end":281823,"line_start":395,"line_end":395,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281825,"byte_end":281887,"line_start":396,"line_end":396,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281889,"byte_end":281965,"line_start":397,"line_end":397,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":281967,"byte_end":282041,"line_start":398,"line_end":398,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282043,"byte_end":282046,"line_start":399,"line_end":399,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282048,"byte_end":282062,"line_start":400,"line_end":400,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282064,"byte_end":282067,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282069,"byte_end":282080,"line_start":402,"line_end":402,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282082,"byte_end":282109,"line_start":403,"line_end":403,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282111,"byte_end":282114,"line_start":404,"line_end":404,"column_start":2,"column_end":5}},{"value":"/ let data = 1u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282116,"byte_end":282135,"line_start":405,"line_end":405,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282137,"byte_end":282189,"line_start":406,"line_end":406,"column_start":2,"column_end":54}},{"value":"/ let val = unsafe { ptr.as_ref() }.unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282191,"byte_end":282238,"line_start":407,"line_end":407,"column_start":2,"column_end":49}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282240,"byte_end":282258,"line_start":408,"line_end":408,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282260,"byte_end":282267,"line_start":409,"line_end":409,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282269,"byte_end":282278,"line_start":410,"line_end":410,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1734},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284006,"byte_end":284012,"line_start":460,"line_end":460,"column_start":16,"column_end":22},"name":"offset","qualname":"<BitPtr<M, O, T>>::offset","value":"pub unsafe fn offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282395,"byte_end":282436,"line_start":415,"line_end":415,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282438,"byte_end":282441,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282443,"byte_end":282475,"line_start":417,"line_end":417,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282477,"byte_end":282480,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282482,"byte_end":282496,"line_start":419,"line_end":419,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282498,"byte_end":282501,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282503,"byte_end":282594,"line_start":421,"line_end":421,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282596,"byte_end":282599,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282601,"byte_end":282613,"line_start":423,"line_end":423,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282615,"byte_end":282618,"line_start":424,"line_end":424,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282620,"byte_end":282696,"line_start":425,"line_end":425,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282698,"byte_end":282711,"line_start":426,"line_end":426,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282713,"byte_end":282716,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and resulting pointer must be either in bounds or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282718,"byte_end":282791,"line_start":428,"line_end":428,"column_start":2,"column_end":75}},{"value":"/   one byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282793,"byte_end":282869,"line_start":429,"line_end":429,"column_start":2,"column_end":78}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282871,"byte_end":282944,"line_start":430,"line_end":430,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282946,"byte_end":282959,"line_start":431,"line_end":431,"column_start":2,"column_end":15}},{"value":"/ - The computed offset, **in bytes**, cannot overflow an `isize`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":282961,"byte_end":283029,"line_start":432,"line_end":432,"column_start":2,"column_end":70}},{"value":"/ - The offset being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283031,"byte_end":283104,"line_start":433,"line_end":433,"column_start":2,"column_end":71}},{"value":"/   address space. That is, the infinite-precision sum, **in bytes** must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283106,"byte_end":283181,"line_start":434,"line_end":434,"column_start":2,"column_end":77}},{"value":"/   fit in a `usize`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283183,"byte_end":283206,"line_start":435,"line_end":435,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283208,"byte_end":283211,"line_start":436,"line_end":436,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283213,"byte_end":283284,"line_start":437,"line_end":437,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283286,"byte_end":283362,"line_start":438,"line_end":438,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283364,"byte_end":283432,"line_start":439,"line_end":439,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283434,"byte_end":283490,"line_start":440,"line_end":440,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283492,"byte_end":283495,"line_start":441,"line_end":441,"column_start":2,"column_end":5}},{"value":"/ Use [`wrapping_offset`] if you expect to risk hitting the high edge of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283497,"byte_end":283571,"line_start":442,"line_end":442,"column_start":2,"column_end":76}},{"value":"/ the address space.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283573,"byte_end":283595,"line_start":443,"line_end":443,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283597,"byte_end":283600,"line_start":444,"line_end":444,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283602,"byte_end":283616,"line_start":445,"line_end":445,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283618,"byte_end":283621,"line_start":446,"line_end":446,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283623,"byte_end":283634,"line_start":447,"line_end":447,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283636,"byte_end":283663,"line_start":448,"line_end":448,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283665,"byte_end":283668,"line_start":449,"line_end":449,"column_start":2,"column_end":5}},{"value":"/ let data = 5u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283670,"byte_end":283689,"line_start":450,"line_end":450,"column_start":2,"column_end":21}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283691,"byte_end":283743,"line_start":451,"line_end":451,"column_start":2,"column_end":54}},{"value":"/ assert!(unsafe { ptr.read() });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283745,"byte_end":283780,"line_start":452,"line_end":452,"column_start":2,"column_end":37}},{"value":"/ assert!(!unsafe { ptr.offset(1).read() });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283782,"byte_end":283828,"line_start":453,"line_end":453,"column_start":2,"column_end":48}},{"value":"/ assert!(unsafe { ptr.offset(2).read() });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283830,"byte_end":283875,"line_start":454,"line_end":454,"column_start":2,"column_end":47}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283877,"byte_end":283884,"line_start":455,"line_end":455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283886,"byte_end":283889,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283891,"byte_end":283931,"line_start":457,"line_end":457,"column_start":2,"column_end":42}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283933,"byte_end":283979,"line_start":458,"line_end":458,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":283981,"byte_end":283990,"line_start":459,"line_end":459,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1735},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286065,"byte_end":286080,"line_start":516,"line_end":516,"column_start":9,"column_end":24},"name":"wrapping_offset","qualname":"<BitPtr<M, O, T>>::wrapping_offset","value":"pub fn wrapping_offset(Self, isize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic.","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284136,"byte_end":284203,"line_start":465,"line_end":465,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284205,"byte_end":284208,"line_start":466,"line_end":466,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284210,"byte_end":284242,"line_start":467,"line_end":467,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284244,"byte_end":284247,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284249,"byte_end":284263,"line_start":469,"line_end":469,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284265,"byte_end":284268,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_offset`](https://doc.rust/lang.org/std/primitive.pointer.html#method.wrapping_offset)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284270,"byte_end":284379,"line_start":471,"line_end":471,"column_start":2,"column_end":111}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284381,"byte_end":284384,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284386,"byte_end":284398,"line_start":473,"line_end":473,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284400,"byte_end":284403,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ The resulting pointer does not need to be in bounds, but it is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284405,"byte_end":284471,"line_start":475,"line_end":475,"column_start":2,"column_end":68}},{"value":"/ potentially hazardous to dereference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284473,"byte_end":284514,"line_start":476,"line_end":476,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284516,"byte_end":284519,"line_start":477,"line_end":477,"column_start":2,"column_end":5}},{"value":"/ In particular, the resulting pointer remains attached to the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284521,"byte_end":284590,"line_start":478,"line_end":478,"column_start":2,"column_end":71}},{"value":"/ allocated object that `self` points to. It may *not* be used to access a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284592,"byte_end":284668,"line_start":479,"line_end":479,"column_start":2,"column_end":78}},{"value":"/ different allocated object. Note that in Rust, every (stack-allocated)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284670,"byte_end":284744,"line_start":480,"line_end":480,"column_start":2,"column_end":76}},{"value":"/ variable is considered a separate allocated object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284746,"byte_end":284801,"line_start":481,"line_end":481,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284803,"byte_end":284806,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ In other words, `x.wrapping_offset((y as usize).wrapping_sub(x as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284808,"byte_end":284877,"line_start":483,"line_end":483,"column_start":2,"column_end":71}},{"value":"/ usize)` is not the same as `y`, and dereferencing it is undefined","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284879,"byte_end":284948,"line_start":484,"line_end":484,"column_start":2,"column_end":71}},{"value":"/ behavior unless `x` and `y` point into the same allocated object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":284950,"byte_end":285019,"line_start":485,"line_end":485,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285021,"byte_end":285024,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ Compared to [`offset`], this method basically delays the requirement of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285026,"byte_end":285101,"line_start":487,"line_end":487,"column_start":2,"column_end":77}},{"value":"/ staying within the same allocated object: [`offset`] is immediate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285103,"byte_end":285172,"line_start":488,"line_end":488,"column_start":2,"column_end":71}},{"value":"/ Undefined Behavior when crossing object boundaries; `wrapping_offset`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285174,"byte_end":285247,"line_start":489,"line_end":489,"column_start":2,"column_end":75}},{"value":"/ produces a pointer but still leads to Undefined Behavior if that pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285249,"byte_end":285325,"line_start":490,"line_end":490,"column_start":2,"column_end":78}},{"value":"/ is dereferenced. [`offset`] can be optimized better and is thus","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285327,"byte_end":285394,"line_start":491,"line_end":491,"column_start":2,"column_end":69}},{"value":"/ preferable in performance-sensitive code.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285396,"byte_end":285441,"line_start":492,"line_end":492,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285443,"byte_end":285446,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ If you need to cross object boundaries, destructure this pointer into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285448,"byte_end":285521,"line_start":494,"line_end":494,"column_start":2,"column_end":75}},{"value":"/ its base address and bit index, cast the base address to an integer, and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285523,"byte_end":285599,"line_start":495,"line_end":495,"column_start":2,"column_end":78}},{"value":"/ do the arithmetic in the purely integer space.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285601,"byte_end":285651,"line_start":496,"line_end":496,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285653,"byte_end":285656,"line_start":497,"line_end":497,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285658,"byte_end":285672,"line_start":498,"line_end":498,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285674,"byte_end":285677,"line_start":499,"line_end":499,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285679,"byte_end":285690,"line_start":500,"line_end":500,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285692,"byte_end":285719,"line_start":501,"line_end":501,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285721,"byte_end":285724,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ let data = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285726,"byte_end":285745,"line_start":503,"line_end":503,"column_start":2,"column_end":21}},{"value":"/ let mut ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285747,"byte_end":285803,"line_start":504,"line_end":504,"column_start":2,"column_end":58}},{"value":"/ let end = ptr.wrapping_offset(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285805,"byte_end":285842,"line_start":505,"line_end":505,"column_start":2,"column_end":39}},{"value":"/ while ptr < end {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285844,"byte_end":285865,"line_start":506,"line_end":506,"column_start":2,"column_end":23}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285867,"byte_end":285900,"line_start":507,"line_end":507,"column_start":2,"column_end":35}},{"value":"/   println!(\"{}\", unsafe { ptr.read() });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285902,"byte_end":285946,"line_start":508,"line_end":508,"column_start":2,"column_end":46}},{"value":"/   # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285948,"byte_end":285957,"line_start":509,"line_end":509,"column_start":2,"column_end":11}},{"value":"/   ptr = ptr.wrapping_offset(3);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285959,"byte_end":285994,"line_start":510,"line_end":510,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":285996,"byte_end":286001,"line_start":511,"line_end":511,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286003,"byte_end":286010,"line_start":512,"line_end":512,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286012,"byte_end":286015,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286017,"byte_end":286045,"line_start":514,"line_end":514,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286047,"byte_end":286056,"line_start":515,"line_end":515,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1736},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288671,"byte_end":288682,"line_start":597,"line_end":597,"column_start":16,"column_end":27},"name":"offset_from","qualname":"<BitPtr<M, O, T>>::offset_from","value":"pub unsafe fn offset_from(Self, Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Calculates the distance between two pointers. The returned value is in\n units of bits.","sig":null,"attributes":[{"value":"/ Calculates the distance between two pointers. The returned value is in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286213,"byte_end":286287,"line_start":521,"line_end":521,"column_start":2,"column_end":76}},{"value":"/ units of bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286289,"byte_end":286307,"line_start":522,"line_end":522,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286309,"byte_end":286312,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ This function is the inverse of [`offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286314,"byte_end":286361,"line_start":524,"line_end":524,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286363,"byte_end":286366,"line_start":525,"line_end":525,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286368,"byte_end":286382,"line_start":526,"line_end":526,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286384,"byte_end":286387,"line_start":527,"line_end":527,"column_start":2,"column_end":5}},{"value":"/ [`pointer::offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.offset_from)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286389,"byte_end":286485,"line_start":528,"line_end":528,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286487,"byte_end":286490,"line_start":529,"line_end":529,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286492,"byte_end":286504,"line_start":530,"line_end":530,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286506,"byte_end":286509,"line_start":531,"line_end":531,"column_start":2,"column_end":5}},{"value":"/ If any of the following conditions are violated, the result is Undefined","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286511,"byte_end":286587,"line_start":532,"line_end":532,"column_start":2,"column_end":78}},{"value":"/ Behavior:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286589,"byte_end":286602,"line_start":533,"line_end":533,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286604,"byte_end":286607,"line_start":534,"line_end":534,"column_start":2,"column_end":5}},{"value":"/ - Both the starting and other pointer must be either in bounds or one","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286609,"byte_end":286682,"line_start":535,"line_end":535,"column_start":2,"column_end":75}},{"value":"/   byte past the end of the same allocated object. Note that in Rust,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286684,"byte_end":286756,"line_start":536,"line_end":536,"column_start":2,"column_end":74}},{"value":"/   every (stack-allocated) variable is considered a separate allocated","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286758,"byte_end":286831,"line_start":537,"line_end":537,"column_start":2,"column_end":75}},{"value":"/   object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286833,"byte_end":286846,"line_start":538,"line_end":538,"column_start":2,"column_end":15}},{"value":"/ - Both pointers must be *derived from* a pointer to the same object.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286848,"byte_end":286920,"line_start":539,"line_end":539,"column_start":2,"column_end":74}},{"value":"/ - The distance between the pointers, **in bytes**, cannot overflow an","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286922,"byte_end":286995,"line_start":540,"line_end":540,"column_start":2,"column_end":75}},{"value":"/   `isize`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":286997,"byte_end":287011,"line_start":541,"line_end":541,"column_start":2,"column_end":16}},{"value":"/ - The distance being in bounds cannot rely on “wrapping around” the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287013,"byte_end":287088,"line_start":542,"line_end":542,"column_start":2,"column_end":73}},{"value":"/   address space.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287090,"byte_end":287110,"line_start":543,"line_end":543,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287112,"byte_end":287115,"line_start":544,"line_end":544,"column_start":2,"column_end":5}},{"value":"/ These pointers are almost always derived from [`BitSlice`] regions,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287117,"byte_end":287188,"line_start":545,"line_end":545,"column_start":2,"column_end":73}},{"value":"/ which have an encoding limitation that the high three bits of the length","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287190,"byte_end":287266,"line_start":546,"line_end":546,"column_start":2,"column_end":78}},{"value":"/ counter are zero, so `bitvec` pointers are even less likely than","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287268,"byte_end":287336,"line_start":547,"line_end":547,"column_start":2,"column_end":70}},{"value":"/ ordinary pointers to run afoul of these limitations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287338,"byte_end":287394,"line_start":548,"line_end":548,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287396,"byte_end":287399,"line_start":549,"line_end":549,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287401,"byte_end":287415,"line_start":550,"line_end":550,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287417,"byte_end":287420,"line_start":551,"line_end":551,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287422,"byte_end":287438,"line_start":552,"line_end":552,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287440,"byte_end":287443,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287445,"byte_end":287456,"line_start":554,"line_end":554,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287458,"byte_end":287485,"line_start":555,"line_end":555,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287487,"byte_end":287490,"line_start":556,"line_end":556,"column_start":2,"column_end":5}},{"value":"/ let data = 0u16;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287492,"byte_end":287512,"line_start":557,"line_end":557,"column_start":2,"column_end":22}},{"value":"/ let base = BitPtr::<_, Lsb0, _>::from_ref(&data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287514,"byte_end":287567,"line_start":558,"line_end":558,"column_start":2,"column_end":55}},{"value":"/ let low = unsafe { base.add(5) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287569,"byte_end":287606,"line_start":559,"line_end":559,"column_start":2,"column_end":39}},{"value":"/ let high = unsafe { low.add(6) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287608,"byte_end":287645,"line_start":560,"line_end":560,"column_start":2,"column_end":39}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287647,"byte_end":287659,"line_start":561,"line_end":561,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(high.offset_from(low), 6);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287661,"byte_end":287704,"line_start":562,"line_end":562,"column_start":2,"column_end":45}},{"value":"/   assert_eq!(low.offset_from(high), -6);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287706,"byte_end":287750,"line_start":563,"line_end":563,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(low.offset(6), high);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287752,"byte_end":287790,"line_start":564,"line_end":564,"column_start":2,"column_end":40}},{"value":"/   assert_eq!(high.offset(-6), low);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287792,"byte_end":287831,"line_start":565,"line_end":565,"column_start":2,"column_end":41}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287833,"byte_end":287838,"line_start":566,"line_end":566,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287840,"byte_end":287847,"line_start":567,"line_end":567,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287849,"byte_end":287852,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ *Incorrect* usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287854,"byte_end":287876,"line_start":569,"line_end":569,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287878,"byte_end":287881,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287883,"byte_end":287901,"line_start":571,"line_end":571,"column_start":2,"column_end":20}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287903,"byte_end":287930,"line_start":572,"line_end":572,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287932,"byte_end":287935,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ let a = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287937,"byte_end":287953,"line_start":574,"line_end":574,"column_start":2,"column_end":18}},{"value":"/ let b = !0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287955,"byte_end":287972,"line_start":575,"line_end":575,"column_start":2,"column_end":19}},{"value":"/ let a_ptr = BitPtr::<_, Lsb0, _>::from_ref(&a);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":287974,"byte_end":288025,"line_start":576,"line_end":576,"column_start":2,"column_end":53}},{"value":"/ let b_ptr = BitPtr::<_, Lsb0, _>::from_ref(&b);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288027,"byte_end":288078,"line_start":577,"line_end":577,"column_start":2,"column_end":53}},{"value":"/ let diff = (b_ptr.pointer() as isize)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288080,"byte_end":288121,"line_start":578,"line_end":578,"column_start":2,"column_end":43}},{"value":"/   .wrapping_sub(a_ptr.pointer() as isize)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288123,"byte_end":288168,"line_start":579,"line_end":579,"column_start":2,"column_end":47}},{"value":"/   // Remember: raw pointers are byte-addressed,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288170,"byte_end":288221,"line_start":580,"line_end":580,"column_start":2,"column_end":53}},{"value":"/   // but these are bit-addressed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288223,"byte_end":288260,"line_start":581,"line_end":581,"column_start":2,"column_end":39}},{"value":"/   .wrapping_mul(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288262,"byte_end":288285,"line_start":582,"line_end":582,"column_start":2,"column_end":25}},{"value":"/ // Create a pointer to `b`, derived from `a`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288287,"byte_end":288336,"line_start":583,"line_end":583,"column_start":2,"column_end":51}},{"value":"/ let b_ptr_2 = a_ptr.wrapping_offset(diff);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288338,"byte_end":288384,"line_start":584,"line_end":584,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288386,"byte_end":288389,"line_start":585,"line_end":585,"column_start":2,"column_end":5}},{"value":"/ // The pointers are *arithmetically* equal now","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288391,"byte_end":288441,"line_start":586,"line_end":586,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(b_ptr, b_ptr_2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288443,"byte_end":288474,"line_start":587,"line_end":587,"column_start":2,"column_end":33}},{"value":"/ // Undefined Behavior!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288476,"byte_end":288502,"line_start":588,"line_end":588,"column_start":2,"column_end":28}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288504,"byte_end":288516,"line_start":589,"line_end":589,"column_start":2,"column_end":14}},{"value":"/   b_ptr_2.offset_from(b_ptr);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288518,"byte_end":288551,"line_start":590,"line_end":590,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288553,"byte_end":288558,"line_start":591,"line_end":591,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288560,"byte_end":288567,"line_start":592,"line_end":592,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288569,"byte_end":288572,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288574,"byte_end":288614,"line_start":594,"line_end":594,"column_start":2,"column_end":42}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288616,"byte_end":288644,"line_start":595,"line_end":595,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":288646,"byte_end":288655,"line_start":596,"line_end":596,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1737},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289715,"byte_end":289718,"line_start":629,"line_end":629,"column_start":16,"column_end":19},"name":"add","qualname":"<BitPtr<M, O, T>>::add","value":"pub unsafe fn add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset(count as\n isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset(count as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289326,"byte_end":289401,"line_start":613,"line_end":613,"column_start":2,"column_end":77}},{"value":"/ isize)`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289403,"byte_end":289416,"line_start":614,"line_end":614,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289418,"byte_end":289421,"line_start":615,"line_end":615,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289423,"byte_end":289455,"line_start":616,"line_end":616,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289457,"byte_end":289460,"line_start":617,"line_end":617,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289462,"byte_end":289476,"line_start":618,"line_end":618,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289478,"byte_end":289481,"line_start":619,"line_end":619,"column_start":2,"column_end":5}},{"value":"/ [`pointer::add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.add)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289483,"byte_end":289568,"line_start":620,"line_end":620,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289570,"byte_end":289573,"line_start":621,"line_end":621,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289575,"byte_end":289587,"line_start":622,"line_end":622,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289589,"byte_end":289592,"line_start":623,"line_end":623,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289594,"byte_end":289613,"line_start":624,"line_end":624,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289615,"byte_end":289618,"line_start":625,"line_end":625,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289620,"byte_end":289648,"line_start":626,"line_end":626,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289650,"byte_end":289667,"line_start":627,"line_end":627,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289669,"byte_end":289699,"line_start":628,"line_end":628,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1738},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290150,"byte_end":290153,"line_start":648,"line_end":648,"column_start":16,"column_end":19},"name":"sub","qualname":"<BitPtr<M, O, T>>::sub","value":"pub unsafe fn sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer (convenience for `.offset((count as\n isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer (convenience for `.offset((count as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289784,"byte_end":289860,"line_start":633,"line_end":633,"column_start":2,"column_end":78}},{"value":"/ isize).wrapping_neg())`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289862,"byte_end":289891,"line_start":634,"line_end":634,"column_start":2,"column_end":31}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289893,"byte_end":289896,"line_start":635,"line_end":635,"column_start":2,"column_end":5}},{"value":"/ `count` is in units of bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289898,"byte_end":289930,"line_start":636,"line_end":636,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289932,"byte_end":289935,"line_start":637,"line_end":637,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289937,"byte_end":289951,"line_start":638,"line_end":638,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289953,"byte_end":289956,"line_start":639,"line_end":639,"column_start":2,"column_end":5}},{"value":"/ [`pointer::sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.sub)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":289958,"byte_end":290043,"line_start":640,"line_end":640,"column_start":2,"column_end":87}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290045,"byte_end":290048,"line_start":641,"line_end":641,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290050,"byte_end":290062,"line_start":642,"line_end":642,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290064,"byte_end":290067,"line_start":643,"line_end":643,"column_start":2,"column_end":5}},{"value":"/ See [`offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290069,"byte_end":290088,"line_start":644,"line_end":644,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290090,"byte_end":290093,"line_start":645,"line_end":645,"column_start":2,"column_end":5}},{"value":"/ [`offset`]: Self::offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290095,"byte_end":290123,"line_start":646,"line_end":646,"column_start":2,"column_end":30}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290125,"byte_end":290134,"line_start":647,"line_end":647,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1739},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290659,"byte_end":290671,"line_start":666,"line_end":666,"column_start":9,"column_end":21},"name":"wrapping_add","qualname":"<BitPtr<M, O, T>>::wrapping_add","value":"pub fn wrapping_add(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset(count as isize)`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290236,"byte_end":290302,"line_start":652,"line_end":652,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset(count as isize)`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290304,"byte_end":290361,"line_start":653,"line_end":653,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290363,"byte_end":290366,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290368,"byte_end":290382,"line_start":655,"line_end":655,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290384,"byte_end":290387,"line_start":656,"line_end":656,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_add`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_add)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290389,"byte_end":290492,"line_start":657,"line_end":657,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290494,"byte_end":290497,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290499,"byte_end":290511,"line_start":659,"line_end":659,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290513,"byte_end":290516,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290518,"byte_end":290546,"line_start":661,"line_end":661,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290548,"byte_end":290551,"line_start":662,"line_end":662,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290553,"byte_end":290599,"line_start":663,"line_end":663,"column_start":2,"column_end":48}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290601,"byte_end":290618,"line_start":664,"line_end":664,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290620,"byte_end":290650,"line_start":665,"line_end":665,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1740},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291178,"byte_end":291190,"line_start":684,"line_end":684,"column_start":9,"column_end":21},"name":"wrapping_sub","qualname":"<BitPtr<M, O, T>>::wrapping_sub","value":"pub fn wrapping_sub(Self, usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Calculates the offset from a pointer using wrapping arithmetic\n (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","sig":null,"attributes":[{"value":"/ Calculates the offset from a pointer using wrapping arithmetic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290746,"byte_end":290812,"line_start":670,"line_end":670,"column_start":2,"column_end":68}},{"value":"/ (convenience for `.wrapping_offset((count as isize).wrapping_neg())`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290814,"byte_end":290888,"line_start":671,"line_end":671,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290890,"byte_end":290893,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290895,"byte_end":290909,"line_start":673,"line_end":673,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290911,"byte_end":290914,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ [`pointer::wrapping_sub`](https://doc.rust-lang.org/std/primitive.pointer.html#method.wrapping_sub)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":290916,"byte_end":291019,"line_start":675,"line_end":675,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291021,"byte_end":291024,"line_start":676,"line_end":676,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291026,"byte_end":291038,"line_start":677,"line_end":677,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291040,"byte_end":291043,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ See [`wrapping_offset`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291045,"byte_end":291073,"line_start":679,"line_end":679,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291075,"byte_end":291078,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ [`wrapping_offset`]: Self::wrapping_offset","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291080,"byte_end":291126,"line_start":681,"line_end":681,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291128,"byte_end":291137,"line_start":682,"line_end":682,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291139,"byte_end":291169,"line_start":683,"line_end":683,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1741},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291578,"byte_end":291582,"line_start":700,"line_end":700,"column_start":16,"column_end":20},"name":"read","qualname":"<BitPtr<M, O, T>>::read","value":"pub unsafe fn read(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `*self`.","sig":null,"attributes":[{"value":"/ Reads the bit from `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291282,"byte_end":291313,"line_start":688,"line_end":688,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291315,"byte_end":291318,"line_start":689,"line_end":689,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291320,"byte_end":291334,"line_start":690,"line_end":690,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291336,"byte_end":291339,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291341,"byte_end":291428,"line_start":692,"line_end":692,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291430,"byte_end":291433,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291435,"byte_end":291447,"line_start":694,"line_end":694,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291449,"byte_end":291452,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291454,"byte_end":291509,"line_start":696,"line_end":696,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291511,"byte_end":291514,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read`]: crate::ptr::read","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291516,"byte_end":291551,"line_start":698,"line_end":698,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291553,"byte_end":291562,"line_start":699,"line_end":699,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1742},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292213,"byte_end":292226,"line_start":722,"line_end":722,"column_start":16,"column_end":29},"name":"read_volatile","qualname":"<BitPtr<M, O, T>>::read_volatile","value":"pub unsafe fn read_volatile(Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `self`.","sig":null,"attributes":[{"value":"/ Performs a volatile read of the bit from `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291676,"byte_end":291728,"line_start":706,"line_end":706,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291730,"byte_end":291733,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291735,"byte_end":291801,"line_start":708,"line_end":708,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291803,"byte_end":291877,"line_start":709,"line_end":709,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291879,"byte_end":291903,"line_start":710,"line_end":710,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291905,"byte_end":291908,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291910,"byte_end":291924,"line_start":712,"line_end":712,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291926,"byte_end":291929,"line_start":713,"line_end":713,"column_start":2,"column_end":5}},{"value":"/ [`pointer::read_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.read_volatile)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":291931,"byte_end":292036,"line_start":714,"line_end":714,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292038,"byte_end":292041,"line_start":715,"line_end":715,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292043,"byte_end":292055,"line_start":716,"line_end":716,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292057,"byte_end":292060,"line_start":717,"line_end":717,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::read_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292062,"byte_end":292126,"line_start":718,"line_end":718,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292128,"byte_end":292131,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ [`ptr::read_volatile`]: crate::ptr::read_volatile","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292133,"byte_end":292186,"line_start":720,"line_end":720,"column_start":2,"column_end":55}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292188,"byte_end":292197,"line_start":721,"line_end":721,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1743},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292742,"byte_end":292749,"line_start":741,"line_end":741,"column_start":16,"column_end":23},"name":"copy_to","qualname":"<BitPtr<M, O, T>>::copy_to","value":"pub unsafe fn copy_to<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292311,"byte_end":292384,"line_start":726,"line_end":726,"column_start":2,"column_end":75}},{"value":"/ may overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292386,"byte_end":292402,"line_start":727,"line_end":727,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292404,"byte_end":292407,"line_start":728,"line_end":728,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as [`ptr::copy`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292409,"byte_end":292471,"line_start":729,"line_end":729,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292473,"byte_end":292476,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292478,"byte_end":292492,"line_start":731,"line_end":731,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292494,"byte_end":292497,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292499,"byte_end":292592,"line_start":733,"line_end":733,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292594,"byte_end":292597,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292599,"byte_end":292611,"line_start":735,"line_end":735,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292613,"byte_end":292616,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292618,"byte_end":292673,"line_start":737,"line_end":737,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292675,"byte_end":292678,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292680,"byte_end":292715,"line_start":739,"line_end":739,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":292717,"byte_end":292726,"line_start":740,"line_end":740,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1746},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294033,"byte_end":294055,"line_start":788,"line_end":788,"column_start":16,"column_end":38},"name":"copy_to_nonoverlapping","qualname":"<BitPtr<M, O, T>>::copy_to_nonoverlapping","value":"pub unsafe fn copy_to_nonoverlapping<O2, T2>(Self, BitPtr<Mut, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `self` to `dest`. The source and destination\n may *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `self` to `dest`. The source and destination","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293501,"byte_end":293574,"line_start":772,"line_end":772,"column_start":2,"column_end":75}},{"value":"/ may *not* overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293576,"byte_end":293598,"line_start":773,"line_end":773,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293600,"byte_end":293603,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *same* argument order as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293605,"byte_end":293652,"line_start":775,"line_end":775,"column_start":2,"column_end":49}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293654,"byte_end":293687,"line_start":776,"line_end":776,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293689,"byte_end":293692,"line_start":777,"line_end":777,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293694,"byte_end":293708,"line_start":778,"line_end":778,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293710,"byte_end":293713,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_to_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_to_nonoverlapping)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293715,"byte_end":293838,"line_start":780,"line_end":780,"column_start":2,"column_end":125}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293840,"byte_end":293843,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293845,"byte_end":293857,"line_start":782,"line_end":782,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293859,"byte_end":293862,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293864,"byte_end":293934,"line_start":784,"line_end":784,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293936,"byte_end":293939,"line_start":785,"line_end":785,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`](crate::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":293941,"byte_end":294006,"line_start":786,"line_end":786,"column_start":2,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294008,"byte_end":294017,"line_start":787,"line_end":787,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1749},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296254,"byte_end":296266,"line_start":853,"line_end":853,"column_start":9,"column_end":21},"name":"align_offset","qualname":"<BitPtr<M, O, T>>::align_offset","value":"pub fn align_offset(Self, usize) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Computes the offset (in bits) that needs to be applied to the pointer in\n order to make it aligned to `align`.","sig":null,"attributes":[{"value":"/ Computes the offset (in bits) that needs to be applied to the pointer in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294260,"byte_end":294336,"line_start":801,"line_end":801,"column_start":2,"column_end":78}},{"value":"/ order to make it aligned to `align`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294338,"byte_end":294378,"line_start":802,"line_end":802,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294380,"byte_end":294383,"line_start":803,"line_end":803,"column_start":2,"column_end":5}},{"value":"/ “Alignment” here means that the pointer is selecting the start bit of a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294385,"byte_end":294464,"line_start":804,"line_end":804,"column_start":2,"column_end":77}},{"value":"/ memory location whose address satisfies the requested alignment.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294466,"byte_end":294534,"line_start":805,"line_end":805,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294536,"byte_end":294539,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ `align` is measured in **bytes**. If you wish to align your bit-pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294541,"byte_end":294616,"line_start":807,"line_end":807,"column_start":2,"column_end":77}},{"value":"/ to a specific fraction (½, ¼, or ⅛ of one byte), please file an issue","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294618,"byte_end":294695,"line_start":808,"line_end":808,"column_start":2,"column_end":75}},{"value":"/ and this functionality will be added to [`BitIdx`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294697,"byte_end":294752,"line_start":809,"line_end":809,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294754,"byte_end":294757,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294759,"byte_end":294773,"line_start":811,"line_end":811,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294775,"byte_end":294778,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ [`pointer::align_offset`](https://doc.rust-lang.org/std/primitive.pointer.html#method.align_offset)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294780,"byte_end":294883,"line_start":813,"line_end":813,"column_start":2,"column_end":105}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294885,"byte_end":294888,"line_start":814,"line_end":814,"column_start":2,"column_end":5}},{"value":"/ If the base-element address of the pointer is already aligned to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294890,"byte_end":294958,"line_start":815,"line_end":815,"column_start":2,"column_end":70}},{"value":"/ `align`, then this will return the bit-offset required to select the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":294960,"byte_end":295032,"line_start":816,"line_end":816,"column_start":2,"column_end":74}},{"value":"/ first bit of the successor element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295034,"byte_end":295073,"line_start":817,"line_end":817,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295075,"byte_end":295078,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ If it is not possible to align the pointer, the implementation returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295080,"byte_end":295154,"line_start":819,"line_end":819,"column_start":2,"column_end":76}},{"value":"/ `usize::MAX`. It is permissible for the implementation to *always*","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295156,"byte_end":295226,"line_start":820,"line_end":820,"column_start":2,"column_end":72}},{"value":"/ return `usize::MAX`. Only your algorithm’s performance can depend on","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295228,"byte_end":295302,"line_start":821,"line_end":821,"column_start":2,"column_end":74}},{"value":"/ getting a usable offset here, not its correctness.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295304,"byte_end":295358,"line_start":822,"line_end":822,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295360,"byte_end":295363,"line_start":823,"line_end":823,"column_start":2,"column_end":5}},{"value":"/ The offset is expressed in number of bits, and not `T` elements or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295365,"byte_end":295435,"line_start":824,"line_end":824,"column_start":2,"column_end":72}},{"value":"/ bytes. The value returned can be used with the [`wrapping_add`] method.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295437,"byte_end":295512,"line_start":825,"line_end":825,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295514,"byte_end":295517,"line_start":826,"line_end":826,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295519,"byte_end":295531,"line_start":827,"line_end":827,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295533,"byte_end":295536,"line_start":828,"line_end":828,"column_start":2,"column_end":5}},{"value":"/ There are no guarantees whatsoëver that offsetting the pointer will not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295538,"byte_end":295614,"line_start":829,"line_end":829,"column_start":2,"column_end":77}},{"value":"/ overflow or go beyond the allocation that the pointer points into. It is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295616,"byte_end":295692,"line_start":830,"line_end":830,"column_start":2,"column_end":78}},{"value":"/ up to the caller to ensure that the returned offset is correct in all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295694,"byte_end":295767,"line_start":831,"line_end":831,"column_start":2,"column_end":75}},{"value":"/ terms other than alignment.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295769,"byte_end":295800,"line_start":832,"line_end":832,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295802,"byte_end":295805,"line_start":833,"line_end":833,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295807,"byte_end":295819,"line_start":834,"line_end":834,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295821,"byte_end":295824,"line_start":835,"line_end":835,"column_start":2,"column_end":5}},{"value":"/ The function panics if `align` is not a power-of-two.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295826,"byte_end":295883,"line_start":836,"line_end":836,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295885,"byte_end":295888,"line_start":837,"line_end":837,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295890,"byte_end":295904,"line_start":838,"line_end":838,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295906,"byte_end":295909,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295911,"byte_end":295922,"line_start":840,"line_end":840,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295924,"byte_end":295951,"line_start":841,"line_end":841,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295953,"byte_end":295956,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ let data = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295958,"byte_end":295982,"line_start":843,"line_end":843,"column_start":2,"column_end":26}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_ref(&data[0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":295984,"byte_end":296039,"line_start":844,"line_end":844,"column_start":2,"column_end":57}},{"value":"/ let ptr = unsafe { ptr.add(2) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296041,"byte_end":296077,"line_start":845,"line_end":845,"column_start":2,"column_end":38}},{"value":"/ let count = ptr.align_offset(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296079,"byte_end":296115,"line_start":846,"line_end":846,"column_start":2,"column_end":38}},{"value":"/ assert!(count > 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296117,"byte_end":296140,"line_start":847,"line_end":847,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296142,"byte_end":296149,"line_start":848,"line_end":848,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296151,"byte_end":296154,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ [`BitIdx`]: crate::index::BitIdx","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296156,"byte_end":296192,"line_start":850,"line_end":850,"column_start":2,"column_end":38}},{"value":"/ [`wrapping_add`]: Self::wrapping_add","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296194,"byte_end":296234,"line_start":851,"line_end":851,"column_start":2,"column_end":42}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296236,"byte_end":296245,"line_start":852,"line_end":852,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1753},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296899,"byte_end":296907,"line_start":882,"line_end":882,"column_start":9,"column_end":17},"name":"from_ref","qualname":"<BitPtr<Const, O, T>>::from_ref","value":"pub fn from_ref(&T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296660,"byte_end":296712,"line_start":872,"line_end":872,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296714,"byte_end":296717,"line_start":873,"line_end":873,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296719,"byte_end":296735,"line_start":874,"line_end":874,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296737,"byte_end":296740,"line_start":875,"line_end":875,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A borrowed memory element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296742,"byte_end":296782,"line_start":876,"line_end":876,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296784,"byte_end":296787,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296789,"byte_end":296802,"line_start":878,"line_end":878,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296804,"byte_end":296807,"line_start":879,"line_end":879,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296809,"byte_end":296879,"line_start":880,"line_end":880,"column_start":2,"column_end":72}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296881,"byte_end":296890,"line_start":881,"line_end":881,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1754},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297294,"byte_end":297302,"line_start":898,"line_end":898,"column_start":9,"column_end":17},"name":"from_ptr","qualname":"<BitPtr<Const, O, T>>::from_ptr","value":"pub fn from_ptr(*const T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296972,"byte_end":297034,"line_start":886,"line_end":886,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297036,"byte_end":297039,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297041,"byte_end":297057,"line_start":888,"line_end":888,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297059,"byte_end":297062,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A read-only element address.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297064,"byte_end":297106,"line_start":890,"line_end":890,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297108,"byte_end":297111,"line_start":891,"line_end":891,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297113,"byte_end":297126,"line_start":892,"line_end":892,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297128,"byte_end":297131,"line_start":893,"line_end":893,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the `*elem` location, if","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297133,"byte_end":297206,"line_start":894,"line_end":894,"column_start":2,"column_end":75}},{"value":"/ `elem` is well-formed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297208,"byte_end":297234,"line_start":895,"line_end":895,"column_start":2,"column_end":28}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297236,"byte_end":297253,"line_start":896,"line_end":896,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297255,"byte_end":297285,"line_start":897,"line_end":897,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1755},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298242,"byte_end":298252,"line_start":926,"line_end":926,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitPtr<Const, O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297383,"byte_end":297432,"line_start":902,"line_end":902,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297434,"byte_end":297437,"line_start":903,"line_end":903,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_ref`] in that the returned pointer keeps its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297439,"byte_end":297512,"line_start":904,"line_end":904,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297514,"byte_end":297586,"line_start":905,"line_end":905,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_ref(&slice[0])` narrows its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297588,"byte_end":297658,"line_start":906,"line_end":906,"column_start":2,"column_end":72}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297660,"byte_end":297735,"line_start":907,"line_end":907,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297737,"byte_end":297797,"line_start":908,"line_end":908,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297799,"byte_end":297802,"line_start":909,"line_end":909,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297804,"byte_end":297820,"line_start":910,"line_end":910,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297822,"byte_end":297825,"line_start":911,"line_end":911,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An immutabily borrowed slice of memory.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297827,"byte_end":297881,"line_start":912,"line_end":912,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297883,"byte_end":297886,"line_start":913,"line_end":913,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297888,"byte_end":297901,"line_start":914,"line_end":914,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297903,"byte_end":297906,"line_start":915,"line_end":915,"column_start":2,"column_end":5}},{"value":"/ A read-only bit-pointer to the zeroth bit in the base location of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297908,"byte_end":297981,"line_start":916,"line_end":916,"column_start":2,"column_end":75}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297983,"byte_end":297993,"line_start":917,"line_end":917,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":297995,"byte_end":297998,"line_start":918,"line_end":918,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298000,"byte_end":298075,"line_start":919,"line_end":919,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298077,"byte_end":298147,"line_start":920,"line_end":920,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298149,"byte_end":298159,"line_start":921,"line_end":921,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298161,"byte_end":298164,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298166,"byte_end":298188,"line_start":923,"line_end":923,"column_start":2,"column_end":24}},{"value":"/ [`from_ref`]: Self::from_ref","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298190,"byte_end":298222,"line_start":924,"line_end":924,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298224,"byte_end":298233,"line_start":925,"line_end":925,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1756},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298512,"byte_end":298519,"line_start":937,"line_end":937,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Const, O, T>>::pointer","value":"pub fn pointer(&Self) -> *const T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298378,"byte_end":298450,"line_start":933,"line_end":933,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298452,"byte_end":298460,"line_start":934,"line_end":934,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298462,"byte_end":298471,"line_start":935,"line_end":935,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298473,"byte_end":298503,"line_start":936,"line_end":936,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1760},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299342,"byte_end":299350,"line_start":968,"line_end":968,"column_start":9,"column_end":17},"name":"from_mut","qualname":"<BitPtr<Mut, O, T>>::from_mut","value":"pub fn from_mut(&mut T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from an element reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from an element reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298642,"byte_end":298694,"line_start":947,"line_end":947,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298696,"byte_end":298699,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298701,"byte_end":298717,"line_start":949,"line_end":949,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298719,"byte_end":298722,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A mutably borrowed memory element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298724,"byte_end":298772,"line_start":951,"line_end":951,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298774,"byte_end":298777,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298779,"byte_end":298792,"line_start":953,"line_end":953,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298794,"byte_end":298797,"line_start":954,"line_end":954,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298799,"byte_end":298873,"line_start":955,"line_end":955,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298875,"byte_end":298878,"line_start":956,"line_end":956,"column_start":2,"column_end":5}},{"value":"/ Note that even if `elem` is an address within a contiguous array or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298880,"byte_end":298951,"line_start":957,"line_end":957,"column_start":2,"column_end":73}},{"value":"/ slice, the returned bit-pointer only has provenance for the `elem`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298953,"byte_end":299023,"line_start":958,"line_end":958,"column_start":2,"column_end":72}},{"value":"/ location, and no other.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299025,"byte_end":299052,"line_start":959,"line_end":959,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299054,"byte_end":299057,"line_start":960,"line_end":960,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299059,"byte_end":299071,"line_start":961,"line_end":961,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299073,"byte_end":299076,"line_start":962,"line_end":962,"column_start":2,"column_end":5}},{"value":"/ The exclusive borrow of `elem` is released after this function returns.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299078,"byte_end":299153,"line_start":963,"line_end":963,"column_start":2,"column_end":77}},{"value":"/ However, you must not use any other pointer than that returned by this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299155,"byte_end":299229,"line_start":964,"line_end":964,"column_start":2,"column_end":76}},{"value":"/ function to view or modify `*elem`, unless the `T` type supports aliased","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299231,"byte_end":299307,"line_start":965,"line_end":965,"column_start":2,"column_end":78}},{"value":"/ mutation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299309,"byte_end":299322,"line_start":966,"line_end":966,"column_start":2,"column_end":15}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299324,"byte_end":299333,"line_start":967,"line_end":967,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1761},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299749,"byte_end":299761,"line_start":984,"line_end":984,"column_start":9,"column_end":21},"name":"from_mut_ptr","qualname":"<BitPtr<Mut, O, T>>::from_mut_ptr","value":"pub fn from_mut_ptr(*mut T) -> Result<Self, BitPtrError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Attempts to construct a `BitPtr` from an element location.","sig":null,"attributes":[{"value":"/ Attempts to construct a `BitPtr` from an element location.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299419,"byte_end":299481,"line_start":972,"line_end":972,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299483,"byte_end":299486,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299488,"byte_end":299504,"line_start":974,"line_end":974,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299506,"byte_end":299509,"line_start":975,"line_end":975,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A write-capable element address.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299511,"byte_end":299557,"line_start":976,"line_end":976,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299559,"byte_end":299562,"line_start":977,"line_end":977,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299564,"byte_end":299577,"line_start":978,"line_end":978,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299579,"byte_end":299582,"line_start":979,"line_end":979,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the `*elem` location,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299584,"byte_end":299658,"line_start":980,"line_end":980,"column_start":2,"column_end":76}},{"value":"/ if `elem` is well-formed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299660,"byte_end":299689,"line_start":981,"line_end":981,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299691,"byte_end":299708,"line_start":982,"line_end":982,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299710,"byte_end":299740,"line_start":983,"line_end":983,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1762},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300704,"byte_end":300718,"line_start":1012,"line_end":1012,"column_start":9,"column_end":23},"name":"from_mut_slice","qualname":"<BitPtr<Mut, O, T>>::from_mut_slice","value":"pub fn from_mut_slice(&mut [T]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a `BitPtr` from a slice reference.","sig":null,"attributes":[{"value":"/ Constructs a `BitPtr` from a slice reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299840,"byte_end":299889,"line_start":988,"line_end":988,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299891,"byte_end":299894,"line_start":989,"line_end":989,"column_start":2,"column_end":5}},{"value":"/ This differs from [`from_mut`] in that the returned pointer keeps its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299896,"byte_end":299969,"line_start":990,"line_end":990,"column_start":2,"column_end":75}},{"value":"/ provenance over the entire slice, whereas producing a pointer to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":299971,"byte_end":300043,"line_start":991,"line_end":991,"column_start":2,"column_end":74}},{"value":"/ base bit of a slice with `BitPtr::from_mut(&mut slice[0])` narrows its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300045,"byte_end":300119,"line_start":992,"line_end":992,"column_start":2,"column_end":76}},{"value":"/ provenance to only the `slice[0]` element, and calling [`add`] to leave","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300121,"byte_end":300196,"line_start":993,"line_end":993,"column_start":2,"column_end":77}},{"value":"/ that element, even remaining in the slice, may cause UB.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300198,"byte_end":300258,"line_start":994,"line_end":994,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300260,"byte_end":300263,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300265,"byte_end":300281,"line_start":996,"line_end":996,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300283,"byte_end":300286,"line_start":997,"line_end":997,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A mutabily borrowed slice of memory.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300288,"byte_end":300339,"line_start":998,"line_end":998,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300341,"byte_end":300344,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300346,"byte_end":300359,"line_start":1000,"line_end":1000,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300361,"byte_end":300364,"line_start":1001,"line_end":1001,"column_start":2,"column_end":5}},{"value":"/ A write-capable bit-pointer to the zeroth bit in the base location of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300366,"byte_end":300439,"line_start":1002,"line_end":1002,"column_start":2,"column_end":75}},{"value":"/ the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300441,"byte_end":300455,"line_start":1003,"line_end":1003,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300457,"byte_end":300460,"line_start":1004,"line_end":1004,"column_start":2,"column_end":5}},{"value":"/ This pointer has provenance over the entire `slice`, and may safely use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300462,"byte_end":300537,"line_start":1005,"line_end":1005,"column_start":2,"column_end":77}},{"value":"/ [`add`] to traverse memory elements as long as it stays within the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300539,"byte_end":300609,"line_start":1006,"line_end":1006,"column_start":2,"column_end":72}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300611,"byte_end":300621,"line_start":1007,"line_end":1007,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300623,"byte_end":300626,"line_start":1008,"line_end":1008,"column_start":2,"column_end":5}},{"value":"/ [`add`]: Self::add","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300628,"byte_end":300650,"line_start":1009,"line_end":1009,"column_start":2,"column_end":24}},{"value":"/ [`from_mut`]: Self::from_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300652,"byte_end":300684,"line_start":1010,"line_end":1010,"column_start":2,"column_end":34}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300686,"byte_end":300695,"line_start":1011,"line_end":1011,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1763},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300986,"byte_end":300993,"line_start":1023,"line_end":1023,"column_start":9,"column_end":16},"name":"pointer","qualname":"<BitPtr<Mut, O, T>>::pointer","value":"pub fn pointer(&Self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":" Gets the pointer to the base memory location containing the referent\n bit.\n","sig":null,"attributes":[{"value":"/ Gets the pointer to the base memory location containing the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300852,"byte_end":300924,"line_start":1019,"line_end":1019,"column_start":2,"column_end":74}},{"value":"/ bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300926,"byte_end":300934,"line_start":1020,"line_end":1020,"column_start":2,"column_end":10}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300936,"byte_end":300945,"line_start":1021,"line_end":1021,"column_start":2,"column_end":11}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":300947,"byte_end":300977,"line_start":1022,"line_end":1022,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1764},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302708,"byte_end":302714,"line_start":1076,"line_end":1076,"column_start":16,"column_end":22},"name":"as_mut","qualname":"<BitPtr<Mut, O, T>>::as_mut","value":"pub unsafe fn as_mut<'a>(Self) -> Option<BitRef>","parent":null,"children":[],"decl_id":null,"docs":" Produces a proxy mutable reference to the referent bit.","sig":null,"attributes":[{"value":"/ Produces a proxy mutable reference to the referent bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301086,"byte_end":301145,"line_start":1029,"line_end":1029,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301147,"byte_end":301150,"line_start":1030,"line_end":1030,"column_start":2,"column_end":5}},{"value":"/ Because `BitPtr` is a non-null, well-aligned, pointer, this never","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301152,"byte_end":301221,"line_start":1031,"line_end":1031,"column_start":2,"column_end":71}},{"value":"/ returns `None`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301223,"byte_end":301242,"line_start":1032,"line_end":1032,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301244,"byte_end":301247,"line_start":1033,"line_end":1033,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301249,"byte_end":301263,"line_start":1034,"line_end":1034,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301265,"byte_end":301268,"line_start":1035,"line_end":1035,"column_start":2,"column_end":5}},{"value":"/ [`pointer::as_mut`](https://doc.rust-lang.org/std/primitive.pointer.html#method.as_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301270,"byte_end":301361,"line_start":1036,"line_end":1036,"column_start":2,"column_end":93}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301363,"byte_end":301366,"line_start":1037,"line_end":1037,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301368,"byte_end":301389,"line_start":1038,"line_end":1038,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301391,"byte_end":301394,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ This produces a proxy type rather than a true reference. The proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301396,"byte_end":301466,"line_start":1040,"line_end":1040,"column_start":2,"column_end":72}},{"value":"/ implements `DerefMut<Target = bool>`, and can be converted to `&mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301468,"byte_end":301539,"line_start":1041,"line_end":1041,"column_start":2,"column_end":73}},{"value":"/ bool` with `&mut *`. Writes to the proxy are not reflected in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301541,"byte_end":301610,"line_start":1042,"line_end":1042,"column_start":2,"column_end":71}},{"value":"/ proxied location until the proxy is destroyed, either through `Drop` or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301612,"byte_end":301687,"line_start":1043,"line_end":1043,"column_start":2,"column_end":77}},{"value":"/ with its [`set`] method.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301689,"byte_end":301717,"line_start":1044,"line_end":1044,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301719,"byte_end":301722,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ The proxy must be bound as `mut` in order to write through the binding.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301724,"byte_end":301799,"line_start":1046,"line_end":1046,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301801,"byte_end":301804,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301806,"byte_end":301818,"line_start":1048,"line_end":1048,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301820,"byte_end":301823,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ Since `BitPtr` does not permit null or misaligned pointers, this method","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301825,"byte_end":301900,"line_start":1050,"line_end":1050,"column_start":2,"column_end":77}},{"value":"/ will always dereference the pointer and you must ensure the following","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301902,"byte_end":301975,"line_start":1051,"line_end":1051,"column_start":2,"column_end":75}},{"value":"/ conditions are met:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":301977,"byte_end":302000,"line_start":1052,"line_end":1052,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302002,"byte_end":302005,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ - the pointer must be dereferencable as defined in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302007,"byte_end":302082,"line_start":1054,"line_end":1054,"column_start":2,"column_end":77}},{"value":"/   documentation","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302084,"byte_end":302103,"line_start":1055,"line_end":1055,"column_start":2,"column_end":21}},{"value":"/ - the pointer must point to an initialized instance of `T`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302105,"byte_end":302167,"line_start":1056,"line_end":1056,"column_start":2,"column_end":64}},{"value":"/ - you must ensure that no other pointer will race to modify the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302169,"byte_end":302245,"line_start":1057,"line_end":1057,"column_start":2,"column_end":78}},{"value":"/   location while this call is reading from memory to produce the proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302247,"byte_end":302321,"line_start":1058,"line_end":1058,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302323,"byte_end":302326,"line_start":1059,"line_end":1059,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302328,"byte_end":302342,"line_start":1060,"line_end":1060,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302344,"byte_end":302347,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302349,"byte_end":302360,"line_start":1062,"line_end":1062,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302362,"byte_end":302389,"line_start":1063,"line_end":1063,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302391,"byte_end":302394,"line_start":1064,"line_end":1064,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302396,"byte_end":302419,"line_start":1065,"line_end":1065,"column_start":2,"column_end":25}},{"value":"/ let ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302421,"byte_end":302477,"line_start":1066,"line_end":1066,"column_start":2,"column_end":58}},{"value":"/ let mut val = unsafe { ptr.as_mut() }.unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302479,"byte_end":302530,"line_start":1067,"line_end":1067,"column_start":2,"column_end":53}},{"value":"/ assert!(!*val);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302532,"byte_end":302551,"line_start":1068,"line_end":1068,"column_start":2,"column_end":21}},{"value":"/ *val = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302553,"byte_end":302569,"line_start":1069,"line_end":1069,"column_start":2,"column_end":18}},{"value":"/ assert!(*val);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302571,"byte_end":302589,"line_start":1070,"line_end":1070,"column_start":2,"column_end":20}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302591,"byte_end":302598,"line_start":1071,"line_end":1071,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302600,"byte_end":302603,"line_start":1072,"line_end":1072,"column_start":2,"column_end":5}},{"value":"/ [`set`]: crate::ptr::BitRef::set","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302605,"byte_end":302641,"line_start":1073,"line_end":1073,"column_start":2,"column_end":38}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302643,"byte_end":302660,"line_start":1074,"line_end":1074,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302662,"byte_end":302692,"line_start":1075,"line_end":1075,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1766},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303277,"byte_end":303286,"line_start":1096,"line_end":1096,"column_start":16,"column_end":25},"name":"copy_from","qualname":"<BitPtr<Mut, O, T>>::copy_from","value":"pub unsafe fn copy_from<O2, T2>(Self, BitPtr<Const, O2, T2>, usize) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302799,"byte_end":302875,"line_start":1080,"line_end":1080,"column_start":2,"column_end":78}},{"value":"/ overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302877,"byte_end":302889,"line_start":1081,"line_end":1081,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302891,"byte_end":302894,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ Note: this has the *opposite* argument order of [`ptr::copy`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302896,"byte_end":302962,"line_start":1083,"line_end":1083,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302964,"byte_end":302967,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302969,"byte_end":302983,"line_start":1085,"line_end":1085,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302985,"byte_end":302988,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":302990,"byte_end":303087,"line_start":1087,"line_end":1087,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303089,"byte_end":303092,"line_start":1088,"line_end":1088,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303094,"byte_end":303106,"line_start":1089,"line_end":1089,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303108,"byte_end":303111,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303113,"byte_end":303168,"line_start":1091,"line_end":1091,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303170,"byte_end":303173,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy`]: crate::ptr::copy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303175,"byte_end":303210,"line_start":1093,"line_end":1093,"column_start":2,"column_end":37}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303212,"byte_end":303229,"line_start":1094,"line_end":1094,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303231,"byte_end":303261,"line_start":1095,"line_end":1095,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1769},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304006,"byte_end":304030,"line_start":1124,"line_end":1124,"column_start":16,"column_end":40},"name":"copy_from_nonoverlapping","qualname":"<BitPtr<Mut, O, T>>::copy_from_nonoverlapping","value":"pub unsafe fn copy_from_nonoverlapping<O2,\n                                       T2>(Self, BitPtr<Const, O2, T2>, usize)\nwhere O2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `self`. The source and destination may\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `self`. The source and destination may","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303427,"byte_end":303503,"line_start":1107,"line_end":1107,"column_start":2,"column_end":78}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303505,"byte_end":303523,"line_start":1108,"line_end":1108,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303525,"byte_end":303528,"line_start":1109,"line_end":1109,"column_start":2,"column_end":5}},{"value":"/ NOTE: this has the *opposite* argument order of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303530,"byte_end":303581,"line_start":1110,"line_end":1110,"column_start":2,"column_end":53}},{"value":"/ [`ptr::copy_nonoverlapping`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303583,"byte_end":303616,"line_start":1111,"line_end":1111,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303618,"byte_end":303621,"line_start":1112,"line_end":1112,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303623,"byte_end":303637,"line_start":1113,"line_end":1113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303639,"byte_end":303642,"line_start":1114,"line_end":1114,"column_start":2,"column_end":5}},{"value":"/ [`pointer::copy_from_nonoverlapping`](https://doc.rust-lang.org/std/primitive.pointer.html#method.copy_from_nonoverlapping)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303644,"byte_end":303771,"line_start":1115,"line_end":1115,"column_start":2,"column_end":129}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303773,"byte_end":303776,"line_start":1116,"line_end":1116,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303778,"byte_end":303790,"line_start":1117,"line_end":1117,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303792,"byte_end":303795,"line_start":1118,"line_end":1118,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::copy_nonoverlapping`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303797,"byte_end":303867,"line_start":1119,"line_end":1119,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303869,"byte_end":303872,"line_start":1120,"line_end":1120,"column_start":2,"column_end":5}},{"value":"/ [`ptr::copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303874,"byte_end":303939,"line_start":1121,"line_end":1121,"column_start":2,"column_end":67}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303941,"byte_end":303958,"line_start":1122,"line_end":1122,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":303960,"byte_end":303990,"line_start":1123,"line_end":1123,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":1772},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304535,"byte_end":304540,"line_start":1146,"line_end":1146,"column_start":16,"column_end":21},"name":"write","qualname":"<BitPtr<Mut, O, T>>::write","value":"pub unsafe fn write(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Overwrites a memory location with the given bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304186,"byte_end":304238,"line_start":1135,"line_end":1135,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304240,"byte_end":304243,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304245,"byte_end":304301,"line_start":1137,"line_end":1137,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304303,"byte_end":304306,"line_start":1138,"line_end":1138,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304308,"byte_end":304322,"line_start":1139,"line_end":1139,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304324,"byte_end":304327,"line_start":1140,"line_end":1140,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304329,"byte_end":304418,"line_start":1141,"line_end":1141,"column_start":2,"column_end":91}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304420,"byte_end":304423,"line_start":1142,"line_end":1142,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write`]: crate::ptr::write","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304425,"byte_end":304462,"line_start":1143,"line_end":1143,"column_start":2,"column_end":39}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304464,"byte_end":304473,"line_start":1144,"line_end":1144,"column_start":2,"column_end":11}},{"value":"allow(clippy :: clippy :: missing_safety_doc)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304475,"byte_end":304519,"line_start":1145,"line_end":1145,"column_start":2,"column_end":46}}]},{"kind":"Method","id":{"krate":0,"index":1773},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305530,"byte_end":305544,"line_start":1172,"line_end":1172,"column_start":16,"column_end":30},"name":"write_volatile","qualname":"<BitPtr<Mut, O, T>>::write_volatile","value":"pub unsafe fn write_volatile(Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"/ Performs a volatile write of a memory location with the given bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304629,"byte_end":304699,"line_start":1150,"line_end":1150,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304701,"byte_end":304704,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ Because processors do not have single-bit write instructions, this must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304706,"byte_end":304781,"line_start":1152,"line_end":1152,"column_start":2,"column_end":77}},{"value":"/ perform a volatile read of the location, perform the bit modification","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304783,"byte_end":304856,"line_start":1153,"line_end":1153,"column_start":2,"column_end":75}},{"value":"/ within the processor register, and then perform a volatile write back to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304858,"byte_end":304934,"line_start":1154,"line_end":1154,"column_start":2,"column_end":78}},{"value":"/ memory. These three steps are guaranteed to be sequential, but are not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":304936,"byte_end":305010,"line_start":1155,"line_end":1155,"column_start":2,"column_end":76}},{"value":"/ guaranteed to be atomic.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305012,"byte_end":305040,"line_start":1156,"line_end":1156,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305042,"byte_end":305045,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ Volatile operations are intended to act on I/O memory, and are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305047,"byte_end":305113,"line_start":1158,"line_end":1158,"column_start":2,"column_end":68}},{"value":"/ guaranteed to not be elided or reördered by the compiler across other","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305115,"byte_end":305189,"line_start":1159,"line_end":1159,"column_start":2,"column_end":75}},{"value":"/ volatile operations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305191,"byte_end":305215,"line_start":1160,"line_end":1160,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305217,"byte_end":305220,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305222,"byte_end":305236,"line_start":1162,"line_end":1162,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305238,"byte_end":305241,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ [`pointer::write_volatile`](https://doc.rust-lang.org/std/primitive.pointer.html#method.write_volatile)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305243,"byte_end":305350,"line_start":1164,"line_end":1164,"column_start":2,"column_end":109}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305352,"byte_end":305355,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305357,"byte_end":305369,"line_start":1166,"line_end":1166,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305371,"byte_end":305374,"line_start":1167,"line_end":1167,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::write_volatile`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305376,"byte_end":305441,"line_start":1168,"line_end":1168,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305443,"byte_end":305446,"line_start":1169,"line_end":1169,"column_start":2,"column_end":5}},{"value":"/ [`ptr::write_volatile`]: crate::ptr::write_volatile","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305448,"byte_end":305503,"line_start":1170,"line_end":1170,"column_start":2,"column_end":57}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305505,"byte_end":305514,"line_start":1171,"line_end":1171,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1774},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306125,"byte_end":306132,"line_start":1196,"line_end":1196,"column_start":16,"column_end":23},"name":"replace","qualname":"<BitPtr<Mut, O, T>>::replace","value":"pub unsafe fn replace(Self, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Replaces the bit at `*self` with `src`, returning the old bit.","sig":null,"attributes":[{"value":"/ Replaces the bit at `*self` with `src`, returning the old bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305779,"byte_end":305845,"line_start":1184,"line_end":1184,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305847,"byte_end":305850,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305852,"byte_end":305866,"line_start":1186,"line_end":1186,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305868,"byte_end":305871,"line_start":1187,"line_end":1187,"column_start":2,"column_end":5}},{"value":"/ [`pointer::replace`](https://doc.rust-lang.org/std/primitive.pointer.html#method.replace)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305873,"byte_end":305966,"line_start":1188,"line_end":1188,"column_start":2,"column_end":95}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305968,"byte_end":305971,"line_start":1189,"line_end":1189,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305973,"byte_end":305985,"line_start":1190,"line_end":1190,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305987,"byte_end":305990,"line_start":1191,"line_end":1191,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::replace`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":305992,"byte_end":306050,"line_start":1192,"line_end":1192,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306052,"byte_end":306055,"line_start":1193,"line_end":1193,"column_start":2,"column_end":5}},{"value":"/ [`ptr::replace`]: crate::ptr::replace","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306057,"byte_end":306098,"line_start":1194,"line_end":1194,"column_start":2,"column_end":43}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306100,"byte_end":306109,"line_start":1195,"line_end":1195,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":1775},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306542,"byte_end":306546,"line_start":1214,"line_end":1214,"column_start":16,"column_end":20},"name":"swap","qualname":"<BitPtr<Mut, O, T>>::swap","value":"pub unsafe fn swap<O2, T2>(Self, BitPtr<Mut, O2, T2>) where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the bits at two mutable locations. They may overlap.","sig":null,"attributes":[{"value":"/ Swaps the bits at two mutable locations. They may overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306215,"byte_end":306277,"line_start":1202,"line_end":1202,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306279,"byte_end":306282,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306284,"byte_end":306298,"line_start":1204,"line_end":1204,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306300,"byte_end":306303,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ [`pointer::swap`](https://doc.rust-lang.org/std/primitive.pointer.html#method.swap)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306305,"byte_end":306392,"line_start":1206,"line_end":1206,"column_start":2,"column_end":89}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306394,"byte_end":306397,"line_start":1207,"line_end":1207,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306399,"byte_end":306411,"line_start":1208,"line_end":1208,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306413,"byte_end":306416,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ See [`ptr::swap`] for safety concerns and examples.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306418,"byte_end":306473,"line_start":1210,"line_end":1210,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306475,"byte_end":306478,"line_start":1211,"line_end":1211,"column_start":2,"column_end":5}},{"value":"/ [`ptr::swap`]: crate::ptr::swap","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306480,"byte_end":306515,"line_start":1212,"line_end":1212,"column_start":2,"column_end":37}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306517,"byte_end":306526,"line_start":1213,"line_end":1213,"column_start":2,"column_end":11}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3987},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310489,"byte_end":310503,"line_start":1423,"line_end":1423,"column_start":2,"column_end":16},"name":"InvalidAddress","qualname":"::ptr::single::BitPtrError::InvalidAddress","value":"BitPtrError::InvalidAddress(AddressError<T>)","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" The element address was somehow invalid.\n","sig":null,"attributes":[{"value":"/ The element address was somehow invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310443,"byte_end":310487,"line_start":1422,"line_end":1422,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":3990},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310563,"byte_end":310575,"line_start":1425,"line_end":1425,"column_start":2,"column_end":14},"name":"InvalidIndex","qualname":"::ptr::single::BitPtrError::InvalidIndex","value":"BitPtrError::InvalidIndex(BitIdxError<T::Mem>)","parent":{"krate":0,"index":3985},"children":[],"decl_id":null,"docs":" The bit index was somehow invalid.\n","sig":null,"attributes":[{"value":"/ The bit index was somehow invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310523,"byte_end":310561,"line_start":1424,"line_end":1424,"column_start":2,"column_end":40}}]},{"kind":"Enum","id":{"krate":0,"index":3985},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310407,"byte_end":310418,"line_start":1419,"line_end":1419,"column_start":10,"column_end":21},"name":"BitPtrError","qualname":"::ptr::single::BitPtrError","value":"pub enum BitPtrError<T> where T: BitStore {\n    InvalidAddress(AddressError<T>),\n    InvalidIndex(BitIdxError<T::Mem>),\n}","parent":null,"children":[{"krate":0,"index":3987},{"krate":0,"index":3990}],"decl_id":null,"docs":" Errors produced by invalid bit-pointer components.\n","sig":null,"attributes":[{"value":"/ Errors produced by invalid bit-pointer components.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310275,"byte_end":310329,"line_start":1417,"line_end":1417,"column_start":1,"column_end":55}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4024},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344540,"byte_end":344553,"line_start":1072,"line_end":1072,"column_start":2,"column_end":15},"name":"InvalidBitptr","qualname":"::ptr::span::BitSpanError::InvalidBitptr","value":"BitSpanError::InvalidBitptr(BitPtrError<T>)","parent":{"krate":0,"index":4022},"children":[],"decl_id":null,"docs":" The base `BitPtr` is invalid.\n","sig":null,"attributes":[{"value":"/ The base `BitPtr` is invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344505,"byte_end":344538,"line_start":1071,"line_end":1071,"column_start":2,"column_end":35}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4027},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344618,"byte_end":344625,"line_start":1074,"line_end":1074,"column_start":2,"column_end":9},"name":"TooLong","qualname":"::ptr::span::BitSpanError::TooLong","value":"BitSpanError::TooLong(usize)","parent":{"krate":0,"index":4022},"children":[],"decl_id":null,"docs":" `BitSpan` domains have a length ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have a length ceiling.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344572,"byte_end":344616,"line_start":1073,"line_end":1073,"column_start":2,"column_end":46}}]},{"kind":"TupleVariant","id":{"krate":0,"index":4030},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344683,"byte_end":344690,"line_start":1076,"line_end":1076,"column_start":2,"column_end":9},"name":"TooHigh","qualname":"::ptr::span::BitSpanError::TooHigh","value":"BitSpanError::TooHigh(*const T)","parent":{"krate":0,"index":4022},"children":[],"decl_id":null,"docs":" `BitSpan` domains have an address ceiling.\n","sig":null,"attributes":[{"value":"/ `BitSpan` domains have an address ceiling.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344635,"byte_end":344681,"line_start":1075,"line_end":1075,"column_start":2,"column_end":48}}]},{"kind":"Enum","id":{"krate":0,"index":4022},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344468,"byte_end":344480,"line_start":1068,"line_end":1068,"column_start":10,"column_end":22},"name":"BitSpanError","qualname":"::ptr::span::BitSpanError","value":"pub enum BitSpanError<T> where T: BitStore {\n    InvalidBitptr(BitPtrError<T>),\n    TooLong(usize),\n    TooHigh(*const T),\n}","parent":null,"children":[{"krate":0,"index":4024},{"krate":0,"index":4027},{"krate":0,"index":4030}],"decl_id":null,"docs":" An error produced when creating `BitSpan` encoded references.\n","sig":null,"attributes":[{"value":"/ An error produced when creating `BitSpan` encoded references.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344338,"byte_end":344403,"line_start":1066,"line_end":1066,"column_start":1,"column_end":66}}]},{"kind":"Function","id":{"krate":0,"index":2083},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225485,"byte_end":225489,"line_start":193,"line_end":193,"column_start":15,"column_end":19},"name":"copy","qualname":"::ptr::copy","value":"pub unsafe fn copy<O1, O2, T1,\n                   T2>(BitPtr<Const, O1, T1>, BitPtr<Mut, O2, T2>, usize)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination may\n overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination may","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223410,"byte_end":223485,"line_start":121,"line_end":121,"column_start":1,"column_end":76}},{"value":"/ overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223486,"byte_end":223498,"line_start":122,"line_end":122,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223499,"byte_end":223502,"line_start":123,"line_end":123,"column_start":1,"column_end":4}},{"value":"/ If the source and destination will *never* overlap, [`copy_nonoverlapping`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223503,"byte_end":223582,"line_start":124,"line_end":124,"column_start":1,"column_end":80}},{"value":"/ can be used instead.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223583,"byte_end":223607,"line_start":125,"line_end":125,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223608,"byte_end":223611,"line_start":126,"line_end":126,"column_start":1,"column_end":4}},{"value":"/ `copy` is semantically equivalent to C’s [`memmove`], but with the argument","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223612,"byte_end":223693,"line_start":127,"line_end":127,"column_start":1,"column_end":80}},{"value":"/ order swapped. Copying takes place as if the bits were copied from `src` to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223694,"byte_end":223773,"line_start":128,"line_end":128,"column_start":1,"column_end":80}},{"value":"/ a temporary array, then copied from the array into `dst`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223774,"byte_end":223835,"line_start":129,"line_end":129,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223836,"byte_end":223839,"line_start":130,"line_end":130,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223840,"byte_end":223854,"line_start":131,"line_end":131,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223855,"byte_end":223858,"line_start":132,"line_end":132,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy`](core::ptr::copy)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223859,"byte_end":223893,"line_start":133,"line_end":133,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223894,"byte_end":223897,"line_start":134,"line_end":134,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223898,"byte_end":223919,"line_start":135,"line_end":135,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223920,"byte_end":223923,"line_start":136,"line_end":136,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element types. `bitvec`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":223924,"byte_end":224002,"line_start":137,"line_end":137,"column_start":1,"column_end":79}},{"value":"/ considers it Undefined Behavior for two pointer regions to overlap in memory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224003,"byte_end":224083,"line_start":138,"line_end":138,"column_start":1,"column_end":81}},{"value":"/ if they have different bit-orderings, and so will only perform overlap","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224084,"byte_end":224158,"line_start":139,"line_end":139,"column_start":1,"column_end":75}},{"value":"/ detection when `O1` and `O2` match.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224159,"byte_end":224198,"line_start":140,"line_end":140,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224199,"byte_end":224202,"line_start":141,"line_end":141,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224203,"byte_end":224215,"line_start":142,"line_end":142,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224216,"byte_end":224219,"line_start":143,"line_end":143,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224220,"byte_end":224294,"line_start":144,"line_end":144,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224295,"byte_end":224298,"line_start":145,"line_end":145,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224299,"byte_end":224353,"line_start":146,"line_end":146,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224354,"byte_end":224409,"line_start":147,"line_end":147,"column_start":1,"column_end":56}},{"value":"/ - `src` and `dst` must not overlap if they have different bit-ordering","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224410,"byte_end":224484,"line_start":148,"line_end":148,"column_start":1,"column_end":75}},{"value":"/   parameters.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224485,"byte_end":224502,"line_start":149,"line_end":149,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224503,"byte_end":224506,"line_start":150,"line_end":150,"column_start":1,"column_end":4}},{"value":"/ The type parameters `T1` and `T2` are permitted to differ.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224507,"byte_end":224569,"line_start":151,"line_end":151,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224570,"byte_end":224573,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224574,"byte_end":224588,"line_start":153,"line_end":153,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224589,"byte_end":224592,"line_start":154,"line_end":154,"column_start":1,"column_end":4}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224593,"byte_end":224609,"line_start":155,"line_end":155,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224610,"byte_end":224613,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224614,"byte_end":224625,"line_start":157,"line_end":157,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224626,"byte_end":224653,"line_start":158,"line_end":158,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224654,"byte_end":224657,"line_start":159,"line_end":159,"column_start":1,"column_end":4}},{"value":"/ let start = 0b1011u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224658,"byte_end":224683,"line_start":160,"line_end":160,"column_start":1,"column_end":26}},{"value":"/ let mut end = 0u16;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224684,"byte_end":224707,"line_start":161,"line_end":161,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224708,"byte_end":224711,"line_start":162,"line_end":162,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224712,"byte_end":224724,"line_start":163,"line_end":163,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy::<Lsb0, Msb0, _, _>(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224725,"byte_end":224769,"line_start":164,"line_end":164,"column_start":1,"column_end":45}},{"value":"/     (&start).into(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224770,"byte_end":224794,"line_start":165,"line_end":165,"column_start":1,"column_end":25}},{"value":"/     (&mut end).into(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224795,"byte_end":224821,"line_start":166,"line_end":166,"column_start":1,"column_end":27}},{"value":"/     4,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224822,"byte_end":224832,"line_start":167,"line_end":167,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224833,"byte_end":224841,"line_start":168,"line_end":168,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224842,"byte_end":224847,"line_start":169,"line_end":169,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(end, 0b1101_0000__0000_0000);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224848,"byte_end":224892,"line_start":170,"line_end":170,"column_start":1,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224893,"byte_end":224900,"line_start":171,"line_end":171,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224901,"byte_end":224904,"line_start":172,"line_end":172,"column_start":1,"column_end":4}},{"value":"/ Overlapping regions:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224905,"byte_end":224929,"line_start":173,"line_end":173,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224930,"byte_end":224933,"line_start":174,"line_end":174,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224934,"byte_end":224945,"line_start":175,"line_end":175,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224946,"byte_end":224973,"line_start":176,"line_end":176,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224974,"byte_end":224977,"line_start":177,"line_end":177,"column_start":1,"column_end":4}},{"value":"/ let mut x = 0b1111_0010u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":224978,"byte_end":225008,"line_start":178,"line_end":178,"column_start":1,"column_end":31}},{"value":"/ let src = BitPtr::<_, Lsb0, _>::from_mut(&mut x);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225009,"byte_end":225062,"line_start":179,"line_end":179,"column_start":1,"column_end":54}},{"value":"/ let dst = unsafe { src.add(2) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225063,"byte_end":225099,"line_start":180,"line_end":180,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225100,"byte_end":225103,"line_start":181,"line_end":181,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225104,"byte_end":225116,"line_start":182,"line_end":182,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy(src.immut(), dst, 4);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225117,"byte_end":225162,"line_start":183,"line_end":183,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225163,"byte_end":225168,"line_start":184,"line_end":184,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(x, 0b1100_1010);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225169,"byte_end":225200,"line_start":185,"line_end":185,"column_start":1,"column_end":32}},{"value":"/ //                ^^ ^^ bottom nibble moved here","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225201,"byte_end":225253,"line_start":186,"line_end":186,"column_start":1,"column_end":53}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225254,"byte_end":225261,"line_start":187,"line_end":187,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225262,"byte_end":225265,"line_start":188,"line_end":188,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225266,"byte_end":225330,"line_start":189,"line_end":189,"column_start":1,"column_end":65}},{"value":"/ [`copy_nonoverlapping`]: crate::ptr::copy_nonoverlapping","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225331,"byte_end":225391,"line_start":190,"line_end":190,"column_start":1,"column_end":61}},{"value":"/ [`memmove`]: https://en.cppreference.com/w/c/string/byte/memmove","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225392,"byte_end":225460,"line_start":191,"line_end":191,"column_start":1,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225461,"byte_end":225470,"line_start":192,"line_end":192,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2088},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":227048,"byte_end":227067,"line_start":254,"line_end":254,"column_start":15,"column_end":34},"name":"copy_nonoverlapping","qualname":"::ptr::copy_nonoverlapping","value":"pub unsafe fn copy_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Const, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies `count` bits from `src` to `dst`. The source and destination must\n *not* overlap.","sig":null,"attributes":[{"value":"/ Copies `count` bits from `src` to `dst`. The source and destination must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225677,"byte_end":225753,"line_start":206,"line_end":206,"column_start":1,"column_end":77}},{"value":"/ *not* overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225754,"byte_end":225772,"line_start":207,"line_end":207,"column_start":1,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225773,"byte_end":225776,"line_start":208,"line_end":208,"column_start":1,"column_end":4}},{"value":"/ For regions of memory which might overlap, use [`copy`] instead.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225777,"byte_end":225845,"line_start":209,"line_end":209,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225846,"byte_end":225849,"line_start":210,"line_end":210,"column_start":1,"column_end":4}},{"value":"/ `copy_nonoverlapping` is semantically equivalent to C’s [`memcpy`], but with","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225850,"byte_end":225932,"line_start":211,"line_end":211,"column_start":1,"column_end":81}},{"value":"/ the argument order swapped.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225933,"byte_end":225964,"line_start":212,"line_end":212,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225965,"byte_end":225968,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225969,"byte_end":225983,"line_start":214,"line_end":214,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225984,"byte_end":225987,"line_start":215,"line_end":215,"column_start":1,"column_end":4}},{"value":"/ [`ptr::copy_nonoverlapping`](core::ptr::copy_nonoverlapping)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":225988,"byte_end":226052,"line_start":216,"line_end":216,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226053,"byte_end":226056,"line_start":217,"line_end":217,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226057,"byte_end":226078,"line_start":218,"line_end":218,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226079,"byte_end":226082,"line_start":219,"line_end":219,"column_start":1,"column_end":4}},{"value":"/ The pointers may differ in bit-ordering or storage element parameters.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226083,"byte_end":226157,"line_start":220,"line_end":220,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226158,"byte_end":226161,"line_start":221,"line_end":221,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226162,"byte_end":226174,"line_start":222,"line_end":222,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226175,"byte_end":226178,"line_start":223,"line_end":223,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226179,"byte_end":226253,"line_start":224,"line_end":224,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226254,"byte_end":226257,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ - `src` must be [valid] for reads of `count` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226258,"byte_end":226312,"line_start":226,"line_end":226,"column_start":1,"column_end":55}},{"value":"/ - `dst` must be [valid] for writes of `count` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226313,"byte_end":226368,"line_start":227,"line_end":227,"column_start":1,"column_end":56}},{"value":"/ - The region of memory beginning at `src` with a size of `count` bits must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226369,"byte_end":226447,"line_start":228,"line_end":228,"column_start":1,"column_end":79}},{"value":"/   not overlap with the region of memory beginning at `dst` with the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226448,"byte_end":226524,"line_start":229,"line_end":229,"column_start":1,"column_end":77}},{"value":"/   size.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226525,"byte_end":226536,"line_start":230,"line_end":230,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226537,"byte_end":226540,"line_start":231,"line_end":231,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226541,"byte_end":226555,"line_start":232,"line_end":232,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226556,"byte_end":226559,"line_start":233,"line_end":233,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226560,"byte_end":226571,"line_start":234,"line_end":234,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226572,"byte_end":226599,"line_start":235,"line_end":235,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226600,"byte_end":226603,"line_start":236,"line_end":236,"column_start":1,"column_end":4}},{"value":"/ let mut data = 0b1011u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226604,"byte_end":226632,"line_start":237,"line_end":237,"column_start":1,"column_end":29}},{"value":"/ let ptr = BitPtr::<_, Msb0, _>::from_mut(&mut data);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226633,"byte_end":226689,"line_start":238,"line_end":238,"column_start":1,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226690,"byte_end":226693,"line_start":239,"line_end":239,"column_start":1,"column_end":4}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226694,"byte_end":226706,"line_start":240,"line_end":240,"column_start":1,"column_end":13}},{"value":"/   bitvec::ptr::copy_nonoverlapping(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226707,"byte_end":226746,"line_start":241,"line_end":241,"column_start":1,"column_end":40}},{"value":"/     ptr.add(4).immut(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226747,"byte_end":226774,"line_start":242,"line_end":242,"column_start":1,"column_end":28}},{"value":"/     ptr,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226775,"byte_end":226787,"line_start":243,"line_end":243,"column_start":1,"column_end":13}},{"value":"/     4,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226788,"byte_end":226798,"line_start":244,"line_end":244,"column_start":1,"column_end":11}},{"value":"/   );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226799,"byte_end":226807,"line_start":245,"line_end":245,"column_start":1,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226808,"byte_end":226813,"line_start":246,"line_end":246,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(data, 0b1011_1011);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226814,"byte_end":226848,"line_start":247,"line_end":247,"column_start":1,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226849,"byte_end":226856,"line_start":248,"line_end":248,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226857,"byte_end":226860,"line_start":249,"line_end":249,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/std/ptr/index.html#safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226861,"byte_end":226925,"line_start":250,"line_end":250,"column_start":1,"column_end":65}},{"value":"/ [`copy`]: crate::ptr::copy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226926,"byte_end":226956,"line_start":251,"line_end":251,"column_start":1,"column_end":31}},{"value":"/ [`memcpy`]: https://en.cppreference.com/w/c/string/byte/memcpy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":226957,"byte_end":227023,"line_start":252,"line_end":252,"column_start":1,"column_end":67}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":227024,"byte_end":227033,"line_start":253,"line_end":253,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2093},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228100,"byte_end":228102,"line_start":300,"line_end":300,"column_start":8,"column_end":10},"name":"eq","qualname":"::ptr::eq","value":"pub fn eq<O, T1, T2>(BitPtr<Const, O, T1>, BitPtr<Const, O, T2>) -> bool where\nO: BitOrder, T1: BitStore, T2: BitStore,\nBitPtr<Const, O, T1>: PartialEq<BitPtr<Const, O, T2>>","parent":null,"children":[],"decl_id":null,"docs":" Compares raw bit-pointers for equality.","sig":null,"attributes":[{"value":"* Compares raw bit-pointers for equality.\n\nThis is the same as using the `==` operator, but less generic: the arguments\nhave to be `BitPtr<Const, _, _>` bit-pointers, not anything that implements\n`PartialEq`.\n\n# Original\n\n[`ptr::eq`](core::ptr::eq)\n\n# API Differences\n\nThe two pointers can differ in their storage type parameters. `bitvec` defines\npointer equality only between pointers with the same underlying `BitStore::Mem`\nregister type.\n\nThis cannot compare span pointers. `*const BitSlice` can be used in the standard\nlibrary `ptr::eq` and does not need an override.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\nuse core::cell::Cell;\n\nlet data = 0u8;\nlet bare_ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nlet cell_ptr = bare_ptr.cast::<Cell<u8>>();\n\nassert!(bitvec::ptr::eq(bare_ptr, cell_ptr));\n```\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":227270,"byte_end":228082,"line_start":267,"line_end":298,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228083,"byte_end":228092,"line_start":299,"line_end":299,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2097},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228507,"byte_end":228511,"line_start":321,"line_end":321,"column_start":8,"column_end":12},"name":"hash","qualname":"::ptr::hash","value":"pub fn hash<O, T, S>(BitPtr<Const, O, T>, &mut S) where O: BitOrder,\nT: BitStore, S: Hasher","parent":null,"children":[],"decl_id":null,"docs":" Hash a raw bit-pointer.","sig":null,"attributes":[{"value":"* Hash a raw bit-pointer.\n\nThis can be used to prove hashing the pointer address value, rather than the\nreferent bit.\n\n# Original\n\n[`ptr::hash`](core::ptr::hash)\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228291,"byte_end":228458,"line_start":310,"line_end":318,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228459,"byte_end":228468,"line_start":319,"line_end":319,"column_start":1,"column_end":10}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228469,"byte_end":228499,"line_start":320,"line_end":320,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2101},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229144,"byte_end":229148,"line_start":358,"line_end":358,"column_start":15,"column_end":19},"name":"read","qualname":"::ptr::read","value":"pub unsafe fn read<O, T>(BitPtr<Const, O, T>) -> bool where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Reads the bit from `src`.","sig":null,"attributes":[{"value":"* Reads the bit from `src`.\n\n# Original\n\n[`ptr::read`](core::ptr::read)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `src` must be [valid] for reads.\n- `src` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 128u8;\nlet ptr = BitPtr::<_, Msb0, _>::from_ref(&data);\nassert!(unsafe {\n  bitvec::ptr::read(ptr)\n});\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":228635,"byte_end":229119,"line_start":330,"line_end":356,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229120,"byte_end":229129,"line_start":357,"line_end":357,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2104},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231007,"byte_end":231020,"line_start":419,"line_end":419,"column_start":15,"column_end":28},"name":"read_volatile","qualname":"::ptr::read_volatile","value":"pub unsafe fn read_volatile<O, T>(BitPtr<Const, O, T>) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile read of the bit from `src`.","sig":null,"attributes":[{"value":"* Performs a volatile read of the bit from `src`.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed to not\nbe elided or reördered by the compiler across other volatile operations.\n\n# Original\n\n[`ptr::read_volatile`](core::ptr::read_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model, so\nthe precise semantics of what “volatile” means here is subject to change over\ntime. That being said, the semantics will almost always end up pretty similar to\n[C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile memory\noperations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for reads\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver on\nquestions involving concurrent access from multiple threads. Volatile accesses\nbehave exactly like non-atomic accesses in that regard. In particular, a race\nbetween a `read_volatile` and any write operation on the same location is\nundefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary load that\nthe compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_ref(&data);\nunsafe {\n  assert!(bitvec::ptr::read_volatile(ptr.add(2)));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":229240,"byte_end":230982,"line_start":366,"line_end":417,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":230983,"byte_end":230992,"line_start":418,"line_end":418,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2107},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231982,"byte_end":231989,"line_start":461,"line_end":461,"column_start":15,"column_end":22},"name":"replace","qualname":"::ptr::replace","value":"pub unsafe fn replace<O, T>(BitPtr<Mut, O, T>, bool) -> bool where\nO: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Moves `src` into the pointed `dst`, returning the previous `dst` bit.","sig":null,"attributes":[{"value":"* Moves `src` into the pointed `dst`, returning the previous `dst` bit.\n\nThis function is semantically equivalent to [`BitRef::replace`] except that it\noperates on raw pointers instead of references. When a proxy reference is\navailable, prefer [`BitRef::replace`].\n\n# Original\n\n[`ptr::replace`](core::ptr::replace)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for both reads and writes.\n- `dst` must point to a properly initialized value of type `T`.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 4u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nassert!(unsafe {\n  bitvec::ptr::replace(ptr.add(2), false)\n});\nassert_eq!(data, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitPtr::replace`]: crate::ptr::BitRef::replace\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231121,"byte_end":231957,"line_start":427,"line_end":459,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":231958,"byte_end":231967,"line_start":460,"line_end":460,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2110},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232790,"byte_end":232813,"line_start":495,"line_end":495,"column_start":8,"column_end":31},"name":"bitslice_from_raw_parts","qualname":"::ptr::bitslice_from_raw_parts","value":"pub fn bitslice_from_raw_parts<O, T>(BitPtr<Const, O, T>, usize)\n-> *const BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a raw bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"* Forms a raw bit-slice from a bit-pointer and a length.\n\nThe `len` argument is the number of **bits**, not the number of elements.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts`] for bit-slice safety requirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_ref(&x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts(bitptr, 24);\nassert_eq!(unsafe { &*bitslice }[2], true);\n```\n\n[`slice::from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232096,"byte_end":232772,"line_start":469,"line_end":493,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232773,"byte_end":232782,"line_start":494,"line_end":494,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2113},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233893,"byte_end":233920,"line_start":536,"line_end":536,"column_start":8,"column_end":35},"name":"bitslice_from_raw_parts_mut","qualname":"::ptr::bitslice_from_raw_parts_mut","value":"pub fn bitslice_from_raw_parts_mut<O, T>(BitPtr<Mut, O, T>, usize)\n-> *mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`bitslice_from_raw_parts`], except that\na raw mutable bit-slice is returned, as opposed to a raw immutable bit-slice.\n\nSee the documentation of [`bitslice_from_raw_parts`] for more details.\n\nThis function is safe, but actually using the return value is unsafe. See the\ndocumentation of [`slice::from_raw_parts_mut`] for bit-slice safety\nrequirements.\n\n# Original\n\n[`ptr::slice_from_raw_parts`](core::ptr::slice_from_raw_parts)\n\n# Examples\n\n```rust\nuse bitvec::ptr;\nuse bitvec::order::Lsb0;\n\nlet mut x = [5u8, 10, 15];\nlet bitptr = ptr::BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet bitslice = ptr::bitslice_from_raw_parts_mut(bitptr, 24);\nunsafe { &mut *bitslice }.set(0, true);\nassert!(unsafe { &*bitslice }[0]);\n```\n\n[`bitslice_from_raw_parts`]: crate::ptr::bitslice_from_raw_parts\n[`slice::from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":232983,"byte_end":233875,"line_start":506,"line_end":534,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":233876,"byte_end":233885,"line_start":535,"line_end":535,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2116},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234966,"byte_end":234970,"line_start":584,"line_end":584,"column_start":15,"column_end":19},"name":"swap","qualname":"::ptr::swap","value":"pub unsafe fn swap<O1, O2, T1, T2>(BitPtr<Mut, O1, T1>, BitPtr<Mut, O2, T2>)\nwhere O1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps the values at two mutable locations.","sig":null,"attributes":[{"value":"* Swaps the values at two mutable locations.\n\nBut for the following exception, this function is semantically equivalent to\n[`BitRef::swap`]: it operates on raw pointers instead of references. When\nreferences are available, prefer [`BitRef::swap`].\n\n# Original\n\n[`ptr::swap`](core::ptr::swap)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes.\n- Both `x` and `y` must point to initialized instances of type `T1` and `T2`,\n  respectively.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 2u8;\nlet x = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nlet y = unsafe { x.add(1) };\n\nunsafe {\n  bitvec::ptr::swap(x, y);\n}\nassert_eq!(data, 1);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`BitRef::swap`]: crate::ptr::BitRef::swap\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234090,"byte_end":234941,"line_start":547,"line_end":582,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":234942,"byte_end":234951,"line_start":583,"line_end":583,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2121},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236171,"byte_end":236190,"line_start":636,"line_end":636,"column_start":15,"column_end":34},"name":"swap_nonoverlapping","qualname":"::ptr::swap_nonoverlapping","value":"pub unsafe fn swap_nonoverlapping<O1, O2, T1,\n                                  T2>(BitPtr<Mut, O1, T1>,\n                                      BitPtr<Mut, O2, T2>, usize) where\nO1: BitOrder, O2: BitOrder, T1: BitStore, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.","sig":null,"attributes":[{"value":"* Swaps `count` bits between the two regions of memory beginning at `x` and\n`y`. The two regions must *not* overlap.\n\n# Original\n\n[`ptr::swap_nonoverlapping`](core::ptr::swap_nonoverlapping)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- Both `x` and `y` must be [valid] for both reads and writes of `count` bits.\n- Both `x` and `y` must be fully initialized instances of `T` for all `count`\n  bits.\n- The regions may have overlapping elements, but must not overlap the concrete\n  bits they describe.\n\nNote that even if `count` is `0`, the pointers must still be validly\nconstructed, non-null, and well-aligned.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut x = [0u8; 2];\nlet mut y = !0u16;\nlet x_ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut x[0]);\nlet y_ptr = BitPtr::<_, Msb0, _>::from_mut(&mut y);\n\nunsafe {\n  bitvec::ptr::swap_nonoverlapping(x_ptr, y_ptr, 16);\n}\nassert_eq!(x, [!0; 2]);\nassert_eq!(y, 0);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":235123,"byte_end":236146,"line_start":596,"line_end":634,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236147,"byte_end":236156,"line_start":635,"line_end":635,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2126},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237386,"byte_end":237391,"line_start":688,"line_end":688,"column_start":15,"column_end":20},"name":"write","qualname":"::ptr::write","value":"pub unsafe fn write<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Overwrites a memory location with the given bit.","sig":null,"attributes":[{"value":"* Overwrites a memory location with the given bit.\n\nBecause this reads from memory in order to construct the new value, it cannot be\nused to set uninitialized memory. The referent `T` element must be fully\ninitialized (such as with [`core::ptr::write`]) before setting bits with this\nfunction.\n\n# Original\n\n[`ptr::write`](core::ptr::write)\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- `dst` must point to a properly initialized value of type `T`\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write(ptr.add(2), true);\n}\nassert_eq!(data, 4);\n```\n\n[valid]: https://doc.rust-lang.org/std/ptr/index.html#safety\n[`core::ptr::write`]: core::ptr::write\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":236415,"byte_end":237361,"line_start":651,"line_end":686,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237362,"byte_end":237371,"line_start":687,"line_end":687,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2129},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":239560,"byte_end":239574,"line_start":755,"line_end":755,"column_start":15,"column_end":29},"name":"write_volatile","qualname":"::ptr::write_volatile","value":"pub unsafe fn write_volatile<O, T>(BitPtr<Mut, O, T>, bool) where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs a volatile write of a memory location with the given bit.","sig":null,"attributes":[{"value":"* Performs a volatile write of a memory location with the given bit.\n\nBecause processors do not have single-bit write instructions, this must\nperform a volatile read of the location, perform the bit modification within\nthe processor register, then perform a volatile write back to memory. These\nthree steps are guaranteed to be atomic.\n\nVolatile operations are intended to act on I/O memory, and are guaranteed\nnot to be elided or reördered by the compiler across other volatile\noperations.\n\n# Original\n\n[`ptr::write_volatile`](core::ptr::write_volatile)\n\n# Notes\n\nRust does not curretnly have a rigorously and formally defined memory model,\nso the precise semantics of what “volatile” means here is subject to change\nover time. That being said, the semantics will almost always end up pretty\nsimilar to [C11’s definition of volatile][c11].\n\nThe compiler shouldn’t change the relative order or number of volatile\nmemory operations.\n\n# Safety\n\nBehavior is undefined if any of the following conditions are violated:\n\n- `dst` must be [valid] for writes\n- no other pointer must race `dst` to view or modify the referent location\n  unless `T` is capable of ensuring race safety.\n\nJust like in C, whether an operation is volatile has no bearing whatsoëver\non questions involving concurrent access from multiple threads. Volatile\naccesses behave exactly like non-atomic accesses in that regard. In\nparticular, a race between a `write_volatile` and any other operation\n(reading or writing) on the same location is undefined behavior.\n\nThis is true even for atomic types! This instruction is an ordinary store\nthat the compiler will not remove. It is *not* an atomic instruction.\n\n# Examples\n\n```rust\nuse bitvec::prelude::*;\n\nlet mut data = 0u8;\nlet ptr = BitPtr::<_, Lsb0, _>::from_mut(&mut data);\nunsafe {\n  bitvec::ptr::write_volatile(ptr, true);\n  assert!(bitvec::ptr::read_volatile(ptr.immut()));\n}\n```\n\n[c11]: http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1570.pdf\n[valid]: https://doc.rust-lang.org/core/ptr/index.html#safety\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":237493,"byte_end":239535,"line_start":696,"line_end":753,"column_start":1,"column_end":4}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr.rs","byte_start":239536,"byte_end":239545,"line_start":754,"line_end":754,"column_start":1,"column_end":10}}]},{"kind":"Mod","id":{"krate":0,"index":2132},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"slice","qualname":"::slice","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","parent":null,"children":[{"krate":0,"index":2133},{"krate":0,"index":2134},{"krate":0,"index":2135},{"krate":0,"index":2138},{"krate":0,"index":2141},{"krate":0,"index":2144},{"krate":0,"index":2145},{"krate":0,"index":2148},{"krate":0,"index":2151},{"krate":0,"index":2154},{"krate":0,"index":2157},{"krate":0,"index":2160},{"krate":0,"index":2161},{"krate":0,"index":2164},{"krate":0,"index":2167},{"krate":0,"index":2168},{"krate":0,"index":2169},{"krate":0,"index":2171},{"krate":0,"index":2172},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2178},{"krate":0,"index":2179},{"krate":0,"index":2181},{"krate":0,"index":2182},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2188},{"krate":0,"index":2191},{"krate":0,"index":2194},{"krate":0,"index":2197},{"krate":0,"index":2200},{"krate":0,"index":2203},{"krate":0,"index":2204},{"krate":0,"index":2205},{"krate":0,"index":2207},{"krate":0,"index":2210},{"krate":0,"index":2213},{"krate":0,"index":2216},{"krate":0,"index":2219},{"krate":0,"index":2225},{"krate":0,"index":2285},{"krate":0,"index":2295},{"krate":0,"index":2307},{"krate":0,"index":2317},{"krate":0,"index":2321},{"krate":0,"index":2326},{"krate":0,"index":2330},{"krate":0,"index":2334},{"krate":0,"index":2607},{"krate":0,"index":2870},{"krate":0,"index":2958},{"krate":0,"index":3020},{"krate":0,"index":3218},{"krate":0,"index":3219},{"krate":0,"index":3220},{"krate":0,"index":3223},{"krate":0,"index":3226},{"krate":0,"index":3229},{"krate":0,"index":3232},{"krate":0,"index":3235},{"krate":0,"index":3236},{"krate":0,"index":3239},{"krate":0,"index":3242},{"krate":0,"index":3245},{"krate":0,"index":3248},{"krate":0,"index":3251},{"krate":0,"index":3254},{"krate":0,"index":3257},{"krate":0,"index":3260},{"krate":0,"index":3263},{"krate":0,"index":3266},{"krate":0,"index":3269},{"krate":0,"index":3272},{"krate":0,"index":3275},{"krate":0,"index":3278},{"krate":0,"index":3281},{"krate":0,"index":3284},{"krate":0,"index":3287},{"krate":0,"index":3290},{"krate":0,"index":3293},{"krate":0,"index":3296}],"decl_id":null,"docs":" A dynamically-sized view into individual bits of a memory region.","sig":null,"attributes":[{"value":"* A dynamically-sized view into individual bits of a memory region.\n\nYou can read the language’s [`slice` module documentation][std] here.\n\nThis module defines the [`BitSlice`] region, and all of its associated support\ncode.\n\n[`BitSlice`] is the primary working type of this crate. It is a wrapper type\nover `[T]` which enables you to view, manipulate, and take the address of\nindividual bits in memory. It behaves in every possible respect exactly like an\nordinary slice: it is dynamically-sized, and must be held by `&` or `&mut`\nreference, just like `[T]`, and implements every inherent method and trait that\n`[T]` does, to the absolute limits of what Rust permits.\n\nThe key to [`BitSlice`]’s powerful capability is that references to it use a\nspecial encoding that store, in addition to the address of the base element and\nthe bit length, the index of the starting bit in the base element. This custom\nreference encoding has some costs in what APIs are possible – for instance, Rust\nforbids it from supporting `&mut BitSlice[index] = bool` write indexing – but in\nexchange, enables it to be *far* more capable than any other bit-slice crate in\nexistence.\n\nBecause of the volume of code that must be written to match the `[T]` standard\nAPI, this module is organized very differently than the slice implementation in\nthe [`core`] and [`std`] distribution libraries.\n\n- the root module `slice` contains new APIs that have no counterpart in `[T]`\n- `slice/api` contains reïmplementations of the `[T]` inherent methods\n- `slice/iter` implements all of the iteration capability\n- `slice/ops` implements the traits in `core::ops`\n- `slice/proxy` implements the proxy reference used in place of `&mut bool`\n- `slice/traits` implements all other traits not in `core::ops`\n- lastly, `slice/tests` contains all the unit tests.\n\n[`BitSlice`]: struct.BitSlice.html\n[`core`]: core\n[`std`]: std\n[std]: https://doc.rust-lang.org/stable/std/slice\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":350005,"byte_end":351954,"line_start":1,"line_end":39,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2219},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":366143,"byte_end":366151,"line_start":425,"line_end":425,"column_start":12,"column_end":20},"name":"BitSlice","qualname":"::slice::BitSlice","value":"BitSlice {  }","parent":null,"children":[{"krate":0,"index":2222},{"krate":0,"index":2223},{"krate":0,"index":2224}],"decl_id":null,"docs":" A slice of individual bits, anywhere in memory.","sig":null,"attributes":[{"value":"* A slice of individual bits, anywhere in memory.\n\n`BitSlice<O, T>` is an unsized region type; you interact with it through\n`&BitSlice<O, T>` and `&mut BitSlice<O, T>` references, which work exactly like\nall other Rust references. As with the standard slice’s relationship to arrays\nand vectors, this is [`bitvec`]’s primary working type, but you will probably\nhold it through one of the provided [`BitArray`], [`BitBox`], or [`BitVec`]\ncontainers.\n\n`BitSlice` is conceptually a `[bool]` slice, and provides a nearly complete\nmirror of `[bool]`’s API.\n\nEvery bit-vector crate can give you an opaque type that hides shift/mask\ncalculations from you. `BitSlice` does far more than this: it offers you the\nfull Rust guarantees about reference behavior, including lifetime tracking,\nmutability and aliasing awareness, and explicit memory control, *as well as* the\nfull set of tools and APIs available to the standard `[bool]` slice type.\n`BitSlice` can arbitrarily split and subslice, just like `[bool]`. You can write\na linear consuming function and keep the patterns you already know.\n\nFor example, to trim all the bits off either edge that match a condition, you\ncould write\n\n```rust\nuse bitvec::prelude::*;\n\nfn trim<O: BitOrder, T: BitStore>(\n  bits: &BitSlice<O, T>,\n  to_trim: bool,\n) -> &BitSlice<O, T> {\n  let stop = |b: &bool| *b != to_trim;\n  let front = bits.iter().by_ref().position(stop).unwrap_or(0);\n  let back = bits.iter().by_ref().rposition(stop).unwrap_or(0);\n  &bits[front ..= back]\n}\n# assert_eq!(trim(bits![0, 0, 1, 1, 0, 1, 0], false), bits![1, 1, 0, 1]);\n```\n\nto get behavior something like\n`trim(&BitSlice[0, 0, 1, 1, 0, 1, 0], false) == &BitSlice[1, 1, 0, 1]`.\n\n# Documentation\n\nAll APIs that mirror something in the standard library will have an `Original`\nsection linking to the corresponding item. All APIs that have a different\nsignature or behavior than the original will have an `API Differences` section\nexplaining what has changed, and how to adapt your existing code to the change.\n\nThese sections look like this:\n\n# Original\n\n[`slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html)\n\n# API Differences\n\nThe slice type `[bool]` has no type parameters. `BitSlice<O, T>` has two: one\nfor the memory type used as backing storage, and one for the order of bits\nwithin that memory type.\n\n`&BitSlice<O, T>` is capable of producing `&bool` references to read bits out\nof its memory, but is not capable of producing `&mut bool` references to write\nbits *into* its memory. Any `[bool]` API that would produce a `&mut bool` will\ninstead produce a [`BitRef<Mut, O, T>`] proxy reference.\n\n# Behavior\n\n`BitSlice` is a wrapper over `[T]`. It describes a region of memory, and must be\nhandled indirectly. This is most commonly through the reference types\n`&BitSlice` and `&mut BitSlice`, which borrow memory owned by some other value\nin the program. These buffers can be directly owned by the sibling types\n[`BitBox`], which behaves like [`Box<[T]>`](alloc::boxed::Box), and [`BitVec`],\nwhich behaves like [`Vec<T>`]. It cannot be used as the type parameter to a\nstandard-library-provided handle type.\n\nThe `BitSlice` region provides access to each individual bit in the region, as\nif each bit had a memory address that you could use to dereference it. It packs\neach logical bit into exactly one bit of storage memory, just like\n[`std::bitset`] and [`std::vector<bool>`] in C++.\n\n# Type Parameters\n\n`BitSlice` has two type parameters which propagate through nearly every public\nAPI in the crate. These are very important to its operation, and your choice\nof type arguments informs nearly every part of this library’s behavior.\n\n## `T: BitStore`\n\n[`BitStore`] is the simpler of the two parameters. It refers to the integer type\nused to hold bits. It must be one of the Rust unsigned integer fundamentals:\n`u8`, `u16`, `u32`, `usize`, and on 64-bit systems only, `u64`. In addition, it\ncan also be an alias-safed wrapper over them (see the [`access`] module) in\norder to permit bit-slices to share underlying memory without interfering with\neach other.\n\n`BitSlice` references can only be constructed over the integers, not over their\naliasing wrappers. `BitSlice` will only use aliasing types in its `T` slots when\nyou invoke APIs that produce them, such as [`.split_at_mut()`].\n\nThe default type argument is `usize`.\n\nThe argument you choose is used as the basis of a `[T]` slice, over which the\n`BitSlice` view type is placed. `BitSlice<_, T>` is subject to all of the rules\nabout alignment that `[T]` is. If you are working with in-memory representation\nformats, chances are that you already have a `T` type with which you’ve been\nworking, and should use it here.\n\nIf you are only using this crate to discard the seven wasted bits per `bool`\nof a collection of `bool`s, and are not too concerned about the in-memory\nrepresentation, then you should use the default type argument of `usize`. This\nis because most processors work best when moving an entire `usize` between\nmemory and the processor itself, and using a smaller type may cause it to slow\ndown.\n\n## `O: BitOrder`\n\n[`BitOrder`] is the more complex parameter. It has a default argument which,\nlike `usize`, is the good-enough choice when you do not explicitly need to\ncontrol the representation of bits in memory.\n\nThis parameter determines how to index the bits within a single memory element\n`T`. Computers all agree that in a slice of elements `T`, the element with the\nlower index has a lower memory address than the element with the higher index.\nBut the individual bits within an element do not have addresses, and so there is\nno uniform standard of which bit is the zeroth, which is the first, which is the\npenultimate, and which is the last.\n\nTo make matters even more confusing, there are two predominant ideas of\nin-element ordering that often *correlate* with the in-element *byte* ordering\nof integer types, but are in fact wholly unrelated! [`bitvec`] provides these\ntwo main orders as types for you, and if you need a different one, it also\nprovides the tools you need to make your own.\n\n### Least Significant Bit Comes First\n\nThis ordering, named the [`Lsb0`] type, indexes bits within an element by\nplacing the `0` index at the least significant bit (numeric value `1`) and the\nfinal index at the most significant bit (numeric value [`T::MIN`][minval] for\nsigned integers on most machines).\n\nFor example, this is the ordering used by most C compilers to lay out bit-field\nstruct members on little-endian **byte**-ordered machines.\n\n### Most Significant Bit Comes First\n\nThis ordering, named the [`Msb0`] type, indexes bits within an element by\nplacing the `0` index at the most significant bit (numeric value\n[`T::MIN`][minval] for most signed integers) and the final index at the least\nsignificant bit (numeric value `1`).\n\nFor example, this is the ordering used by the [TCP wire format], and by most C\ncompilers to lay out bit-field struct members on big-endian **byte**-ordered\nmachines.\n\n### Default Ordering\n\nThe default ordering is [`Lsb0`], as it typically produces shorter object code\nthan [`Msb0`] does. If you are implementing a collection, then `Lsb0` is likely\nthe more performant ordering; if you are implementing a buffer protocol, then\nyour choice of ordering is dictated by the protocol definition.\n\n# Safety\n\n`BitSlice` is designed to never introduce new memory unsafety that you did not\nprovide yourself, either before or during the use of this crate. Bugs do, and\nhave, occured, and you are encouraged to submit any discovered flaw as a defect\nreport.\n\nThe `&BitSlice` reference type uses a private encoding scheme to hold all the\ninformation needed in its stack value. This encoding is **not** part of the\npublic API of the library, and is not binary-compatible with `&[T]`.\nFurthermore, in order to satisfy Rust’s requirements about alias conditions,\n`BitSlice` performs type transformations on the `T` parameter to ensure that it\nnever creates the potential for undefined behavior.\n\nYou must never attempt to type-cast a reference to `BitSlice` in any way. You\nmust not use [`mem::transmute`] with `BitSlice` anywhere in its type arguments.\nYou must not use `as`-casting to convert between `*BitSlice` and any other type.\nYou must not attempt to modify the binary representation of a `&BitSlice`\nreference value. These actions will all lead to runtime memory unsafety, are\n(hopefully) likely to induce a program crash, and may possibly cause undefined\nbehavior at compile-time.\n\nEverything in the `BitSlice` public API, even the `unsafe` parts, are guaranteed\nto have no more unsafety than their equivalent parts in the standard library.\nAll `unsafe` APIs will have documentation explicitly detailing what the API\nrequires you to uphold in order for it to function safely and correctly. All\nsafe APIs will do so themselves.\n\n# Performance\n\nLike the standard library’s `[T]` slice, `BitSlice` is designed to be very easy\nto use safely, while supporting `unsafe` when necessary. Rust has a powerful\noptimizing engine, and `BitSlice` will frequently be compiled to have zero\nruntime cost. Where it is slower, it will not be significantly slower than a\nmanual replacement.\n\nAs the machine instructions operate on registers rather than bits, your choice\nof [`T: BitStore`] type parameter can influence your slice’s performance. Using\nlarger register types means that slices can gallop over completely-filled\ninterior elements faster, while narrower register types permit more graceful\nhandling of subslicing and aliased splits.\n\n# Construction\n\n`BitSlice` views of memory can be constructed over borrowed data in a number of\nways. As this is a reference-only type, it can only ever be built by borrowing\nan existing memory buffer and taking temporary control of your program’s view of\nthe region.\n\n## Macro Constructor\n\n`BitSlice` buffers can be constructed at compile-time through the [`bits!`]\nmacro. This macro accepts a superset of the [`vec!`] arguments, and creates an\nappropriate buffer in the local scope. The macro expands to a borrowed\n[`BitArray`] temporary; currently, it cannot be assigned to a `static` binding.\n\n```rust\nuse bitvec::prelude::*;\n\nlet immut = bits![Lsb0, u8; 0, 1, 0, 0, 1, 0, 0, 1];\nlet mutable: &mut BitSlice<_, _> = bits![mut Msb0, u8; 0; 8];\n\nassert_ne!(immut, mutable);\nmutable.clone_from_bitslice(immut);\nassert_eq!(immut, mutable);\n```\n\n## Borrowing Constructors\n\nThe functions [`from_element`], [`from_element_mut`], [`from_slice`], and\n[`from_slice_mut`] take references to existing memory, and construct\n`BitSlice` references over them. These are the most basic ways to borrow memory\nand view it as bits.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u16; 3];\nlet local_borrow = BitSlice::<Lsb0, _>::from_slice(&data);\n\nlet mut data = [0u8; 5];\nlet local_mut = BitSlice::<Lsb0, _>::from_slice_mut(&mut data);\n```\n\n## Trait Method Constructors\n\nThe [`BitView`] trait implements [`.view_bits::<O>()`] and\n[`.view_bits_mut::<O>()`] methods on elements, arrays not larger than 64\nelements, and slices. This trait, imported in the crate prelude, is *probably*\nthe easiest way for you to borrow memory.\n\n```rust\nuse bitvec::prelude::*;\n\nlet data = [0u32; 5];\nlet trait_view = data.view_bits::<Lsb0>();\n\nlet mut data = 0usize;\nlet trait_mut = data.view_bits_mut::<Msb0>();\n```\n\n## Owned Bit Slices\n\nIf you wish to take ownership of a memory region and enforce that it is always\nviewed as a `BitSlice` by default, you can use one of the [`BitArray`],\n[`BitBox`], or [`BitVec`] types, rather than pairing ordinary buffer types with\nthe borrowing constructors.\n\n```rust\nuse bitvec::prelude::*;\n\nlet slice = bits![0; 27];\nlet array = bitarr![LocalBits, u8; 0; 10];\n# #[cfg(feature = \"alloc\")] fn allocs() {\nlet boxed = bitbox![0; 10];\nlet vec = bitvec![0; 20];\n# } #[cfg(feature = \"alloc\")] allocs();\n\n// arrays always round up\nassert_eq!(array.as_bitslice(), slice[.. 16]);\n# #[cfg(feature = \"alloc\")] fn allocs2() {\n# let slice = bits![0; 27];\n# let boxed = bitbox![0; 10];\n# let vec = bitvec![0; 20];\nassert_eq!(boxed.as_bitslice(), slice[.. 10]);\nassert_eq!(vec.as_bitslice(), slice[.. 20]);\n# } #[cfg(feature = \"alloc\")] allocs2();\n```\n\n[TCP wire format]: https://en.wikipedia.org/wiki/Transmission_Control_Protocol#TCP_segment_structure\n[minval]: https://doc.rust-lang.org/stable/std/primitive.usize.html#associatedconstant.MIN\n\n[`BitArray`]: crate::array::BitArray\n[`BitBox`]: crate::boxed::BitBox\n[`BitRef<Mut, O, T>`]: crate::ptr::BitRef\n[`BitOrder`]: crate::order::BitOrder\n[`BitStore`]: crate::store::BitStore\n[`BitVec`]: crate::vec::BitVec\n[`BitView`]: crate::view::BitView\n[`Cell<T>`]: core::cell::Cell\n[`Lsb0`]: crate::order::Lsb0\n[`Msb0`]: crate::order::Msb0\n[`T: BitStore`]: crate::store::BitStore\n[`Vec<T>`]: alloc::vec::Vec\n\n[`access`]: crate::access\n[`bits!`]: macro@crate::bits\n[`bitvec`]: crate\n[`bitvec::prelude::LocalBits`]: crate::order::LocalBits\n[`from_element`]: Self::from_element\n[`from_element_mut`]: Self::from_element_mut\n[`from_slice`]: Self::from_slice\n[`from_slice_mut`]: Self::from_slice_mut\n[`mem::transmute`]: core::mem::transmute\n[`std::bitset`]: https://en.cppreference.com/w/cpp/utility/bitset\n[`std::vector<bool>`]: https://en.cppreference.com/w/cpp/container/vector_bool\n[`vec!`]: macro@alloc::vec\n\n[`.split_at_mut()`]: Self::split_at_mut\n[`.view_bits::<O>()`]: crate::view::BitView::view_bits\n[`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":352638,"byte_end":366110,"line_start":101,"line_end":423,"column_start":1,"column_end":4}},{"value":"repr(transparent)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":366111,"byte_end":366131,"line_start":424,"line_end":424,"column_start":1,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":2228},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368370,"byte_end":368382,"line_start":490,"line_end":490,"column_start":9,"column_end":21},"name":"from_element","qualname":"<BitSlice<O, T>>::from_element","value":"pub fn from_element(&T) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a shared element.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a shared element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367588,"byte_end":367656,"line_start":463,"line_end":463,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367658,"byte_end":367661,"line_start":464,"line_end":464,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367663,"byte_end":367735,"line_start":465,"line_end":465,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits::<O>()`] which delegates to this function","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367737,"byte_end":367813,"line_start":466,"line_end":466,"column_start":2,"column_end":78}},{"value":"/ and may be more convenient for you to write.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367815,"byte_end":367863,"line_start":467,"line_end":467,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367865,"byte_end":367868,"line_start":468,"line_end":468,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367870,"byte_end":367886,"line_start":469,"line_end":469,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367888,"byte_end":367891,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ - `elem`: A shared reference to a memory element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367893,"byte_end":367946,"line_start":471,"line_end":471,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367948,"byte_end":367951,"line_start":472,"line_end":472,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367953,"byte_end":367966,"line_start":473,"line_end":473,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367968,"byte_end":367971,"line_start":474,"line_end":474,"column_start":2,"column_end":5}},{"value":"/ A shared `&BitSlice` over the `elem` element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367973,"byte_end":368022,"line_start":475,"line_end":475,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368024,"byte_end":368027,"line_start":476,"line_end":476,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368029,"byte_end":368043,"line_start":477,"line_end":477,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368045,"byte_end":368048,"line_start":478,"line_end":478,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368050,"byte_end":368061,"line_start":479,"line_end":479,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368063,"byte_end":368090,"line_start":480,"line_end":480,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368092,"byte_end":368095,"line_start":481,"line_end":481,"column_start":2,"column_end":5}},{"value":"/ let elem = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368097,"byte_end":368116,"line_start":482,"line_end":482,"column_start":2,"column_end":21}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_element(&elem);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368118,"byte_end":368174,"line_start":483,"line_end":483,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(bits.len(), 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368176,"byte_end":368206,"line_start":484,"line_end":484,"column_start":2,"column_end":32}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368208,"byte_end":368215,"line_start":485,"line_end":485,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368217,"byte_end":368220,"line_start":486,"line_end":486,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368222,"byte_end":368262,"line_start":487,"line_end":487,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368264,"byte_end":368301,"line_start":488,"line_end":488,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368303,"byte_end":368361,"line_start":489,"line_end":489,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2229},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369518,"byte_end":369534,"line_start":527,"line_end":527,"column_start":9,"column_end":25},"name":"from_element_mut","qualname":"<BitSlice<O, T>>::from_element_mut","value":"pub fn from_element_mut(&mut T) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over an element.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over an element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368505,"byte_end":368575,"line_start":495,"line_end":495,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368577,"byte_end":368580,"line_start":496,"line_end":496,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all [`BitStore`] implementors,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368582,"byte_end":368654,"line_start":497,"line_end":497,"column_start":2,"column_end":74}},{"value":"/ provides a method [`.view_bits_mut::<O>()`] which delegates to this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368656,"byte_end":368727,"line_start":498,"line_end":498,"column_start":2,"column_end":73}},{"value":"/ function and may be more convenient for you to write.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368729,"byte_end":368786,"line_start":499,"line_end":499,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368788,"byte_end":368791,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368793,"byte_end":368809,"line_start":501,"line_end":501,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368811,"byte_end":368814,"line_start":502,"line_end":502,"column_start":2,"column_end":5}},{"value":"/ - `elem`: An exclusive reference to a memory element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368816,"byte_end":368873,"line_start":503,"line_end":503,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368875,"byte_end":368878,"line_start":504,"line_end":504,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368880,"byte_end":368893,"line_start":505,"line_end":505,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368895,"byte_end":368898,"line_start":506,"line_end":506,"column_start":2,"column_end":5}},{"value":"/ An exclusive `&mut BitSlice` over the `elem` element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368900,"byte_end":368957,"line_start":507,"line_end":507,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368959,"byte_end":368962,"line_start":508,"line_end":508,"column_start":2,"column_end":5}},{"value":"/ Note that the original `elem` reference will be inaccessible for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":368964,"byte_end":369036,"line_start":509,"line_end":509,"column_start":2,"column_end":74}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369038,"byte_end":369093,"line_start":510,"line_end":510,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369095,"byte_end":369098,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369100,"byte_end":369114,"line_start":512,"line_end":512,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369116,"byte_end":369119,"line_start":513,"line_end":513,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369121,"byte_end":369132,"line_start":514,"line_end":514,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369134,"byte_end":369161,"line_start":515,"line_end":515,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369163,"byte_end":369166,"line_start":516,"line_end":516,"column_start":2,"column_end":5}},{"value":"/ let mut elem = 0u16;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369168,"byte_end":369192,"line_start":517,"line_end":517,"column_start":2,"column_end":26}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_element_mut(&mut elem);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369194,"byte_end":369258,"line_start":518,"line_end":518,"column_start":2,"column_end":66}},{"value":"/ bits.set(15, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369260,"byte_end":369283,"line_start":519,"line_end":519,"column_start":2,"column_end":25}},{"value":"/ assert!(bits.get(15).unwrap());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369285,"byte_end":369320,"line_start":520,"line_end":520,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(elem, 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369322,"byte_end":369346,"line_start":521,"line_end":521,"column_start":2,"column_end":26}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369348,"byte_end":369355,"line_start":522,"line_end":522,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369357,"byte_end":369360,"line_start":523,"line_end":523,"column_start":2,"column_end":5}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369362,"byte_end":369402,"line_start":524,"line_end":524,"column_start":2,"column_end":42}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369404,"byte_end":369441,"line_start":525,"line_end":525,"column_start":2,"column_end":39}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369443,"byte_end":369509,"line_start":526,"line_end":526,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2230},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370954,"byte_end":370964,"line_start":570,"line_end":570,"column_start":9,"column_end":19},"name":"from_slice","qualname":"<BitSlice<O, T>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<&Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a shared `&BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs a shared `&BitSlice` reference over a slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369665,"byte_end":369724,"line_start":532,"line_end":532,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369726,"byte_end":369729,"line_start":533,"line_end":533,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369731,"byte_end":369801,"line_start":534,"line_end":534,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits::<O>()`] which delegates to this function and may be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369803,"byte_end":369879,"line_start":535,"line_end":535,"column_start":2,"column_end":78}},{"value":"/ more convenient for you to write.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369881,"byte_end":369918,"line_start":536,"line_end":536,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369920,"byte_end":369923,"line_start":537,"line_end":537,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369925,"byte_end":369941,"line_start":538,"line_end":538,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369943,"byte_end":369946,"line_start":539,"line_end":539,"column_start":2,"column_end":5}},{"value":"/ - `slice`: A shared reference over a sequence of memory elements.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":369948,"byte_end":370017,"line_start":540,"line_end":540,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370019,"byte_end":370022,"line_start":541,"line_end":541,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370024,"byte_end":370037,"line_start":542,"line_end":542,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370039,"byte_end":370042,"line_start":543,"line_end":543,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view of the provided slice. The error condition is only","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370044,"byte_end":370117,"line_start":544,"line_end":544,"column_start":2,"column_end":75}},{"value":"/ encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370119,"byte_end":370185,"line_start":545,"line_end":545,"column_start":2,"column_end":68}},{"value":"/ `&BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370187,"byte_end":370259,"line_start":546,"line_end":546,"column_start":2,"column_end":74}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370261,"byte_end":370322,"line_start":547,"line_end":547,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370324,"byte_end":370327,"line_start":548,"line_end":548,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370329,"byte_end":370345,"line_start":549,"line_end":549,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370347,"byte_end":370350,"line_start":550,"line_end":550,"column_start":2,"column_end":5}},{"value":"/ The produced `&BitSlice` handle always begins at the zeroth bit of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370352,"byte_end":370426,"line_start":551,"line_end":551,"column_start":2,"column_end":76}},{"value":"/ zeroth element in `slice`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370428,"byte_end":370458,"line_start":552,"line_end":552,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370460,"byte_end":370463,"line_start":553,"line_end":553,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370465,"byte_end":370479,"line_start":554,"line_end":554,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370481,"byte_end":370484,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370486,"byte_end":370497,"line_start":556,"line_end":556,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370499,"byte_end":370526,"line_start":557,"line_end":557,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370528,"byte_end":370531,"line_start":558,"line_end":558,"column_start":2,"column_end":5}},{"value":"/ let slice = &[0u8, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370533,"byte_end":370559,"line_start":559,"line_end":559,"column_start":2,"column_end":28}},{"value":"/ let bits = BitSlice::<Msb0, _>::from_slice(slice).unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370561,"byte_end":370624,"line_start":560,"line_end":560,"column_start":2,"column_end":65}},{"value":"/ assert!(bits[15]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370626,"byte_end":370648,"line_start":561,"line_end":561,"column_start":2,"column_end":24}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370650,"byte_end":370657,"line_start":562,"line_end":562,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370659,"byte_end":370662,"line_start":563,"line_end":563,"column_start":2,"column_end":5}},{"value":"/ An example showing this function failing would require a slice exceeding","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370664,"byte_end":370740,"line_start":564,"line_end":564,"column_start":2,"column_end":78}},{"value":"/ `!0usize >> 3` bytes in size, which is infeasible to produce.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370742,"byte_end":370807,"line_start":565,"line_end":565,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370809,"byte_end":370812,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370814,"byte_end":370851,"line_start":567,"line_end":567,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370853,"byte_end":370885,"line_start":568,"line_end":568,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits::<O>()`]: crate::view::BitView::view_bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":370887,"byte_end":370945,"line_start":569,"line_end":569,"column_start":2,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":2231},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373305,"byte_end":373319,"line_start":638,"line_end":638,"column_start":9,"column_end":23},"name":"from_slice_mut","qualname":"<BitSlice<O, T>>::from_slice_mut","value":"pub fn from_slice_mut(&mut [T]) -> Result<&mut Self, BitSpanError<T>>","parent":null,"children":[],"decl_id":null,"docs":" Constructs an exclusive `&mut BitSlice` reference over a slice.","sig":null,"attributes":[{"value":"/ Constructs an exclusive `&mut BitSlice` reference over a slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371364,"byte_end":371431,"line_start":582,"line_end":582,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371433,"byte_end":371436,"line_start":583,"line_end":583,"column_start":2,"column_end":5}},{"value":"/ The [`BitView`] trait, implemented on all `[T]` slices, provides a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371438,"byte_end":371508,"line_start":584,"line_end":584,"column_start":2,"column_end":72}},{"value":"/ method [`.view_bits_mut::<O>()`] which delegates to this function and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371510,"byte_end":371583,"line_start":585,"line_end":585,"column_start":2,"column_end":75}},{"value":"/ may be more convenient for you to write.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371585,"byte_end":371629,"line_start":586,"line_end":586,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371631,"byte_end":371634,"line_start":587,"line_end":587,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371636,"byte_end":371652,"line_start":588,"line_end":588,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371654,"byte_end":371657,"line_start":589,"line_end":589,"column_start":2,"column_end":5}},{"value":"/ - `slice`: An exclusive reference over a sequence of memory elements.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371659,"byte_end":371732,"line_start":590,"line_end":590,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371734,"byte_end":371737,"line_start":591,"line_end":591,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371739,"byte_end":371752,"line_start":592,"line_end":592,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371754,"byte_end":371757,"line_start":593,"line_end":593,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view of the provided slice. The error condition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371759,"byte_end":371831,"line_start":594,"line_end":594,"column_start":2,"column_end":74}},{"value":"/ only encountered if the source slice is too long to be encoded in a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371833,"byte_end":371904,"line_start":595,"line_end":595,"column_start":2,"column_end":73}},{"value":"/ `&mut BitSlice` handle, but such a slice is likely impossible to produce","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371906,"byte_end":371982,"line_start":596,"line_end":596,"column_start":2,"column_end":78}},{"value":"/ without causing errors long before calling this function.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":371984,"byte_end":372045,"line_start":597,"line_end":597,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372047,"byte_end":372050,"line_start":598,"line_end":598,"column_start":2,"column_end":5}},{"value":"/ Note that the original `slice` reference will be inaccessible for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372052,"byte_end":372125,"line_start":599,"line_end":599,"column_start":2,"column_end":75}},{"value":"/ duration of the returned slice handle’s lifetime.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372127,"byte_end":372182,"line_start":600,"line_end":600,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372184,"byte_end":372187,"line_start":601,"line_end":601,"column_start":2,"column_end":5}},{"value":"/ # Conditions","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372189,"byte_end":372205,"line_start":602,"line_end":602,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372207,"byte_end":372210,"line_start":603,"line_end":603,"column_start":2,"column_end":5}},{"value":"/ The produced `&mut BitSlice` handle always begins at the zeroth bit of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372212,"byte_end":372286,"line_start":604,"line_end":604,"column_start":2,"column_end":76}},{"value":"/ the zeroth element in `slice`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372288,"byte_end":372322,"line_start":605,"line_end":605,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372324,"byte_end":372327,"line_start":606,"line_end":606,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372329,"byte_end":372343,"line_start":607,"line_end":607,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372345,"byte_end":372348,"line_start":608,"line_end":608,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372350,"byte_end":372361,"line_start":609,"line_end":609,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372363,"byte_end":372390,"line_start":610,"line_end":610,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372392,"byte_end":372395,"line_start":611,"line_end":611,"column_start":2,"column_end":5}},{"value":"/ let mut slice = [0u8; 2];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372397,"byte_end":372426,"line_start":612,"line_end":612,"column_start":2,"column_end":31}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut slice).unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372428,"byte_end":372500,"line_start":613,"line_end":613,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372502,"byte_end":372505,"line_start":614,"line_end":614,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372507,"byte_end":372529,"line_start":615,"line_end":615,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372531,"byte_end":372553,"line_start":616,"line_end":616,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372555,"byte_end":372576,"line_start":617,"line_end":617,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(slice[0], 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372578,"byte_end":372606,"line_start":618,"line_end":618,"column_start":2,"column_end":30}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372608,"byte_end":372615,"line_start":619,"line_end":619,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372617,"byte_end":372620,"line_start":620,"line_end":620,"column_start":2,"column_end":5}},{"value":"/ This example attempts to construct a `&mut BitSlice` handle from a slice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372622,"byte_end":372698,"line_start":621,"line_end":621,"column_start":2,"column_end":78}},{"value":"/ that is too large to index. Either the `vec!` allocation will fail, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372700,"byte_end":372774,"line_start":622,"line_end":622,"column_start":2,"column_end":76}},{"value":"/ the bit-slice constructor will fail.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372776,"byte_end":372816,"line_start":623,"line_end":623,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372818,"byte_end":372821,"line_start":624,"line_end":624,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372823,"byte_end":372847,"line_start":625,"line_end":625,"column_start":2,"column_end":26}},{"value":"/ # #[cfg(feature = \"alloc\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372849,"byte_end":372882,"line_start":626,"line_end":626,"column_start":2,"column_end":35}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372884,"byte_end":372911,"line_start":627,"line_end":627,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372913,"byte_end":372916,"line_start":628,"line_end":628,"column_start":2,"column_end":5}},{"value":"/ let mut data = vec![0usize; BitSlice::<Lsb0, usize>::MAX_ELTS];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372918,"byte_end":372985,"line_start":629,"line_end":629,"column_start":2,"column_end":69}},{"value":"/ let bits = BitSlice::<Lsb0, _>::from_slice_mut(&mut data[..]).unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":372987,"byte_end":373062,"line_start":630,"line_end":630,"column_start":2,"column_end":77}},{"value":"/ # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373064,"byte_end":373071,"line_start":631,"line_end":631,"column_start":2,"column_end":9}},{"value":"/ # #[cfg(not(feature = \"alloc\"))] panic!(\"No allocator present\");","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373073,"byte_end":373141,"line_start":632,"line_end":632,"column_start":2,"column_end":70}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373143,"byte_end":373150,"line_start":633,"line_end":633,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373152,"byte_end":373155,"line_start":634,"line_end":634,"column_start":2,"column_end":5}},{"value":"/ [`BitView`]: crate::view::BitView","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373157,"byte_end":373194,"line_start":635,"line_end":635,"column_start":2,"column_end":39}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373196,"byte_end":373228,"line_start":636,"line_end":636,"column_start":2,"column_end":34}},{"value":"/ [`.view_bits_mut::<O>()`]: crate::view::BitView::view_bits_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373230,"byte_end":373296,"line_start":637,"line_end":637,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2232},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374097,"byte_end":374117,"line_start":663,"line_end":663,"column_start":16,"column_end":36},"name":"from_slice_unchecked","qualname":"<BitSlice<O, T>>::from_slice_unchecked","value":"pub unsafe fn from_slice_unchecked(&[T]) -> &Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373595,"byte_end":373670,"line_start":650,"line_end":650,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373672,"byte_end":373709,"line_start":651,"line_end":651,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373711,"byte_end":373714,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373716,"byte_end":373728,"line_start":653,"line_end":653,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373730,"byte_end":373733,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373735,"byte_end":373807,"line_start":655,"line_end":655,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373809,"byte_end":373885,"line_start":656,"line_end":656,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373887,"byte_end":373963,"line_start":657,"line_end":657,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373965,"byte_end":373968,"line_start":658,"line_end":658,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":373970,"byte_end":374000,"line_start":659,"line_end":659,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374002,"byte_end":374005,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374007,"byte_end":374039,"line_start":661,"line_end":661,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice()`]: Self::from_slice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374041,"byte_end":374081,"line_start":662,"line_end":662,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2233},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374798,"byte_end":374822,"line_start":683,"line_end":683,"column_start":16,"column_end":40},"name":"from_slice_unchecked_mut","qualname":"<BitSlice<O, T>>::from_slice_unchecked_mut","value":"pub unsafe fn from_slice_unchecked_mut(&mut [T]) -> &mut Self","parent":null,"children":[],"decl_id":null,"docs":" Converts a slice reference into a `BitSlice` reference without checking\n that its size can be safely used.","sig":null,"attributes":[{"value":"/ Converts a slice reference into a `BitSlice` reference without checking","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374284,"byte_end":374359,"line_start":670,"line_end":670,"column_start":2,"column_end":77}},{"value":"/ that its size can be safely used.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374361,"byte_end":374398,"line_start":671,"line_end":671,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374400,"byte_end":374403,"line_start":672,"line_end":672,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374405,"byte_end":374417,"line_start":673,"line_end":673,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374419,"byte_end":374422,"line_start":674,"line_end":674,"column_start":2,"column_end":5}},{"value":"/ If the `slice` length is longer than [`MAX_ELTS`], then the returned","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374424,"byte_end":374496,"line_start":675,"line_end":675,"column_start":2,"column_end":74}},{"value":"/ `BitSlice` will have its length severely truncated. This is not a safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374498,"byte_end":374574,"line_start":676,"line_end":676,"column_start":2,"column_end":78}},{"value":"/ violation, but it is behavior that callers must avoid to remain correct.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374576,"byte_end":374652,"line_start":677,"line_end":677,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374654,"byte_end":374657,"line_start":678,"line_end":678,"column_start":2,"column_end":5}},{"value":"/ Prefer [`::from_slice_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374659,"byte_end":374693,"line_start":679,"line_end":679,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374695,"byte_end":374698,"line_start":680,"line_end":680,"column_start":2,"column_end":5}},{"value":"/ [`MAX_ELTS`]: Self::MAX_ELTS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374700,"byte_end":374732,"line_start":681,"line_end":681,"column_start":2,"column_end":34}},{"value":"/ [`::from_slice_mut()`]: Self::from_slice_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":374734,"byte_end":374782,"line_start":682,"line_end":682,"column_start":2,"column_end":50}}]},{"kind":"Method","id":{"krate":0,"index":2234},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375267,"byte_end":375272,"line_start":702,"line_end":702,"column_start":9,"column_end":14},"name":"empty","qualname":"<BitSlice<O, T>>::empty","value":"pub fn empty<'a>() -> &'a Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty slice reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375001,"byte_end":375040,"line_start":690,"line_end":690,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375042,"byte_end":375045,"line_start":691,"line_end":691,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&[]` for ordinary slices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375047,"byte_end":375099,"line_start":692,"line_end":692,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375101,"byte_end":375104,"line_start":693,"line_end":693,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375106,"byte_end":375120,"line_start":694,"line_end":694,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375122,"byte_end":375125,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375127,"byte_end":375138,"line_start":696,"line_end":696,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375140,"byte_end":375167,"line_start":697,"line_end":697,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375169,"byte_end":375172,"line_start":698,"line_end":698,"column_start":2,"column_end":5}},{"value":"/ let bits: &BitSlice = BitSlice::empty();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375174,"byte_end":375218,"line_start":699,"line_end":699,"column_start":2,"column_end":46}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375220,"byte_end":375249,"line_start":700,"line_end":700,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375251,"byte_end":375258,"line_start":701,"line_end":701,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2236},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375634,"byte_end":375643,"line_start":718,"line_end":718,"column_start":9,"column_end":18},"name":"empty_mut","qualname":"<BitSlice<O, T>>::empty_mut","value":"pub fn empty_mut<'a>() -> &'a mut Self","parent":null,"children":[],"decl_id":null,"docs":" Produces the empty mutable slice reference.","sig":null,"attributes":[{"value":"/ Produces the empty mutable slice reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375348,"byte_end":375395,"line_start":706,"line_end":706,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375397,"byte_end":375400,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `&mut []` for ordinary slices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375402,"byte_end":375458,"line_start":708,"line_end":708,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375460,"byte_end":375463,"line_start":709,"line_end":709,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375465,"byte_end":375479,"line_start":710,"line_end":710,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375481,"byte_end":375484,"line_start":711,"line_end":711,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375486,"byte_end":375497,"line_start":712,"line_end":712,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375499,"byte_end":375526,"line_start":713,"line_end":713,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375528,"byte_end":375531,"line_start":714,"line_end":714,"column_start":2,"column_end":5}},{"value":"/ let bits: &mut BitSlice = BitSlice::empty_mut();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375533,"byte_end":375585,"line_start":715,"line_end":715,"column_start":2,"column_end":54}},{"value":"/ assert!(bits.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375587,"byte_end":375616,"line_start":716,"line_end":716,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375618,"byte_end":375625,"line_start":717,"line_end":717,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2238},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376607,"byte_end":376610,"line_start":761,"line_end":761,"column_start":9,"column_end":12},"name":"set","qualname":"<BitSlice<O, T>>::set","value":"pub fn set(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375708,"byte_end":375746,"line_start":722,"line_end":722,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375748,"byte_end":375751,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375753,"byte_end":375769,"line_start":724,"line_end":724,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375771,"byte_end":375774,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375776,"byte_end":375793,"line_start":726,"line_end":726,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375795,"byte_end":375869,"line_start":727,"line_end":727,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375871,"byte_end":375892,"line_start":728,"line_end":728,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375894,"byte_end":375968,"line_start":729,"line_end":729,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375970,"byte_end":375973,"line_start":730,"line_end":730,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375975,"byte_end":375988,"line_start":731,"line_end":731,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375990,"byte_end":375993,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":375995,"byte_end":376070,"line_start":733,"line_end":733,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376072,"byte_end":376075,"line_start":734,"line_end":734,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376077,"byte_end":376089,"line_start":735,"line_end":735,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376091,"byte_end":376094,"line_start":736,"line_end":736,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376096,"byte_end":376162,"line_start":737,"line_end":737,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376164,"byte_end":376167,"line_start":738,"line_end":738,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376169,"byte_end":376183,"line_start":739,"line_end":739,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376185,"byte_end":376188,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376190,"byte_end":376201,"line_start":741,"line_end":741,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376203,"byte_end":376230,"line_start":742,"line_end":742,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376232,"byte_end":376235,"line_start":743,"line_end":743,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376237,"byte_end":376265,"line_start":744,"line_end":744,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376267,"byte_end":376270,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376272,"byte_end":376294,"line_start":746,"line_end":746,"column_start":2,"column_end":24}},{"value":"/ bits.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376296,"byte_end":376318,"line_start":747,"line_end":747,"column_start":2,"column_end":24}},{"value":"/ assert!(bits[0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376320,"byte_end":376341,"line_start":748,"line_end":748,"column_start":2,"column_end":23}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376343,"byte_end":376350,"line_start":749,"line_end":749,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376352,"byte_end":376355,"line_start":750,"line_end":750,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376357,"byte_end":376433,"line_start":751,"line_end":751,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376435,"byte_end":376438,"line_start":752,"line_end":752,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376440,"byte_end":376464,"line_start":753,"line_end":753,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376466,"byte_end":376493,"line_start":754,"line_end":754,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376495,"byte_end":376498,"line_start":755,"line_end":755,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376500,"byte_end":376528,"line_start":756,"line_end":756,"column_start":2,"column_end":30}},{"value":"/ bits.set(1, false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376530,"byte_end":376553,"line_start":757,"line_end":757,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376555,"byte_end":376562,"line_start":758,"line_end":758,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376564,"byte_end":376567,"line_start":759,"line_end":759,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376569,"byte_end":376598,"line_start":760,"line_end":760,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2239},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378225,"byte_end":378236,"line_start":820,"line_end":820,"column_start":9,"column_end":20},"name":"set_aliased","qualname":"<BitSlice<O, T>>::set_aliased","value":"pub fn set_aliased(&Self, usize, bool) where T: radium::Radium","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376740,"byte_end":376778,"line_start":768,"line_end":768,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376780,"byte_end":376783,"line_start":769,"line_end":769,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376785,"byte_end":376858,"line_start":770,"line_end":770,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376860,"byte_end":376936,"line_start":771,"line_end":771,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":376938,"byte_end":377007,"line_start":772,"line_end":772,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377009,"byte_end":377031,"line_start":773,"line_end":773,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377033,"byte_end":377036,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377038,"byte_end":377054,"line_start":775,"line_end":775,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377056,"byte_end":377059,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377061,"byte_end":377074,"line_start":777,"line_end":777,"column_start":2,"column_end":15}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377076,"byte_end":377150,"line_start":778,"line_end":778,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377152,"byte_end":377173,"line_start":779,"line_end":779,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377175,"byte_end":377249,"line_start":780,"line_end":780,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377251,"byte_end":377254,"line_start":781,"line_end":781,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377256,"byte_end":377269,"line_start":782,"line_end":782,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377271,"byte_end":377274,"line_start":783,"line_end":783,"column_start":2,"column_end":5}},{"value":"/ If `index` is valid, then the bit to which it refers is set to `value`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377276,"byte_end":377351,"line_start":784,"line_end":784,"column_start":2,"column_end":77}},{"value":"/ If `T` is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377353,"byte_end":377426,"line_start":785,"line_end":785,"column_start":2,"column_end":75}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377428,"byte_end":377462,"line_start":786,"line_end":786,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377464,"byte_end":377467,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377469,"byte_end":377481,"line_start":788,"line_end":788,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377483,"byte_end":377486,"line_start":789,"line_end":789,"column_start":2,"column_end":5}},{"value":"/ This method panics if `index` is not less than [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377488,"byte_end":377554,"line_start":790,"line_end":790,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377556,"byte_end":377559,"line_start":791,"line_end":791,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377561,"byte_end":377575,"line_start":792,"line_end":792,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377577,"byte_end":377580,"line_start":793,"line_end":793,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377582,"byte_end":377593,"line_start":794,"line_end":794,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377595,"byte_end":377622,"line_start":795,"line_end":795,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377624,"byte_end":377649,"line_start":796,"line_end":796,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377651,"byte_end":377654,"line_start":797,"line_end":797,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377656,"byte_end":377686,"line_start":798,"line_end":798,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377688,"byte_end":377728,"line_start":799,"line_end":799,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377730,"byte_end":377752,"line_start":800,"line_end":800,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377754,"byte_end":377757,"line_start":801,"line_end":801,"column_start":2,"column_end":5}},{"value":"/ bits.set_aliased(1, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377759,"byte_end":377789,"line_start":802,"line_end":802,"column_start":2,"column_end":32}},{"value":"/ assert!(bits_2[1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377791,"byte_end":377814,"line_start":803,"line_end":803,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377816,"byte_end":377823,"line_start":804,"line_end":804,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377825,"byte_end":377828,"line_start":805,"line_end":805,"column_start":2,"column_end":5}},{"value":"/ This example panics when it attempts to set a bit that is out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377830,"byte_end":377906,"line_start":806,"line_end":806,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377908,"byte_end":377911,"line_start":807,"line_end":807,"column_start":2,"column_end":5}},{"value":"/ ```rust,should_panic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377913,"byte_end":377937,"line_start":808,"line_end":808,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377939,"byte_end":377966,"line_start":809,"line_end":809,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377968,"byte_end":377993,"line_start":810,"line_end":810,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":377995,"byte_end":377998,"line_start":811,"line_end":811,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378000,"byte_end":378030,"line_start":812,"line_end":812,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Lsb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378032,"byte_end":378072,"line_start":813,"line_end":813,"column_start":2,"column_end":42}},{"value":"/ bits.set_aliased(8, false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378074,"byte_end":378105,"line_start":814,"line_end":814,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378107,"byte_end":378114,"line_start":815,"line_end":815,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378116,"byte_end":378119,"line_start":816,"line_end":816,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378121,"byte_end":378153,"line_start":817,"line_end":817,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378155,"byte_end":378185,"line_start":818,"line_end":818,"column_start":2,"column_end":32}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378187,"byte_end":378216,"line_start":819,"line_end":819,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2240},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378907,"byte_end":378910,"line_start":857,"line_end":857,"column_start":9,"column_end":12},"name":"any","qualname":"<BitSlice<O, T>>::any","value":"pub fn any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is set (logical `∨`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is set (logical `∨`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378395,"byte_end":378454,"line_start":828,"line_end":828,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378456,"byte_end":378459,"line_start":829,"line_end":829,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378461,"byte_end":378478,"line_start":830,"line_end":830,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378480,"byte_end":378483,"line_start":831,"line_end":831,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378485,"byte_end":378496,"line_start":832,"line_end":832,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378498,"byte_end":378510,"line_start":833,"line_end":833,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378512,"byte_end":378524,"line_start":834,"line_end":834,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378526,"byte_end":378538,"line_start":835,"line_end":835,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378540,"byte_end":378552,"line_start":836,"line_end":836,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378554,"byte_end":378561,"line_start":837,"line_end":837,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378563,"byte_end":378566,"line_start":838,"line_end":838,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378568,"byte_end":378584,"line_start":839,"line_end":839,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378586,"byte_end":378589,"line_start":840,"line_end":840,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378591,"byte_end":378604,"line_start":841,"line_end":841,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378606,"byte_end":378609,"line_start":842,"line_end":842,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378611,"byte_end":378624,"line_start":843,"line_end":843,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378626,"byte_end":378629,"line_start":844,"line_end":844,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is set. The empty slice returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378631,"byte_end":378702,"line_start":845,"line_end":845,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378704,"byte_end":378716,"line_start":846,"line_end":846,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378718,"byte_end":378721,"line_start":847,"line_end":847,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378723,"byte_end":378737,"line_start":848,"line_end":848,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378739,"byte_end":378742,"line_start":849,"line_end":849,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378744,"byte_end":378755,"line_start":850,"line_end":850,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378757,"byte_end":378784,"line_start":851,"line_end":851,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378786,"byte_end":378789,"line_start":852,"line_end":852,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378791,"byte_end":378824,"line_start":853,"line_end":853,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].any());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378826,"byte_end":378856,"line_start":854,"line_end":854,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].any());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378858,"byte_end":378889,"line_start":855,"line_end":855,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":378891,"byte_end":378898,"line_start":856,"line_end":856,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2244},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379924,"byte_end":379927,"line_start":902,"line_end":902,"column_start":9,"column_end":12},"name":"all","qualname":"<BitSlice<O, T>>::all","value":"pub fn all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice domain are set (logical `∧`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice domain are set (logical `∧`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379402,"byte_end":379470,"line_start":873,"line_end":873,"column_start":2,"column_end":68}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379472,"byte_end":379475,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379477,"byte_end":379494,"line_start":875,"line_end":875,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379496,"byte_end":379499,"line_start":876,"line_end":876,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379501,"byte_end":379512,"line_start":877,"line_end":877,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379514,"byte_end":379526,"line_start":878,"line_end":878,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379528,"byte_end":379540,"line_start":879,"line_end":879,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379542,"byte_end":379554,"line_start":880,"line_end":880,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379556,"byte_end":379568,"line_start":881,"line_end":881,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379570,"byte_end":379577,"line_start":882,"line_end":882,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379579,"byte_end":379582,"line_start":883,"line_end":883,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379584,"byte_end":379600,"line_start":884,"line_end":884,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379602,"byte_end":379605,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379607,"byte_end":379620,"line_start":886,"line_end":886,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379622,"byte_end":379625,"line_start":887,"line_end":887,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379627,"byte_end":379640,"line_start":888,"line_end":888,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379642,"byte_end":379645,"line_start":889,"line_end":889,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are set. The empty slice returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379647,"byte_end":379720,"line_start":890,"line_end":890,"column_start":2,"column_end":75}},{"value":"/ `true`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379722,"byte_end":379733,"line_start":891,"line_end":891,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379735,"byte_end":379738,"line_start":892,"line_end":892,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379740,"byte_end":379754,"line_start":893,"line_end":893,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379756,"byte_end":379759,"line_start":894,"line_end":894,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379761,"byte_end":379772,"line_start":895,"line_end":895,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379774,"byte_end":379801,"line_start":896,"line_end":896,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379803,"byte_end":379806,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379808,"byte_end":379841,"line_start":898,"line_end":898,"column_start":2,"column_end":35}},{"value":"/ assert!(bits[.. 2].all());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379843,"byte_end":379873,"line_start":899,"line_end":899,"column_start":2,"column_end":32}},{"value":"/ assert!(!bits[2 ..].all());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379875,"byte_end":379906,"line_start":900,"line_end":900,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":379908,"byte_end":379915,"line_start":901,"line_end":901,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2248},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381474,"byte_end":381481,"line_start":960,"line_end":960,"column_start":9,"column_end":16},"name":"not_any","qualname":"<BitSlice<O, T>>::not_any","value":"pub fn not_any(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *all* bits in the slice are unset (logical `¬∨`).","sig":null,"attributes":[{"value":"/ Tests if *all* bits in the slice are unset (logical `¬∨`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":380982,"byte_end":381047,"line_start":932,"line_end":932,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381049,"byte_end":381052,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381054,"byte_end":381071,"line_start":934,"line_end":934,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381073,"byte_end":381076,"line_start":935,"line_end":935,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381078,"byte_end":381089,"line_start":936,"line_end":936,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381091,"byte_end":381103,"line_start":937,"line_end":937,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381105,"byte_end":381117,"line_start":938,"line_end":938,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381119,"byte_end":381131,"line_start":939,"line_end":939,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381133,"byte_end":381145,"line_start":940,"line_end":940,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381147,"byte_end":381154,"line_start":941,"line_end":941,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381156,"byte_end":381159,"line_start":942,"line_end":942,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381161,"byte_end":381177,"line_start":943,"line_end":943,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381179,"byte_end":381182,"line_start":944,"line_end":944,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381184,"byte_end":381197,"line_start":945,"line_end":945,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381199,"byte_end":381202,"line_start":946,"line_end":946,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381204,"byte_end":381217,"line_start":947,"line_end":947,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381219,"byte_end":381222,"line_start":948,"line_end":948,"column_start":2,"column_end":5}},{"value":"/ Whether all bits in the slice domain are unset.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381224,"byte_end":381275,"line_start":949,"line_end":949,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381277,"byte_end":381280,"line_start":950,"line_end":950,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381282,"byte_end":381296,"line_start":951,"line_end":951,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381298,"byte_end":381301,"line_start":952,"line_end":952,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381303,"byte_end":381314,"line_start":953,"line_end":953,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381316,"byte_end":381343,"line_start":954,"line_end":954,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381345,"byte_end":381348,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381350,"byte_end":381383,"line_start":956,"line_end":956,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_any());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381385,"byte_end":381420,"line_start":957,"line_end":957,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_any());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381422,"byte_end":381456,"line_start":958,"line_end":958,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381458,"byte_end":381465,"line_start":959,"line_end":959,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2249},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382006,"byte_end":382013,"line_start":992,"line_end":992,"column_start":9,"column_end":16},"name":"not_all","qualname":"<BitSlice<O, T>>::not_all","value":"pub fn not_all(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests if *any* bit in the slice is unset (logical `¬∧`).","sig":null,"attributes":[{"value":"/ Tests if *any* bit in the slice is unset (logical `¬∧`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381518,"byte_end":381581,"line_start":964,"line_end":964,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381583,"byte_end":381586,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381588,"byte_end":381605,"line_start":966,"line_end":966,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381607,"byte_end":381610,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381612,"byte_end":381623,"line_start":968,"line_end":968,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381625,"byte_end":381637,"line_start":969,"line_end":969,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381639,"byte_end":381651,"line_start":970,"line_end":970,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381653,"byte_end":381665,"line_start":971,"line_end":971,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381667,"byte_end":381679,"line_start":972,"line_end":972,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381681,"byte_end":381688,"line_start":973,"line_end":973,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381690,"byte_end":381693,"line_start":974,"line_end":974,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381695,"byte_end":381711,"line_start":975,"line_end":975,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381713,"byte_end":381716,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381718,"byte_end":381731,"line_start":977,"line_end":977,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381733,"byte_end":381736,"line_start":978,"line_end":978,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381738,"byte_end":381751,"line_start":979,"line_end":979,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381753,"byte_end":381756,"line_start":980,"line_end":980,"column_start":2,"column_end":5}},{"value":"/ Whether any bit in the slice domain is unset.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381758,"byte_end":381807,"line_start":981,"line_end":981,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381809,"byte_end":381812,"line_start":982,"line_end":982,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381814,"byte_end":381828,"line_start":983,"line_end":983,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381830,"byte_end":381833,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381835,"byte_end":381846,"line_start":985,"line_end":985,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381848,"byte_end":381875,"line_start":986,"line_end":986,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381877,"byte_end":381880,"line_start":987,"line_end":987,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381882,"byte_end":381915,"line_start":988,"line_end":988,"column_start":2,"column_end":35}},{"value":"/ assert!(!bits[.. 2].not_all());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381917,"byte_end":381952,"line_start":989,"line_end":989,"column_start":2,"column_end":37}},{"value":"/ assert!(bits[2 ..].not_all());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381954,"byte_end":381988,"line_start":990,"line_end":990,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":381990,"byte_end":381997,"line_start":991,"line_end":991,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2250},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382821,"byte_end":382825,"line_start":1034,"line_end":1034,"column_start":9,"column_end":13},"name":"some","qualname":"<BitSlice<O, T>>::some","value":"pub fn some(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Tests whether the slice has some, but not all, bits set and some, but\n not all, bits unset.","sig":null,"attributes":[{"value":"/ Tests whether the slice has some, but not all, bits set and some, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382050,"byte_end":382123,"line_start":996,"line_end":996,"column_start":2,"column_end":75}},{"value":"/ not all, bits unset.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382125,"byte_end":382149,"line_start":997,"line_end":997,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382151,"byte_end":382154,"line_start":998,"line_end":998,"column_start":2,"column_end":5}},{"value":"/ This is `false` if either [`.all()`] or [`.not_any()`] are `true`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382156,"byte_end":382226,"line_start":999,"line_end":999,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382228,"byte_end":382231,"line_start":1000,"line_end":1000,"column_start":2,"column_end":5}},{"value":"/ # Truth Table","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382233,"byte_end":382250,"line_start":1001,"line_end":1001,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382252,"byte_end":382255,"line_start":1002,"line_end":1002,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382257,"byte_end":382268,"line_start":1003,"line_end":1003,"column_start":2,"column_end":13}},{"value":"/ 0 0 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382270,"byte_end":382282,"line_start":1004,"line_end":1004,"column_start":2,"column_end":14}},{"value":"/ 0 1 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382284,"byte_end":382296,"line_start":1005,"line_end":1005,"column_start":2,"column_end":14}},{"value":"/ 1 0 => 1","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382298,"byte_end":382310,"line_start":1006,"line_end":1006,"column_start":2,"column_end":14}},{"value":"/ 1 1 => 0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382312,"byte_end":382324,"line_start":1007,"line_end":1007,"column_start":2,"column_end":14}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382326,"byte_end":382333,"line_start":1008,"line_end":1008,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382335,"byte_end":382338,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382340,"byte_end":382356,"line_start":1010,"line_end":1010,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382358,"byte_end":382361,"line_start":1011,"line_end":1011,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382363,"byte_end":382376,"line_start":1012,"line_end":1012,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382378,"byte_end":382381,"line_start":1013,"line_end":1013,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382383,"byte_end":382396,"line_start":1014,"line_end":1014,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382398,"byte_end":382401,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ Whether the slice domain has mixed content. The empty slice returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382403,"byte_end":382474,"line_start":1016,"line_end":1016,"column_start":2,"column_end":73}},{"value":"/ `false`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382476,"byte_end":382488,"line_start":1017,"line_end":1017,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382490,"byte_end":382493,"line_start":1018,"line_end":1018,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382495,"byte_end":382509,"line_start":1019,"line_end":1019,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382511,"byte_end":382514,"line_start":1020,"line_end":1020,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382516,"byte_end":382527,"line_start":1021,"line_end":1021,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382529,"byte_end":382556,"line_start":1022,"line_end":1022,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382558,"byte_end":382561,"line_start":1023,"line_end":1023,"column_start":2,"column_end":5}},{"value":"/ let data = 0b111_000_10u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382563,"byte_end":382593,"line_start":1024,"line_end":1024,"column_start":2,"column_end":32}},{"value":"/ let bits = bits![1, 1, 0, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382595,"byte_end":382634,"line_start":1025,"line_end":1025,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382636,"byte_end":382639,"line_start":1026,"line_end":1026,"column_start":2,"column_end":5}},{"value":"/ assert!(!bits[.. 2].some());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382641,"byte_end":382673,"line_start":1027,"line_end":1027,"column_start":2,"column_end":34}},{"value":"/ assert!(!bits[2 .. 4].some());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382675,"byte_end":382709,"line_start":1028,"line_end":1028,"column_start":2,"column_end":36}},{"value":"/ assert!(bits.some());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382711,"byte_end":382736,"line_start":1029,"line_end":1029,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382738,"byte_end":382745,"line_start":1030,"line_end":1030,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382747,"byte_end":382750,"line_start":1031,"line_end":1031,"column_start":2,"column_end":5}},{"value":"/ [`.all()`]: Self::all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382752,"byte_end":382777,"line_start":1032,"line_end":1032,"column_start":2,"column_end":27}},{"value":"/ [`.not_any()`]: Self::not_any","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382779,"byte_end":382812,"line_start":1033,"line_end":1033,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2251},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383314,"byte_end":383324,"line_start":1059,"line_end":1059,"column_start":9,"column_end":19},"name":"count_ones","qualname":"<BitSlice<O, T>>::count_ones","value":"pub fn count_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits set to `1` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits set to `1` in the slice contents.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382879,"byte_end":382942,"line_start":1038,"line_end":1038,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382944,"byte_end":382947,"line_start":1039,"line_end":1039,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382949,"byte_end":382965,"line_start":1040,"line_end":1040,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382967,"byte_end":382970,"line_start":1041,"line_end":1041,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382972,"byte_end":382985,"line_start":1042,"line_end":1042,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382987,"byte_end":382990,"line_start":1043,"line_end":1043,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":382992,"byte_end":383005,"line_start":1044,"line_end":1044,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383007,"byte_end":383010,"line_start":1045,"line_end":1045,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383012,"byte_end":383075,"line_start":1046,"line_end":1046,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383077,"byte_end":383080,"line_start":1047,"line_end":1047,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383082,"byte_end":383096,"line_start":1048,"line_end":1048,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383098,"byte_end":383101,"line_start":1049,"line_end":1049,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383103,"byte_end":383119,"line_start":1050,"line_end":1050,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383121,"byte_end":383124,"line_start":1051,"line_end":1051,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383126,"byte_end":383137,"line_start":1052,"line_end":1052,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383139,"byte_end":383166,"line_start":1053,"line_end":1053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383168,"byte_end":383171,"line_start":1054,"line_end":1054,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383173,"byte_end":383206,"line_start":1055,"line_end":1055,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_ones(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383208,"byte_end":383251,"line_start":1056,"line_end":1056,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits[2 ..].count_ones(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383253,"byte_end":383296,"line_start":1057,"line_end":1057,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383298,"byte_end":383305,"line_start":1058,"line_end":1058,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2255},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384377,"byte_end":384388,"line_start":1104,"line_end":1104,"column_start":9,"column_end":20},"name":"count_zeros","qualname":"<BitSlice<O, T>>::count_zeros","value":"pub fn count_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits cleared to `0` in the slice contents.","sig":null,"attributes":[{"value":"/ Counts the number of bits cleared to `0` in the slice contents.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":383932,"byte_end":383999,"line_start":1083,"line_end":1083,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384001,"byte_end":384004,"line_start":1084,"line_end":1084,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384006,"byte_end":384022,"line_start":1085,"line_end":1085,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384024,"byte_end":384027,"line_start":1086,"line_end":1086,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384029,"byte_end":384042,"line_start":1087,"line_end":1087,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384044,"byte_end":384047,"line_start":1088,"line_end":1088,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384049,"byte_end":384062,"line_start":1089,"line_end":1089,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384064,"byte_end":384067,"line_start":1090,"line_end":1090,"column_start":2,"column_end":5}},{"value":"/ The number of bits in the slice domain that are cleared to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384069,"byte_end":384136,"line_start":1091,"line_end":1091,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384138,"byte_end":384141,"line_start":1092,"line_end":1092,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384143,"byte_end":384157,"line_start":1093,"line_end":1093,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384159,"byte_end":384162,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384164,"byte_end":384180,"line_start":1095,"line_end":1095,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384182,"byte_end":384185,"line_start":1096,"line_end":1096,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384187,"byte_end":384198,"line_start":1097,"line_end":1097,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384200,"byte_end":384227,"line_start":1098,"line_end":1098,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384229,"byte_end":384232,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384234,"byte_end":384267,"line_start":1100,"line_end":1100,"column_start":2,"column_end":35}},{"value":"/ assert_eq!(bits[.. 2].count_zeros(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384269,"byte_end":384313,"line_start":1101,"line_end":1101,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits[2 ..].count_zeros(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384315,"byte_end":384359,"line_start":1102,"line_end":1102,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":384361,"byte_end":384368,"line_start":1103,"line_end":1103,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2259},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385618,"byte_end":385627,"line_start":1151,"line_end":1151,"column_start":9,"column_end":18},"name":"iter_ones","qualname":"<BitSlice<O, T>>::iter_ones","value":"pub fn iter_ones(&Self) -> IterOnes<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are set to `1`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385003,"byte_end":385063,"line_start":1128,"line_end":1128,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385065,"byte_end":385068,"line_start":1129,"line_end":1129,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385070,"byte_end":385084,"line_start":1130,"line_end":1130,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385086,"byte_end":385089,"line_start":1131,"line_end":1131,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385091,"byte_end":385102,"line_start":1132,"line_end":1132,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385104,"byte_end":385131,"line_start":1133,"line_end":1133,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385133,"byte_end":385136,"line_start":1134,"line_end":1134,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1, 0, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385138,"byte_end":385186,"line_start":1135,"line_end":1135,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385188,"byte_end":385236,"line_start":1136,"line_end":1136,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385238,"byte_end":385241,"line_start":1137,"line_end":1137,"column_start":2,"column_end":5}},{"value":"/ let mut iter_ones = bits.iter_ones();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385243,"byte_end":385284,"line_start":1138,"line_end":1138,"column_start":2,"column_end":43}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385286,"byte_end":385319,"line_start":1139,"line_end":1139,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385321,"byte_end":385336,"line_start":1140,"line_end":1140,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385338,"byte_end":385356,"line_start":1141,"line_end":1141,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if bit { Some(idx) } else { None });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385358,"byte_end":385425,"line_start":1142,"line_end":1142,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385427,"byte_end":385430,"line_start":1143,"line_end":1143,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_ones.zip(compose).zip(indices) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385432,"byte_end":385492,"line_start":1144,"line_end":1144,"column_start":2,"column_end":62}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385494,"byte_end":385517,"line_start":1145,"line_end":1145,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385519,"byte_end":385542,"line_start":1146,"line_end":1146,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385544,"byte_end":385549,"line_start":1147,"line_end":1147,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385551,"byte_end":385558,"line_start":1148,"line_end":1148,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385560,"byte_end":385577,"line_start":1149,"line_end":1149,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385579,"byte_end":385609,"line_start":1150,"line_end":1150,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2260},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386305,"byte_end":386315,"line_start":1178,"line_end":1178,"column_start":9,"column_end":19},"name":"iter_zeros","qualname":"<BitSlice<O, T>>::iter_zeros","value":"pub fn iter_zeros(&Self) -> IterZeros<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Enumerates all bits in a `BitSlice` that are cleared to `0`.","sig":null,"attributes":[{"value":"/ Enumerates all bits in a `BitSlice` that are cleared to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385682,"byte_end":385746,"line_start":1155,"line_end":1155,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385748,"byte_end":385751,"line_start":1156,"line_end":1156,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385753,"byte_end":385767,"line_start":1157,"line_end":1157,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385769,"byte_end":385772,"line_start":1158,"line_end":1158,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385774,"byte_end":385785,"line_start":1159,"line_end":1159,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385787,"byte_end":385814,"line_start":1160,"line_end":1160,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385816,"byte_end":385819,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![1, 0, 1, 1, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385821,"byte_end":385869,"line_start":1162,"line_end":1162,"column_start":2,"column_end":50}},{"value":"/ let mut indices = [1, 4, 8].iter().copied();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385871,"byte_end":385919,"line_start":1163,"line_end":1163,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385921,"byte_end":385924,"line_start":1164,"line_end":1164,"column_start":2,"column_end":5}},{"value":"/ let mut iter_zeros = bits.iter_zeros();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385926,"byte_end":385969,"line_start":1165,"line_end":1165,"column_start":2,"column_end":45}},{"value":"/ let mut compose = bits.iter()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":385971,"byte_end":386004,"line_start":1166,"line_end":1166,"column_start":2,"column_end":35}},{"value":"/   .copied()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386006,"byte_end":386021,"line_start":1167,"line_end":1167,"column_start":2,"column_end":17}},{"value":"/   .enumerate()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386023,"byte_end":386041,"line_start":1168,"line_end":1168,"column_start":2,"column_end":20}},{"value":"/   .filter_map(|(idx, bit)| if !bit { Some(idx) } else { None });","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386043,"byte_end":386111,"line_start":1169,"line_end":1169,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386113,"byte_end":386116,"line_start":1170,"line_end":1170,"column_start":2,"column_end":5}},{"value":"/ for ((a, b), c) in iter_zeros.zip(compose).zip(indices) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386118,"byte_end":386179,"line_start":1171,"line_end":1171,"column_start":2,"column_end":63}},{"value":"/   assert_eq!(a, b);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386181,"byte_end":386204,"line_start":1172,"line_end":1172,"column_start":2,"column_end":25}},{"value":"/   assert_eq!(b, c);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386206,"byte_end":386229,"line_start":1173,"line_end":1173,"column_start":2,"column_end":25}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386231,"byte_end":386236,"line_start":1174,"line_end":1174,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386238,"byte_end":386245,"line_start":1175,"line_end":1175,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386247,"byte_end":386264,"line_start":1176,"line_end":1176,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386266,"byte_end":386296,"line_start":1177,"line_end":1177,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2261},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386640,"byte_end":386649,"line_start":1193,"line_end":1193,"column_start":9,"column_end":18},"name":"first_one","qualname":"<BitSlice<O, T>>::first_one","value":"pub fn first_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386372,"byte_end":386436,"line_start":1182,"line_end":1182,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386438,"byte_end":386441,"line_start":1183,"line_end":1183,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386443,"byte_end":386457,"line_start":1184,"line_end":1184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386459,"byte_end":386462,"line_start":1185,"line_end":1185,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386464,"byte_end":386475,"line_start":1186,"line_end":1186,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386477,"byte_end":386504,"line_start":1187,"line_end":1187,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386506,"byte_end":386509,"line_start":1188,"line_end":1188,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_one().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386511,"byte_end":386554,"line_start":1189,"line_end":1189,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 0, 1].first_one().unwrap(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386556,"byte_end":386611,"line_start":1190,"line_end":1190,"column_start":2,"column_end":57}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386613,"byte_end":386620,"line_start":1191,"line_end":1191,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386622,"byte_end":386631,"line_start":1192,"line_end":1192,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2262},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386977,"byte_end":386987,"line_start":1208,"line_end":1208,"column_start":9,"column_end":19},"name":"first_zero","qualname":"<BitSlice<O, T>>::first_zero","value":"pub fn first_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the first bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the first bit in the bit-slice set to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386707,"byte_end":386771,"line_start":1197,"line_end":1197,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386773,"byte_end":386776,"line_start":1198,"line_end":1198,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386778,"byte_end":386792,"line_start":1199,"line_end":1199,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386794,"byte_end":386797,"line_start":1200,"line_end":1200,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386799,"byte_end":386810,"line_start":1201,"line_end":1201,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386812,"byte_end":386839,"line_start":1202,"line_end":1202,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386841,"byte_end":386844,"line_start":1203,"line_end":1203,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].first_zero().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386846,"byte_end":386890,"line_start":1204,"line_end":1204,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 1, 0].first_zero().unwrap(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386892,"byte_end":386948,"line_start":1205,"line_end":1205,"column_start":2,"column_end":58}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386950,"byte_end":386957,"line_start":1206,"line_end":1206,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":386959,"byte_end":386968,"line_start":1207,"line_end":1207,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2263},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387314,"byte_end":387322,"line_start":1223,"line_end":1223,"column_start":9,"column_end":17},"name":"last_one","qualname":"<BitSlice<O, T>>::last_one","value":"pub fn last_one(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `1`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387046,"byte_end":387109,"line_start":1212,"line_end":1212,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387111,"byte_end":387114,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387116,"byte_end":387130,"line_start":1214,"line_end":1214,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387132,"byte_end":387135,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387137,"byte_end":387148,"line_start":1216,"line_end":1216,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387150,"byte_end":387177,"line_start":1217,"line_end":1217,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387179,"byte_end":387182,"line_start":1218,"line_end":1218,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_one().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387184,"byte_end":387226,"line_start":1219,"line_end":1219,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![1, 0, 0, 1].last_one().unwrap(), 3);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387228,"byte_end":387285,"line_start":1220,"line_end":1220,"column_start":2,"column_end":59}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387287,"byte_end":387294,"line_start":1221,"line_end":1221,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387296,"byte_end":387305,"line_start":1222,"line_end":1222,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2264},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387655,"byte_end":387664,"line_start":1238,"line_end":1238,"column_start":9,"column_end":18},"name":"last_zero","qualname":"<BitSlice<O, T>>::last_zero","value":"pub fn last_zero(&Self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Gets the index of the last bit in the bit-slice set to `0`.","sig":null,"attributes":[{"value":"/ Gets the index of the last bit in the bit-slice set to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387385,"byte_end":387448,"line_start":1227,"line_end":1227,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387450,"byte_end":387453,"line_start":1228,"line_end":1228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387455,"byte_end":387469,"line_start":1229,"line_end":1229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387471,"byte_end":387474,"line_start":1230,"line_end":1230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387476,"byte_end":387487,"line_start":1231,"line_end":1231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387489,"byte_end":387516,"line_start":1232,"line_end":1232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387518,"byte_end":387521,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ assert!(bits![].last_zero().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387523,"byte_end":387566,"line_start":1234,"line_end":1234,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0, 1, 1, 0].last_zero().unwrap(), 3);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387568,"byte_end":387626,"line_start":1235,"line_end":1235,"column_start":2,"column_end":60}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387628,"byte_end":387635,"line_start":1236,"line_end":1236,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387637,"byte_end":387646,"line_start":1237,"line_end":1237,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2265},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388176,"byte_end":388188,"line_start":1258,"line_end":1258,"column_start":9,"column_end":21},"name":"leading_ones","qualname":"<BitSlice<O, T>>::leading_ones","value":"pub fn leading_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387728,"byte_end":387802,"line_start":1242,"line_end":1242,"column_start":2,"column_end":76}},{"value":"/ bit set to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387804,"byte_end":387823,"line_start":1243,"line_end":1243,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387825,"byte_end":387828,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387830,"byte_end":387877,"line_start":1245,"line_end":1245,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387879,"byte_end":387882,"line_start":1246,"line_end":1246,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387884,"byte_end":387898,"line_start":1247,"line_end":1247,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387900,"byte_end":387903,"line_start":1248,"line_end":1248,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387905,"byte_end":387916,"line_start":1249,"line_end":1249,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387918,"byte_end":387945,"line_start":1250,"line_end":1250,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387947,"byte_end":387950,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_ones(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387952,"byte_end":387994,"line_start":1252,"line_end":1252,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(bits![0].leading_ones(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":387996,"byte_end":388039,"line_start":1253,"line_end":1253,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].leading_ones(), 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388041,"byte_end":388093,"line_start":1254,"line_end":1254,"column_start":2,"column_end":54}},{"value":"/ assert_eq!(bits![1, 1, 1, 1].leading_ones(), 4);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388095,"byte_end":388147,"line_start":1255,"line_end":1255,"column_start":2,"column_end":54}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388149,"byte_end":388156,"line_start":1256,"line_end":1256,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388158,"byte_end":388167,"line_start":1257,"line_end":1257,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2266},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388706,"byte_end":388719,"line_start":1278,"line_end":1278,"column_start":9,"column_end":22},"name":"leading_zeros","qualname":"<BitSlice<O, T>>::leading_zeros","value":"pub fn leading_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the start of the bit-slice to the first\n bit set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the start of the bit-slice to the first","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388254,"byte_end":388328,"line_start":1262,"line_end":1262,"column_start":2,"column_end":76}},{"value":"/ bit set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388330,"byte_end":388349,"line_start":1263,"line_end":1263,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388351,"byte_end":388354,"line_start":1264,"line_end":1264,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388356,"byte_end":388403,"line_start":1265,"line_end":1265,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388405,"byte_end":388408,"line_start":1266,"line_end":1266,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388410,"byte_end":388424,"line_start":1267,"line_end":1267,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388426,"byte_end":388429,"line_start":1268,"line_end":1268,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388431,"byte_end":388442,"line_start":1269,"line_end":1269,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388444,"byte_end":388471,"line_start":1270,"line_end":1270,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388473,"byte_end":388476,"line_start":1271,"line_end":1271,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].leading_zeros(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388478,"byte_end":388521,"line_start":1272,"line_end":1272,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![1].leading_zeros(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388523,"byte_end":388567,"line_start":1273,"line_end":1273,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].leading_zeros(), 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388569,"byte_end":388622,"line_start":1274,"line_end":1274,"column_start":2,"column_end":55}},{"value":"/ assert_eq!(bits![0, 0, 0, 0].leading_zeros(), 4);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388624,"byte_end":388677,"line_start":1275,"line_end":1275,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388679,"byte_end":388686,"line_start":1276,"line_end":1276,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388688,"byte_end":388697,"line_start":1277,"line_end":1277,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2267},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389178,"byte_end":389191,"line_start":1297,"line_end":1297,"column_start":9,"column_end":22},"name":"trailing_ones","qualname":"<BitSlice<O, T>>::trailing_ones","value":"pub fn trailing_ones(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `0`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388784,"byte_end":388859,"line_start":1282,"line_end":1282,"column_start":2,"column_end":77}},{"value":"/ set to `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388861,"byte_end":388876,"line_start":1283,"line_end":1283,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388878,"byte_end":388881,"line_start":1284,"line_end":1284,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388883,"byte_end":388930,"line_start":1285,"line_end":1285,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388932,"byte_end":388935,"line_start":1286,"line_end":1286,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388937,"byte_end":388951,"line_start":1287,"line_end":1287,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388953,"byte_end":388956,"line_start":1288,"line_end":1288,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388958,"byte_end":388969,"line_start":1289,"line_end":1289,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":388971,"byte_end":388998,"line_start":1290,"line_end":1290,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389000,"byte_end":389003,"line_start":1291,"line_end":1291,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_ones(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389005,"byte_end":389048,"line_start":1292,"line_end":1292,"column_start":2,"column_end":45}},{"value":"/ assert_eq!(bits![0].trailing_ones(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389050,"byte_end":389094,"line_start":1293,"line_end":1293,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1, 0, 1, 1].trailing_ones(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389096,"byte_end":389149,"line_start":1294,"line_end":1294,"column_start":2,"column_end":55}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389151,"byte_end":389158,"line_start":1295,"line_end":1295,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389160,"byte_end":389169,"line_start":1296,"line_end":1296,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2269},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389695,"byte_end":389709,"line_start":1317,"line_end":1317,"column_start":9,"column_end":23},"name":"trailing_zeros","qualname":"<BitSlice<O, T>>::trailing_zeros","value":"pub fn trailing_zeros(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Counts the number of bits from the end of the bit-slice to the last bit\n set to `1`.","sig":null,"attributes":[{"value":"/ Counts the number of bits from the end of the bit-slice to the last bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389298,"byte_end":389373,"line_start":1302,"line_end":1302,"column_start":2,"column_end":77}},{"value":"/ set to `1`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389375,"byte_end":389390,"line_start":1303,"line_end":1303,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389392,"byte_end":389395,"line_start":1304,"line_end":1304,"column_start":2,"column_end":5}},{"value":"/ This returns `0` if the bit-slice is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389397,"byte_end":389444,"line_start":1305,"line_end":1305,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389446,"byte_end":389449,"line_start":1306,"line_end":1306,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389451,"byte_end":389465,"line_start":1307,"line_end":1307,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389467,"byte_end":389470,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389472,"byte_end":389483,"line_start":1309,"line_end":1309,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389485,"byte_end":389512,"line_start":1310,"line_end":1310,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389514,"byte_end":389517,"line_start":1311,"line_end":1311,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits![].trailing_zeros(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389519,"byte_end":389563,"line_start":1312,"line_end":1312,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(bits![1].trailing_zeros(), 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389565,"byte_end":389610,"line_start":1313,"line_end":1313,"column_start":2,"column_end":47}},{"value":"/ assert_eq!(bits![0, 1, 0, 0].trailing_zeros(), 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389612,"byte_end":389666,"line_start":1314,"line_end":1314,"column_start":2,"column_end":56}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389668,"byte_end":389675,"line_start":1315,"line_end":1315,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389677,"byte_end":389686,"line_start":1316,"line_end":1316,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2271},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392019,"byte_end":392038,"line_start":1394,"line_end":1394,"column_start":9,"column_end":28},"name":"clone_from_bitslice","qualname":"<BitSlice<O, T>>::clone_from_bitslice","value":"pub fn clone_from_bitslice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Copies the bits from `src` into `self`.","sig":null,"attributes":[{"value":"/ Copies the bits from `src` into `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389815,"byte_end":389858,"line_start":1322,"line_end":1322,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389860,"byte_end":389863,"line_start":1323,"line_end":1323,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be the same as `self.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389865,"byte_end":389915,"line_start":1324,"line_end":1324,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389917,"byte_end":389920,"line_start":1325,"line_end":1325,"column_start":2,"column_end":5}},{"value":"/ If `src` has the same type arguments as `self`, it can be more","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389922,"byte_end":389988,"line_start":1326,"line_end":1326,"column_start":2,"column_end":68}},{"value":"/ performant to use [`.copy_from_bitslice()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":389990,"byte_end":390038,"line_start":1327,"line_end":1327,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390040,"byte_end":390043,"line_start":1328,"line_end":1328,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390045,"byte_end":390059,"line_start":1329,"line_end":1329,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390061,"byte_end":390064,"line_start":1330,"line_end":1330,"column_start":2,"column_end":5}},{"value":"/ [`slice::clone_from_bitslice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.clone_from_bitslice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390066,"byte_end":390186,"line_start":1331,"line_end":1331,"column_start":2,"column_end":122}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390188,"byte_end":390191,"line_start":1332,"line_end":1332,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390193,"byte_end":390214,"line_start":1333,"line_end":1333,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390216,"byte_end":390219,"line_start":1334,"line_end":1334,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390221,"byte_end":390295,"line_start":1335,"line_end":1335,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390297,"byte_end":390307,"line_start":1336,"line_end":1336,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390309,"byte_end":390312,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390314,"byte_end":390326,"line_start":1338,"line_end":1338,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390328,"byte_end":390331,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390333,"byte_end":390403,"line_start":1340,"line_end":1340,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390405,"byte_end":390408,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390410,"byte_end":390424,"line_start":1342,"line_end":1342,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390426,"byte_end":390429,"line_start":1343,"line_end":1343,"column_start":2,"column_end":5}},{"value":"/ Cloning two bits from a slice into another:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390431,"byte_end":390478,"line_start":1344,"line_end":1344,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390480,"byte_end":390483,"line_start":1345,"line_end":1345,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390485,"byte_end":390496,"line_start":1346,"line_end":1346,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390498,"byte_end":390525,"line_start":1347,"line_end":1347,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390527,"byte_end":390530,"line_start":1348,"line_end":1348,"column_start":2,"column_end":5}},{"value":"/ let src = bits![Msb0, u16; 1; 4];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390532,"byte_end":390569,"line_start":1349,"line_end":1349,"column_start":2,"column_end":39}},{"value":"/ let dst = bits![mut Lsb0, u8; 0; 2];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390571,"byte_end":390611,"line_start":1350,"line_end":1350,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390613,"byte_end":390616,"line_start":1351,"line_end":1351,"column_start":2,"column_end":5}},{"value":"/ dst.clone_from_bitslice(&src[2 ..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390618,"byte_end":390658,"line_start":1352,"line_end":1352,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(dst, bits![1; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390660,"byte_end":390693,"line_start":1353,"line_end":1353,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390695,"byte_end":390702,"line_start":1354,"line_end":1354,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390704,"byte_end":390707,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390709,"byte_end":390779,"line_start":1356,"line_end":1356,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390781,"byte_end":390851,"line_start":1357,"line_end":1357,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use clone_from_slice on a single","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390853,"byte_end":390927,"line_start":1358,"line_end":1358,"column_start":2,"column_end":76}},{"value":"/ slice will result in a compile failure:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390929,"byte_end":390972,"line_start":1359,"line_end":1359,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390974,"byte_end":390977,"line_start":1360,"line_end":1360,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":390979,"byte_end":391003,"line_start":1361,"line_end":1361,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391005,"byte_end":391032,"line_start":1362,"line_end":1362,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391034,"byte_end":391037,"line_start":1363,"line_end":1363,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391039,"byte_end":391080,"line_start":1364,"line_end":1364,"column_start":2,"column_end":43}},{"value":"/ slice[.. 2].clone_from_bitslice(&slice[3 ..]); // compile fail!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391082,"byte_end":391149,"line_start":1365,"line_end":1365,"column_start":2,"column_end":69}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391151,"byte_end":391158,"line_start":1366,"line_end":1366,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391160,"byte_end":391163,"line_start":1367,"line_end":1367,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391165,"byte_end":391234,"line_start":1368,"line_end":1368,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391236,"byte_end":391273,"line_start":1369,"line_end":1369,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391275,"byte_end":391278,"line_start":1370,"line_end":1370,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391280,"byte_end":391291,"line_start":1371,"line_end":1371,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391293,"byte_end":391320,"line_start":1372,"line_end":1372,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391322,"byte_end":391325,"line_start":1373,"line_end":1373,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391327,"byte_end":391368,"line_start":1374,"line_end":1374,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391370,"byte_end":391373,"line_start":1375,"line_end":1375,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391375,"byte_end":391380,"line_start":1376,"line_end":1376,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391382,"byte_end":391430,"line_start":1377,"line_end":1377,"column_start":2,"column_end":50}},{"value":"/   left.clone_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391432,"byte_end":391477,"line_start":1378,"line_end":1378,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391479,"byte_end":391484,"line_start":1379,"line_end":1379,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391486,"byte_end":391489,"line_start":1380,"line_end":1380,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391491,"byte_end":391535,"line_start":1381,"line_end":1381,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391537,"byte_end":391544,"line_start":1382,"line_end":1382,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391546,"byte_end":391549,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ # Performance","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391551,"byte_end":391568,"line_start":1384,"line_end":1384,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391570,"byte_end":391573,"line_start":1385,"line_end":1385,"column_start":2,"column_end":5}},{"value":"/ If `self` and `src` use the same type arguments, this specializes to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391575,"byte_end":391647,"line_start":1386,"line_end":1386,"column_start":2,"column_end":74}},{"value":"/ [`.copy_from_bitslice()`]; if you know statically that this is the case,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391649,"byte_end":391725,"line_start":1387,"line_end":1387,"column_start":2,"column_end":78}},{"value":"/ prefer to call that method directly and avoid the cost of detection at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391727,"byte_end":391801,"line_start":1388,"line_end":1388,"column_start":2,"column_end":76}},{"value":"/ runtime. Otherwise, this is a bit-by-bit crawl across both slices, which","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391803,"byte_end":391879,"line_start":1389,"line_end":1389,"column_start":2,"column_end":78}},{"value":"/ is a slow process.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391881,"byte_end":391903,"line_start":1390,"line_end":1390,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391905,"byte_end":391908,"line_start":1391,"line_end":1391,"column_start":2,"column_end":5}},{"value":"/ [`.copy_from_bitslice()`]: Self::copy_from_bitslice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391910,"byte_end":391965,"line_start":1392,"line_end":1392,"column_start":2,"column_end":57}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":391967,"byte_end":392010,"line_start":1393,"line_end":1393,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2274},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394466,"byte_end":394484,"line_start":1488,"line_end":1488,"column_start":9,"column_end":27},"name":"copy_from_bitslice","qualname":"<BitSlice<O, T>>::copy_from_bitslice","value":"pub fn copy_from_bitslice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Copies all bits from `src` into `self`, using a memcpy wherever\n possible.","sig":null,"attributes":[{"value":"/ Copies all bits from `src` into `self`, using a memcpy wherever","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392506,"byte_end":392573,"line_start":1420,"line_end":1420,"column_start":2,"column_end":69}},{"value":"/ possible.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392575,"byte_end":392588,"line_start":1421,"line_end":1421,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392590,"byte_end":392593,"line_start":1422,"line_end":1422,"column_start":2,"column_end":5}},{"value":"/ The length of `src` must be same as `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392595,"byte_end":392642,"line_start":1423,"line_end":1423,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392644,"byte_end":392647,"line_start":1424,"line_end":1424,"column_start":2,"column_end":5}},{"value":"/ If `src` does not use the same type arguments as `self`, use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392649,"byte_end":392713,"line_start":1425,"line_end":1425,"column_start":2,"column_end":66}},{"value":"/ [`.clone_from_bitslice()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392715,"byte_end":392746,"line_start":1426,"line_end":1426,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392748,"byte_end":392751,"line_start":1427,"line_end":1427,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392753,"byte_end":392767,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392769,"byte_end":392772,"line_start":1429,"line_end":1429,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_from_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_from_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392774,"byte_end":392886,"line_start":1430,"line_end":1430,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392888,"byte_end":392891,"line_start":1431,"line_end":1431,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392893,"byte_end":392914,"line_start":1432,"line_end":1432,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392916,"byte_end":392919,"line_start":1433,"line_end":1433,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392921,"byte_end":392995,"line_start":1434,"line_end":1434,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":392997,"byte_end":393007,"line_start":1435,"line_end":1435,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393009,"byte_end":393012,"line_start":1436,"line_end":1436,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393014,"byte_end":393026,"line_start":1437,"line_end":1437,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393028,"byte_end":393031,"line_start":1438,"line_end":1438,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393033,"byte_end":393103,"line_start":1439,"line_end":1439,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393105,"byte_end":393108,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393110,"byte_end":393124,"line_start":1441,"line_end":1441,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393126,"byte_end":393129,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ Copying two bits from a slice into another:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393131,"byte_end":393178,"line_start":1443,"line_end":1443,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393180,"byte_end":393183,"line_start":1444,"line_end":1444,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393185,"byte_end":393196,"line_start":1445,"line_end":1445,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393198,"byte_end":393225,"line_start":1446,"line_end":1446,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393227,"byte_end":393230,"line_start":1447,"line_end":1447,"column_start":2,"column_end":5}},{"value":"/ let src = bits![1; 4];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393232,"byte_end":393258,"line_start":1448,"line_end":1448,"column_start":2,"column_end":28}},{"value":"/ let dst = bits![mut 0; 2];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393260,"byte_end":393290,"line_start":1449,"line_end":1449,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393292,"byte_end":393295,"line_start":1450,"line_end":1450,"column_start":2,"column_end":5}},{"value":"/ // Because the slices have to be the same length,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393297,"byte_end":393350,"line_start":1451,"line_end":1451,"column_start":2,"column_end":55}},{"value":"/ // we slice the source slice from four bits to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393352,"byte_end":393402,"line_start":1452,"line_end":1452,"column_start":2,"column_end":52}},{"value":"/ // two. It will panic if we don't do this.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393404,"byte_end":393450,"line_start":1453,"line_end":1453,"column_start":2,"column_end":48}},{"value":"/ dst.clone_from_bitslice(&src[2..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393452,"byte_end":393491,"line_start":1454,"line_end":1454,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393493,"byte_end":393500,"line_start":1455,"line_end":1455,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393502,"byte_end":393505,"line_start":1456,"line_end":1456,"column_start":2,"column_end":5}},{"value":"/ Rust enforces that there can only be one mutable reference with no","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393507,"byte_end":393577,"line_start":1457,"line_end":1457,"column_start":2,"column_end":72}},{"value":"/ immutable references to a particular piece of data in a particular","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393579,"byte_end":393649,"line_start":1458,"line_end":1458,"column_start":2,"column_end":72}},{"value":"/ scope. Because of this, attempting to use [.copy_from_slice()] on a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393651,"byte_end":393722,"line_start":1459,"line_end":1459,"column_start":2,"column_end":73}},{"value":"/ single slice will result in a compile failure:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393724,"byte_end":393774,"line_start":1460,"line_end":1460,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393776,"byte_end":393779,"line_start":1461,"line_end":1461,"column_start":2,"column_end":5}},{"value":"/ ```rust,compile_fail","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393781,"byte_end":393805,"line_start":1462,"line_end":1462,"column_start":2,"column_end":26}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393807,"byte_end":393834,"line_start":1463,"line_end":1463,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393836,"byte_end":393839,"line_start":1464,"line_end":1464,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393841,"byte_end":393882,"line_start":1465,"line_end":1465,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393884,"byte_end":393887,"line_start":1466,"line_end":1466,"column_start":2,"column_end":5}},{"value":"/ slice[.. 2].copy_from_bitslice(&bits[3 ..]); // compile fail!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393889,"byte_end":393954,"line_start":1467,"line_end":1467,"column_start":2,"column_end":67}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393956,"byte_end":393963,"line_start":1468,"line_end":1468,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393965,"byte_end":393968,"line_start":1469,"line_end":1469,"column_start":2,"column_end":5}},{"value":"/ To work around this, we can use [`.split_at_mut()`] to create two","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":393970,"byte_end":394039,"line_start":1470,"line_end":1470,"column_start":2,"column_end":71}},{"value":"/ distinct sub-slices from a slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394041,"byte_end":394078,"line_start":1471,"line_end":1471,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394080,"byte_end":394083,"line_start":1472,"line_end":1472,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394085,"byte_end":394096,"line_start":1473,"line_end":1473,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394098,"byte_end":394125,"line_start":1474,"line_end":1474,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394127,"byte_end":394130,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![mut 0, 0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394132,"byte_end":394173,"line_start":1476,"line_end":1476,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394175,"byte_end":394178,"line_start":1477,"line_end":1477,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394180,"byte_end":394185,"line_start":1478,"line_end":1478,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = slice.split_at_mut(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394187,"byte_end":394235,"line_start":1479,"line_end":1479,"column_start":2,"column_end":50}},{"value":"/   left.copy_from_bitslice(&right[1 ..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394237,"byte_end":394281,"line_start":1480,"line_end":1480,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394283,"byte_end":394288,"line_start":1481,"line_end":1481,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394290,"byte_end":394293,"line_start":1482,"line_end":1482,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(slice, bits![1, 1, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394295,"byte_end":394339,"line_start":1483,"line_end":1483,"column_start":2,"column_end":46}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394341,"byte_end":394348,"line_start":1484,"line_end":1484,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394350,"byte_end":394353,"line_start":1485,"line_end":1485,"column_start":2,"column_end":5}},{"value":"/ [`.clone_from_bitslice()`]: Self::clone_from_bitslice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394355,"byte_end":394412,"line_start":1486,"line_end":1486,"column_start":2,"column_end":59}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":394414,"byte_end":394457,"line_start":1487,"line_end":1487,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2275},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398797,"byte_end":398815,"line_start":1629,"line_end":1629,"column_start":9,"column_end":27},"name":"swap_with_bitslice","qualname":"<BitSlice<O, T>>::swap_with_bitslice","value":"pub fn swap_with_bitslice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Swaps all bits in `self` with those in `other`.","sig":null,"attributes":[{"value":"/ Swaps all bits in `self` with those in `other`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397904,"byte_end":397955,"line_start":1595,"line_end":1595,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397957,"byte_end":397960,"line_start":1596,"line_end":1596,"column_start":2,"column_end":5}},{"value":"/ The length of `other` must be the same as `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":397962,"byte_end":398015,"line_start":1597,"line_end":1597,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398017,"byte_end":398020,"line_start":1598,"line_end":1598,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398022,"byte_end":398036,"line_start":1599,"line_end":1599,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398038,"byte_end":398041,"line_start":1600,"line_end":1600,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap_with_slice`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap_with_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398043,"byte_end":398155,"line_start":1601,"line_end":1601,"column_start":2,"column_end":114}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398157,"byte_end":398160,"line_start":1602,"line_end":1602,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398162,"byte_end":398183,"line_start":1603,"line_end":1603,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398185,"byte_end":398188,"line_start":1604,"line_end":1604,"column_start":2,"column_end":5}},{"value":"/ This method is renamed, as it takes a bit slice rather than an element","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398190,"byte_end":398264,"line_start":1605,"line_end":1605,"column_start":2,"column_end":76}},{"value":"/ slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398266,"byte_end":398276,"line_start":1606,"line_end":1606,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398278,"byte_end":398281,"line_start":1607,"line_end":1607,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398283,"byte_end":398295,"line_start":1608,"line_end":1608,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398297,"byte_end":398300,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ This function will panic if the two slices have different lengths.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398302,"byte_end":398372,"line_start":1610,"line_end":1610,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398374,"byte_end":398377,"line_start":1611,"line_end":1611,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398379,"byte_end":398393,"line_start":1612,"line_end":1612,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398395,"byte_end":398398,"line_start":1613,"line_end":1613,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398400,"byte_end":398411,"line_start":1614,"line_end":1614,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398413,"byte_end":398440,"line_start":1615,"line_end":1615,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398442,"byte_end":398445,"line_start":1616,"line_end":1616,"column_start":2,"column_end":5}},{"value":"/ let mut one = [0xA5u8, 0x69];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398447,"byte_end":398480,"line_start":1617,"line_end":1617,"column_start":2,"column_end":35}},{"value":"/ let mut two = 0x1234u16;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398482,"byte_end":398510,"line_start":1618,"line_end":1618,"column_start":2,"column_end":30}},{"value":"/ let one_bits = one.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398512,"byte_end":398559,"line_start":1619,"line_end":1619,"column_start":2,"column_end":49}},{"value":"/ let two_bits = two.view_bits_mut::<Lsb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398561,"byte_end":398608,"line_start":1620,"line_end":1620,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398610,"byte_end":398613,"line_start":1621,"line_end":1621,"column_start":2,"column_end":5}},{"value":"/ one_bits.swap_with_bitslice(two_bits);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398615,"byte_end":398657,"line_start":1622,"line_end":1622,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398659,"byte_end":398662,"line_start":1623,"line_end":1623,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(one, [0x2C, 0x48]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398664,"byte_end":398698,"line_start":1624,"line_end":1624,"column_start":2,"column_end":36}},{"value":"/ # #[cfg(target_endian = \"little\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398700,"byte_end":398740,"line_start":1625,"line_end":1625,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(two, 0x96A5);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398742,"byte_end":398770,"line_start":1626,"line_end":1626,"column_start":2,"column_end":30}},{"value":"/ # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398772,"byte_end":398779,"line_start":1627,"line_end":1627,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":398781,"byte_end":398788,"line_start":1628,"line_end":1628,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2278},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399854,"byte_end":399864,"line_start":1672,"line_end":1672,"column_start":9,"column_end":19},"name":"shift_left","qualname":"<BitSlice<O, T>>::shift_left","value":"pub fn shift_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice left (towards index `0`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice left (towards index `0`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399160,"byte_end":399224,"line_start":1647,"line_end":1647,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399226,"byte_end":399229,"line_start":1648,"line_end":1648,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `by ..` down to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399231,"byte_end":399292,"line_start":1649,"line_end":1649,"column_start":2,"column_end":63}},{"value":"/ `0 .. len - by`, and erases `len - by ..` to `0`. As this is a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399294,"byte_end":399360,"line_start":1650,"line_end":1650,"column_start":2,"column_end":68}},{"value":"/ destructive (and linearly expensive) operation, you may prefer instead","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399362,"byte_end":399436,"line_start":1651,"line_end":1651,"column_start":2,"column_end":76}},{"value":"/ to use range subslicing.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399438,"byte_end":399466,"line_start":1652,"line_end":1652,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399468,"byte_end":399471,"line_start":1653,"line_end":1653,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399473,"byte_end":399489,"line_start":1654,"line_end":1654,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399491,"byte_end":399494,"line_start":1655,"line_end":1655,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399496,"byte_end":399513,"line_start":1656,"line_end":1656,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399515,"byte_end":399577,"line_start":1657,"line_end":1657,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399579,"byte_end":399582,"line_start":1658,"line_end":1658,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399584,"byte_end":399596,"line_start":1659,"line_end":1659,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399598,"byte_end":399601,"line_start":1660,"line_end":1660,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399603,"byte_end":399657,"line_start":1661,"line_end":1661,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399659,"byte_end":399662,"line_start":1662,"line_end":1662,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399664,"byte_end":399678,"line_start":1663,"line_end":1663,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399680,"byte_end":399683,"line_start":1664,"line_end":1664,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399685,"byte_end":399696,"line_start":1665,"line_end":1665,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399698,"byte_end":399725,"line_start":1666,"line_end":1666,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399727,"byte_end":399730,"line_start":1667,"line_end":1667,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399732,"byte_end":399763,"line_start":1668,"line_end":1668,"column_start":2,"column_end":33}},{"value":"/ bits.shift_left(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399765,"byte_end":399788,"line_start":1669,"line_end":1669,"column_start":2,"column_end":25}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399790,"byte_end":399836,"line_start":1670,"line_end":1670,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":399838,"byte_end":399845,"line_start":1671,"line_end":1671,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2279},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400881,"byte_end":400892,"line_start":1715,"line_end":1715,"column_start":9,"column_end":20},"name":"shift_right","qualname":"<BitSlice<O, T>>::shift_right","value":"pub fn shift_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shifts the contents of a bit-slice right (towards index `self.len()`).","sig":null,"attributes":[{"value":"/ Shifts the contents of a bit-slice right (towards index `self.len()`).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400191,"byte_end":400265,"line_start":1691,"line_end":1691,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400267,"byte_end":400270,"line_start":1692,"line_end":1692,"column_start":2,"column_end":5}},{"value":"/ This moves the contents of the slice from `.. len - by` up to `by ..`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400272,"byte_end":400346,"line_start":1693,"line_end":1693,"column_start":2,"column_end":76}},{"value":"/ and erases `.. by` to `0`. As this is a destructive (and linearly","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400348,"byte_end":400417,"line_start":1694,"line_end":1694,"column_start":2,"column_end":71}},{"value":"/ expensive) operation, you may prefer instead to use range subslicing.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400419,"byte_end":400492,"line_start":1695,"line_end":1695,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400494,"byte_end":400497,"line_start":1696,"line_end":1696,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400499,"byte_end":400515,"line_start":1697,"line_end":1697,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400517,"byte_end":400520,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400522,"byte_end":400539,"line_start":1699,"line_end":1699,"column_start":2,"column_end":19}},{"value":"/ - `by`: The distance by which to shift the slice contents.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400541,"byte_end":400603,"line_start":1700,"line_end":1700,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400605,"byte_end":400608,"line_start":1701,"line_end":1701,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400610,"byte_end":400622,"line_start":1702,"line_end":1702,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400624,"byte_end":400627,"line_start":1703,"line_end":1703,"column_start":2,"column_end":5}},{"value":"/ This panics if `by` is not less than `self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400629,"byte_end":400683,"line_start":1704,"line_end":1704,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400685,"byte_end":400688,"line_start":1705,"line_end":1705,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400690,"byte_end":400704,"line_start":1706,"line_end":1706,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400706,"byte_end":400709,"line_start":1707,"line_end":1707,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400711,"byte_end":400722,"line_start":1708,"line_end":1708,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400724,"byte_end":400751,"line_start":1709,"line_end":1709,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400753,"byte_end":400756,"line_start":1710,"line_end":1710,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1; 6];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400758,"byte_end":400789,"line_start":1711,"line_end":1711,"column_start":2,"column_end":33}},{"value":"/ bits.shift_right(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400791,"byte_end":400815,"line_start":1712,"line_end":1712,"column_start":2,"column_end":26}},{"value":"/ assert_eq!(bits, bits![0, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400817,"byte_end":400863,"line_start":1713,"line_end":1713,"column_start":2,"column_end":48}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":400865,"byte_end":400872,"line_start":1714,"line_end":1714,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2280},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401790,"byte_end":401797,"line_start":1755,"line_end":1755,"column_start":9,"column_end":16},"name":"set_all","qualname":"<BitSlice<O, T>>::set_all","value":"pub fn set_all(&mut Self, bool)","parent":null,"children":[],"decl_id":null,"docs":" Sets all bits in the slice to a value.","sig":null,"attributes":[{"value":"/ Sets all bits in the slice to a value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401219,"byte_end":401261,"line_start":1734,"line_end":1734,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401263,"byte_end":401266,"line_start":1735,"line_end":1735,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401268,"byte_end":401284,"line_start":1736,"line_end":1736,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401286,"byte_end":401289,"line_start":1737,"line_end":1737,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401291,"byte_end":401308,"line_start":1738,"line_end":1738,"column_start":2,"column_end":19}},{"value":"/ - `value`: The bit value to which all bits in the slice will be set.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401310,"byte_end":401382,"line_start":1739,"line_end":1739,"column_start":2,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401384,"byte_end":401387,"line_start":1740,"line_end":1740,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401389,"byte_end":401403,"line_start":1741,"line_end":1741,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401405,"byte_end":401408,"line_start":1742,"line_end":1742,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401410,"byte_end":401421,"line_start":1743,"line_end":1743,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401423,"byte_end":401450,"line_start":1744,"line_end":1744,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401452,"byte_end":401455,"line_start":1745,"line_end":1745,"column_start":2,"column_end":5}},{"value":"/ let mut src = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401457,"byte_end":401479,"line_start":1746,"line_end":1746,"column_start":2,"column_end":24}},{"value":"/ let bits = src.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401481,"byte_end":401524,"line_start":1747,"line_end":1747,"column_start":2,"column_end":45}},{"value":"/ bits[2 .. 6].set_all(true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401526,"byte_end":401557,"line_start":1748,"line_end":1748,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0011_1100]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401559,"byte_end":401607,"line_start":1749,"line_end":1749,"column_start":2,"column_end":50}},{"value":"/ bits[3 .. 5].set_all(false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401609,"byte_end":401641,"line_start":1750,"line_end":1750,"column_start":2,"column_end":34}},{"value":"/ assert_eq!(bits.as_slice(), &[0b0010_0100]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401643,"byte_end":401691,"line_start":1751,"line_end":1751,"column_start":2,"column_end":50}},{"value":"/ bits[.. 1].set_all(true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401693,"byte_end":401722,"line_start":1752,"line_end":1752,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(bits.as_slice(), &[0b1010_0100]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401724,"byte_end":401772,"line_start":1753,"line_end":1753,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":401774,"byte_end":401781,"line_start":1754,"line_end":1754,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2281},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403626,"byte_end":403634,"line_start":1814,"line_end":1814,"column_start":9,"column_end":17},"name":"for_each","qualname":"<BitSlice<O, T>>::for_each","value":"pub fn for_each<F>(&mut Self, F) where F: FnMut(usize, bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Applies a function to each bit in the slice.","sig":null,"attributes":[{"value":"/ Applies a function to each bit in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402478,"byte_end":402526,"line_start":1781,"line_end":1781,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402528,"byte_end":402531,"line_start":1782,"line_end":1782,"column_start":2,"column_end":5}},{"value":"/ `BitSlice` cannot implement [`IndexMut`], as it cannot manifest `&mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402533,"byte_end":402606,"line_start":1783,"line_end":1783,"column_start":2,"column_end":75}},{"value":"/ bool` references, and the [`BitRef`] proxy reference has an unavoidable","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402608,"byte_end":402683,"line_start":1784,"line_end":1784,"column_start":2,"column_end":77}},{"value":"/ overhead. This method bypasses both problems, by applying a function to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402685,"byte_end":402760,"line_start":1785,"line_end":1785,"column_start":2,"column_end":77}},{"value":"/ each pair of index and value in the slice, without constructing a proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402762,"byte_end":402837,"line_start":1786,"line_end":1786,"column_start":2,"column_end":77}},{"value":"/ reference. Benchmarks indicate that this method is about 2–4 times","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402839,"byte_end":402911,"line_start":1787,"line_end":1787,"column_start":2,"column_end":72}},{"value":"/ faster than the `.iter_mut().enumerate()` equivalent.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402913,"byte_end":402970,"line_start":1788,"line_end":1788,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402972,"byte_end":402975,"line_start":1789,"line_end":1789,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402977,"byte_end":402993,"line_start":1790,"line_end":1790,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":402995,"byte_end":402998,"line_start":1791,"line_end":1791,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403000,"byte_end":403017,"line_start":1792,"line_end":1792,"column_start":2,"column_end":19}},{"value":"/ - `func`: A function which receives two arguments, `index: usize` and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403019,"byte_end":403092,"line_start":1793,"line_end":1793,"column_start":2,"column_end":75}},{"value":"/   `value: bool`, and returns a `bool`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403094,"byte_end":403136,"line_start":1794,"line_end":1794,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403138,"byte_end":403141,"line_start":1795,"line_end":1795,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403143,"byte_end":403156,"line_start":1796,"line_end":1796,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403158,"byte_end":403161,"line_start":1797,"line_end":1797,"column_start":2,"column_end":5}},{"value":"/ For each index in the slice, the result of invoking `func` with the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403163,"byte_end":403234,"line_start":1798,"line_end":1798,"column_start":2,"column_end":73}},{"value":"/ index number and current bit value is written into the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403236,"byte_end":403301,"line_start":1799,"line_end":1799,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403303,"byte_end":403306,"line_start":1800,"line_end":1800,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403308,"byte_end":403322,"line_start":1801,"line_end":1801,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403324,"byte_end":403327,"line_start":1802,"line_end":1802,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403329,"byte_end":403340,"line_start":1803,"line_end":1803,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403342,"byte_end":403369,"line_start":1804,"line_end":1804,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403371,"byte_end":403374,"line_start":1805,"line_end":1805,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403376,"byte_end":403399,"line_start":1806,"line_end":1806,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403401,"byte_end":403445,"line_start":1807,"line_end":1807,"column_start":2,"column_end":46}},{"value":"/ bits.for_each(|idx, _bit| idx % 3 == 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403447,"byte_end":403491,"line_start":1808,"line_end":1808,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(data, 0b100_100_10);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403493,"byte_end":403528,"line_start":1809,"line_end":1809,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403530,"byte_end":403537,"line_start":1810,"line_end":1810,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403539,"byte_end":403542,"line_start":1811,"line_end":1811,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403544,"byte_end":403578,"line_start":1812,"line_end":1812,"column_start":2,"column_end":36}},{"value":"/ [`IndexMut`]: core::ops::IndexMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403580,"byte_end":403617,"line_start":1813,"line_end":1813,"column_start":2,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":2283},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405561,"byte_end":405572,"line_start":1872,"line_end":1872,"column_start":9,"column_end":20},"name":"offset_from","qualname":"<BitSlice<O, T>>::offset_from","value":"pub fn offset_from(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":" Produces the absolute offset in bits between two slice heads.","sig":null,"attributes":[{"value":"/ Produces the absolute offset in bits between two slice heads.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403862,"byte_end":403927,"line_start":1825,"line_end":1825,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403929,"byte_end":403932,"line_start":1826,"line_end":1826,"column_start":2,"column_end":5}},{"value":"/ While this method is sound for any two arbitrary bit slices, the answer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":403934,"byte_end":404009,"line_start":1827,"line_end":1827,"column_start":2,"column_end":77}},{"value":"/ it produces is meaningful *only* when one argument is a strict subslice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404011,"byte_end":404086,"line_start":1828,"line_end":1828,"column_start":2,"column_end":77}},{"value":"/ of the other. If the two slices are created from different buffers","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404088,"byte_end":404158,"line_start":1829,"line_end":1829,"column_start":2,"column_end":72}},{"value":"/ entirely, a comparison is undefined; if the two slices are disjoint","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404160,"byte_end":404231,"line_start":1830,"line_end":1830,"column_start":2,"column_end":73}},{"value":"/ regions of the same buffer, then the semantically correct distance is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404233,"byte_end":404306,"line_start":1831,"line_end":1831,"column_start":2,"column_end":75}},{"value":"/ between the tail of the lower and the head of the upper, which this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404308,"byte_end":404379,"line_start":1832,"line_end":1832,"column_start":2,"column_end":73}},{"value":"/ does not measure.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404381,"byte_end":404402,"line_start":1833,"line_end":1833,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404404,"byte_end":404407,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ # Visual Description","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404409,"byte_end":404433,"line_start":1835,"line_end":1835,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404435,"byte_end":404438,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ Consider the following sequence of bits:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404440,"byte_end":404484,"line_start":1837,"line_end":1837,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404486,"byte_end":404489,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ ```text","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404491,"byte_end":404502,"line_start":1839,"line_end":1839,"column_start":2,"column_end":13}},{"value":"/ [ 0 1 2 3 4 5 6 7 8 9 a b ]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404504,"byte_end":404535,"line_start":1840,"line_end":1840,"column_start":2,"column_end":33}},{"value":"/   |       ^^^^^^^       |","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404537,"byte_end":404566,"line_start":1841,"line_end":1841,"column_start":2,"column_end":31}},{"value":"/   ^^^^^^^^^^^^^^^^^^^^^^^","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404568,"byte_end":404597,"line_start":1842,"line_end":1842,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404599,"byte_end":404606,"line_start":1843,"line_end":1843,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404608,"byte_end":404611,"line_start":1844,"line_end":1844,"column_start":2,"column_end":5}},{"value":"/ It does not matter whether there are bits between the tail of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404613,"byte_end":404682,"line_start":1845,"line_end":1845,"column_start":2,"column_end":71}},{"value":"/ smaller and the larger slices. The offset is computed from the bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404684,"byte_end":404754,"line_start":1846,"line_end":1846,"column_start":2,"column_end":72}},{"value":"/ distance between the two heads.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404756,"byte_end":404791,"line_start":1847,"line_end":1847,"column_start":2,"column_end":37}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404793,"byte_end":404796,"line_start":1848,"line_end":1848,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404798,"byte_end":404812,"line_start":1849,"line_end":1849,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404814,"byte_end":404817,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ This function computes the *semantic* distance between the heads, rather","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404819,"byte_end":404895,"line_start":1851,"line_end":1851,"column_start":2,"column_end":78}},{"value":"/ than the *electrical. It does not take into account the `BitOrder`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404897,"byte_end":404967,"line_start":1852,"line_end":1852,"column_start":2,"column_end":72}},{"value":"/ implementation of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":404969,"byte_end":405001,"line_start":1853,"line_end":1853,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405003,"byte_end":405006,"line_start":1854,"line_end":1854,"column_start":2,"column_end":5}},{"value":"/ # Safety and Soundness","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405008,"byte_end":405034,"line_start":1855,"line_end":1855,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405036,"byte_end":405039,"line_start":1856,"line_end":1856,"column_start":2,"column_end":5}},{"value":"/ One of `self` or `other` must contain the other for this comparison to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405041,"byte_end":405115,"line_start":1857,"line_end":1857,"column_start":2,"column_end":76}},{"value":"/ be meaningful.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405117,"byte_end":405135,"line_start":1858,"line_end":1858,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405137,"byte_end":405140,"line_start":1859,"line_end":1859,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405142,"byte_end":405158,"line_start":1860,"line_end":1860,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405160,"byte_end":405163,"line_start":1861,"line_end":1861,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405165,"byte_end":405178,"line_start":1862,"line_end":1862,"column_start":2,"column_end":15}},{"value":"/ - `other`: Another bit slice. This must be either a strict subregion or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405180,"byte_end":405255,"line_start":1863,"line_end":1863,"column_start":2,"column_end":77}},{"value":"/   a strict superregion of `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405257,"byte_end":405294,"line_start":1864,"line_end":1864,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405296,"byte_end":405299,"line_start":1865,"line_end":1865,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405301,"byte_end":405314,"line_start":1866,"line_end":1866,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405316,"byte_end":405319,"line_start":1867,"line_end":1867,"column_start":2,"column_end":5}},{"value":"/ The distance in (semantic) bits betwen the heads of each region. The","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405321,"byte_end":405393,"line_start":1868,"line_end":1868,"column_start":2,"column_end":74}},{"value":"/ value is positive when `other` is higher in the address space than","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405395,"byte_end":405465,"line_start":1869,"line_end":1869,"column_start":2,"column_end":72}},{"value":"/ `self`, and negative when `other` is lower in the address space than","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405467,"byte_end":405539,"line_start":1870,"line_end":1870,"column_start":2,"column_end":74}},{"value":"/ `self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405541,"byte_end":405552,"line_start":1871,"line_end":1871,"column_start":2,"column_end":13}}]},{"kind":"Method","id":{"krate":0,"index":2284},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405739,"byte_end":405758,"line_start":1878,"line_end":1878,"column_start":9,"column_end":28},"name":"electrical_distance","qualname":"<BitSlice<O, T>>::electrical_distance","value":"pub fn electrical_distance(&Self, &Self) -> isize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"deprecated = \"Use `BitPtr::offset_from`\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":405687,"byte_end":405730,"line_start":1877,"line_end":1877,"column_start":2,"column_end":45}}]},{"kind":"Method","id":{"krate":0,"index":2288},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407875,"byte_end":407888,"line_start":1944,"line_end":1944,"column_start":16,"column_end":29},"name":"set_unchecked","qualname":"<BitSlice<O, T>>::set_unchecked","value":"pub unsafe fn set_unchecked(&mut Self, usize, bool)","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406195,"byte_end":406264,"line_start":1894,"line_end":1894,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406266,"byte_end":406269,"line_start":1895,"line_end":1895,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406271,"byte_end":406347,"line_start":1896,"line_end":1896,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]*. For a safe","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406349,"byte_end":406418,"line_start":1897,"line_end":1897,"column_start":2,"column_end":71}},{"value":"/ alternative, see [`.set()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406420,"byte_end":406452,"line_start":1898,"line_end":1898,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406454,"byte_end":406457,"line_start":1899,"line_end":1899,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406459,"byte_end":406475,"line_start":1900,"line_end":1900,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406477,"byte_end":406480,"line_start":1901,"line_end":1901,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406482,"byte_end":406499,"line_start":1902,"line_end":1902,"column_start":2,"column_end":19}},{"value":"/ - `index`: The bit index at which to write. It must be in the range `0","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406501,"byte_end":406575,"line_start":1903,"line_end":1903,"column_start":2,"column_end":76}},{"value":"/   .. self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406577,"byte_end":406598,"line_start":1904,"line_end":1904,"column_start":2,"column_end":23}},{"value":"/ - `value`: The value to be written; `true` for `1` or `false` for `0`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406600,"byte_end":406674,"line_start":1905,"line_end":1905,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406676,"byte_end":406679,"line_start":1906,"line_end":1906,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406681,"byte_end":406694,"line_start":1907,"line_end":1907,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406696,"byte_end":406699,"line_start":1908,"line_end":1908,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406701,"byte_end":406776,"line_start":1909,"line_end":1909,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406778,"byte_end":406846,"line_start":1910,"line_end":1910,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406848,"byte_end":406851,"line_start":1911,"line_end":1911,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406853,"byte_end":406865,"line_start":1912,"line_end":1912,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406867,"byte_end":406870,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406872,"byte_end":406947,"line_start":1914,"line_end":1914,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406949,"byte_end":407020,"line_start":1915,"line_end":1915,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407022,"byte_end":407092,"line_start":1916,"line_end":1916,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407094,"byte_end":407142,"line_start":1917,"line_end":1917,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407144,"byte_end":407147,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407149,"byte_end":407220,"line_start":1919,"line_end":1919,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407222,"byte_end":407295,"line_start":1920,"line_end":1920,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407297,"byte_end":407307,"line_start":1921,"line_end":1921,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407309,"byte_end":407312,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407314,"byte_end":407328,"line_start":1923,"line_end":1923,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407330,"byte_end":407333,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ This example uses a bit slice of length 2, and demonstrates","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407335,"byte_end":407398,"line_start":1925,"line_end":1925,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds access to the last bit in the element.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407400,"byte_end":407456,"line_start":1926,"line_end":1926,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407458,"byte_end":407461,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407463,"byte_end":407474,"line_start":1928,"line_end":1928,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407476,"byte_end":407503,"line_start":1929,"line_end":1929,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407505,"byte_end":407508,"line_start":1930,"line_end":1930,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0; 2];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407510,"byte_end":407541,"line_start":1931,"line_end":1931,"column_start":2,"column_end":33}},{"value":"/ let (first, _) = bits.split_at_mut(1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407543,"byte_end":407585,"line_start":1932,"line_end":1932,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407587,"byte_end":407590,"line_start":1933,"line_end":1933,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407592,"byte_end":407604,"line_start":1934,"line_end":1934,"column_start":2,"column_end":14}},{"value":"/   first.set_unchecked(1, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407606,"byte_end":407641,"line_start":1935,"line_end":1935,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407643,"byte_end":407648,"line_start":1936,"line_end":1936,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407650,"byte_end":407653,"line_start":1937,"line_end":1937,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407655,"byte_end":407689,"line_start":1938,"line_end":1938,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407691,"byte_end":407698,"line_start":1939,"line_end":1939,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407700,"byte_end":407703,"line_start":1940,"line_end":1940,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407705,"byte_end":407734,"line_start":1941,"line_end":1941,"column_start":2,"column_end":31}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407736,"byte_end":407832,"line_start":1942,"line_end":1942,"column_start":2,"column_end":98}},{"value":"/ [`.set()`]: Self::set","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407834,"byte_end":407859,"line_start":1943,"line_end":1943,"column_start":2,"column_end":27}}]},{"kind":"Method","id":{"krate":0,"index":2289},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409504,"byte_end":409525,"line_start":1992,"line_end":1992,"column_start":16,"column_end":37},"name":"set_aliased_unchecked","qualname":"<BitSlice<O, T>>::set_aliased_unchecked","value":"pub unsafe fn set_aliased_unchecked(&Self, usize, bool) where\nT: radium::Radium","parent":null,"children":[],"decl_id":null,"docs":" Writes a new bit at a given index, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Writes a new bit at a given index, without doing bounds checking.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":407982,"byte_end":408051,"line_start":1948,"line_end":1948,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408053,"byte_end":408056,"line_start":1949,"line_end":1949,"column_start":2,"column_end":5}},{"value":"/ This method supports writing through a shared reference to a bit that","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408058,"byte_end":408131,"line_start":1950,"line_end":1950,"column_start":2,"column_end":75}},{"value":"/ may be observed by other `BitSlice` handles. It is only present when the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408133,"byte_end":408209,"line_start":1951,"line_end":1951,"column_start":2,"column_end":78}},{"value":"/ `T` type parameter supports such shared mutation (measured by the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408211,"byte_end":408280,"line_start":1952,"line_end":1952,"column_start":2,"column_end":71}},{"value":"/ [`Radium`] trait).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408282,"byte_end":408304,"line_start":1953,"line_end":1953,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408306,"byte_end":408309,"line_start":1954,"line_end":1954,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408311,"byte_end":408324,"line_start":1955,"line_end":1955,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408326,"byte_end":408329,"line_start":1956,"line_end":1956,"column_start":2,"column_end":5}},{"value":"/ The bit at `index` is set to `value`. If `index` is out of bounds, then","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408331,"byte_end":408406,"line_start":1957,"line_end":1957,"column_start":2,"column_end":77}},{"value":"/ the memory access is incorrect, and its behavior is unspecified. If `T`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408408,"byte_end":408483,"line_start":1958,"line_end":1958,"column_start":2,"column_end":77}},{"value":"/ is an [atomic], this will lock the memory bus for the referent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408485,"byte_end":408551,"line_start":1959,"line_end":1959,"column_start":2,"column_end":68}},{"value":"/ address, and may cause stalls.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408553,"byte_end":408587,"line_start":1960,"line_end":1960,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408589,"byte_end":408592,"line_start":1961,"line_end":1961,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408594,"byte_end":408606,"line_start":1962,"line_end":1962,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408608,"byte_end":408611,"line_start":1963,"line_end":1963,"column_start":2,"column_end":5}},{"value":"/ This method is **not** safe. It performs raw pointer arithmetic to seek","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408613,"byte_end":408688,"line_start":1964,"line_end":1964,"column_start":2,"column_end":77}},{"value":"/ from the start of the slice to the requested index, and set the bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408690,"byte_end":408761,"line_start":1965,"line_end":1965,"column_start":2,"column_end":73}},{"value":"/ there. It does not inspect the length of `self`, and it is free to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408763,"byte_end":408833,"line_start":1966,"line_end":1966,"column_start":2,"column_end":72}},{"value":"/ perform out-of-bounds memory *write* access.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408835,"byte_end":408883,"line_start":1967,"line_end":1967,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408885,"byte_end":408888,"line_start":1968,"line_end":1968,"column_start":2,"column_end":5}},{"value":"/ Use this method **only** when you have already performed the bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408890,"byte_end":408961,"line_start":1969,"line_end":1969,"column_start":2,"column_end":73}},{"value":"/ check, and can guarantee that the call occurs with a safely in-bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":408963,"byte_end":409036,"line_start":1970,"line_end":1970,"column_start":2,"column_end":75}},{"value":"/ index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409038,"byte_end":409048,"line_start":1971,"line_end":1971,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409050,"byte_end":409053,"line_start":1972,"line_end":1972,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409055,"byte_end":409069,"line_start":1973,"line_end":1973,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409071,"byte_end":409074,"line_start":1974,"line_end":1974,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409076,"byte_end":409087,"line_start":1975,"line_end":1975,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409089,"byte_end":409116,"line_start":1976,"line_end":1976,"column_start":2,"column_end":29}},{"value":"/ use core::cell::Cell;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409118,"byte_end":409143,"line_start":1977,"line_end":1977,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409145,"byte_end":409148,"line_start":1978,"line_end":1978,"column_start":2,"column_end":5}},{"value":"/ let byte = Cell::new(0u8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409150,"byte_end":409180,"line_start":1979,"line_end":1979,"column_start":2,"column_end":32}},{"value":"/ let bits = byte.view_bits::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409182,"byte_end":409222,"line_start":1980,"line_end":1980,"column_start":2,"column_end":42}},{"value":"/ let bits_2 = bits;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409224,"byte_end":409246,"line_start":1981,"line_end":1981,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409248,"byte_end":409251,"line_start":1982,"line_end":1982,"column_start":2,"column_end":5}},{"value":"/ let (first, _) = bits.split_at(1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409253,"byte_end":409291,"line_start":1983,"line_end":1983,"column_start":2,"column_end":40}},{"value":"/ assert_eq!(first.len(), 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409293,"byte_end":409324,"line_start":1984,"line_end":1984,"column_start":2,"column_end":33}},{"value":"/ unsafe { first.set_aliased_unchecked(2, true); }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409326,"byte_end":409378,"line_start":1985,"line_end":1985,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409380,"byte_end":409383,"line_start":1986,"line_end":1986,"column_start":2,"column_end":5}},{"value":"/ assert!(bits_2[2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409385,"byte_end":409408,"line_start":1987,"line_end":1987,"column_start":2,"column_end":25}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409410,"byte_end":409417,"line_start":1988,"line_end":1988,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409419,"byte_end":409422,"line_start":1989,"line_end":1989,"column_start":2,"column_end":5}},{"value":"/ [atomic]: core::sync::atomic","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409424,"byte_end":409456,"line_start":1990,"line_end":1990,"column_start":2,"column_end":34}},{"value":"/ [`Radium`]: radium::Radium","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409458,"byte_end":409488,"line_start":1991,"line_end":1991,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2290},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409869,"byte_end":409883,"line_start":2007,"line_end":2007,"column_start":16,"column_end":30},"name":"swap_unchecked","qualname":"<BitSlice<O, T>>::swap_unchecked","value":"pub unsafe fn swap_unchecked(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409649,"byte_end":409681,"line_start":1997,"line_end":1997,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409683,"byte_end":409686,"line_start":1998,"line_end":1998,"column_start":2,"column_end":5}},{"value":"/ See [`.swap()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409688,"byte_end":409708,"line_start":1999,"line_end":1999,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409710,"byte_end":409713,"line_start":2000,"line_end":2000,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409715,"byte_end":409727,"line_start":2001,"line_end":2001,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409729,"byte_end":409732,"line_start":2002,"line_end":2002,"column_start":2,"column_end":5}},{"value":"/ `a` and `b` must both be less than [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409734,"byte_end":409788,"line_start":2003,"line_end":2003,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409790,"byte_end":409793,"line_start":2004,"line_end":2004,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409795,"byte_end":409824,"line_start":2005,"line_end":2005,"column_start":2,"column_end":31}},{"value":"/ [`.swap()`]: Self::swap","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":409826,"byte_end":409853,"line_start":2006,"line_end":2006,"column_start":2,"column_end":29}}]},{"kind":"Method","id":{"krate":0,"index":2291},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410768,"byte_end":410786,"line_start":2041,"line_end":2041,"column_start":16,"column_end":34},"name":"split_at_unchecked","qualname":"<BitSlice<O, T>>::split_at_unchecked","value":"pub unsafe fn split_at_unchecked(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index, without performing any bounds\n checking.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index, without performing any bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410062,"byte_end":410135,"line_start":2014,"line_end":2014,"column_start":2,"column_end":75}},{"value":"/ checking.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410137,"byte_end":410150,"line_start":2015,"line_end":2015,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410152,"byte_end":410155,"line_start":2016,"line_end":2016,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410157,"byte_end":410181,"line_start":2017,"line_end":2017,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410183,"byte_end":410186,"line_start":2018,"line_end":2018,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410188,"byte_end":410200,"line_start":2019,"line_end":2019,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410202,"byte_end":410205,"line_start":2020,"line_end":2020,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`]. If this condition is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410207,"byte_end":410278,"line_start":2021,"line_end":2021,"column_start":2,"column_end":73}},{"value":"/ violated, the function behavior is *unspecified*.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410280,"byte_end":410333,"line_start":2022,"line_end":2022,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410335,"byte_end":410338,"line_start":2023,"line_end":2023,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410340,"byte_end":410354,"line_start":2024,"line_end":2024,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410356,"byte_end":410359,"line_start":2025,"line_end":2025,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410361,"byte_end":410372,"line_start":2026,"line_end":2026,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410374,"byte_end":410401,"line_start":2027,"line_end":2027,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410403,"byte_end":410406,"line_start":2028,"line_end":2028,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410408,"byte_end":410447,"line_start":2029,"line_end":2029,"column_start":2,"column_end":41}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(3) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410449,"byte_end":410504,"line_start":2030,"line_end":2030,"column_start":2,"column_end":57}},{"value":"/ assert!(l.not_any());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410506,"byte_end":410531,"line_start":2031,"line_end":2031,"column_start":2,"column_end":27}},{"value":"/ assert!(r.all());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410533,"byte_end":410554,"line_start":2032,"line_end":2032,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410556,"byte_end":410559,"line_start":2033,"line_end":2033,"column_start":2,"column_end":5}},{"value":"/ let (l, r) = unsafe { bits.split_at_unchecked(6) };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410561,"byte_end":410616,"line_start":2034,"line_end":2034,"column_start":2,"column_end":57}},{"value":"/ assert_eq!(l, bits);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410618,"byte_end":410642,"line_start":2035,"line_end":2035,"column_start":2,"column_end":26}},{"value":"/ assert!(r.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410644,"byte_end":410670,"line_start":2036,"line_end":2036,"column_start":2,"column_end":28}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410672,"byte_end":410679,"line_start":2037,"line_end":2037,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410681,"byte_end":410684,"line_start":2038,"line_end":2038,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410686,"byte_end":410715,"line_start":2039,"line_end":2039,"column_start":2,"column_end":31}},{"value":"/ [`.split_at()`]: Self::split_at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410717,"byte_end":410752,"line_start":2040,"line_end":2040,"column_start":2,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":2292},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411184,"byte_end":411206,"line_start":2056,"line_end":2056,"column_start":16,"column_end":38},"name":"split_at_unchecked_mut","qualname":"<BitSlice<O, T>>::split_at_unchecked_mut","value":"pub unsafe fn split_at_unchecked_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410890,"byte_end":410941,"line_start":2045,"line_end":2045,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410943,"byte_end":410946,"line_start":2046,"line_end":2046,"column_start":2,"column_end":5}},{"value":"/ See [`.split_at_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410948,"byte_end":410976,"line_start":2047,"line_end":2047,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410978,"byte_end":410981,"line_start":2048,"line_end":2048,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410983,"byte_end":410995,"line_start":2049,"line_end":2049,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":410997,"byte_end":411000,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ `mid` must not be greater than [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411002,"byte_end":411052,"line_start":2051,"line_end":2051,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411054,"byte_end":411057,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411059,"byte_end":411088,"line_start":2053,"line_end":2053,"column_start":2,"column_end":31}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411090,"byte_end":411133,"line_start":2054,"line_end":2054,"column_start":2,"column_end":45}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411135,"byte_end":411168,"line_start":2055,"line_end":2055,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2293},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412046,"byte_end":412067,"line_start":2088,"line_end":2088,"column_start":16,"column_end":37},"name":"copy_within_unchecked","qualname":"<BitSlice<O, T>>::copy_within_unchecked","value":"pub unsafe fn copy_within_unchecked<R>(&mut Self, R, usize) where\nR: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself,\n without doing bounds checks.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411461,"byte_end":411530,"line_start":2067,"line_end":2067,"column_start":2,"column_end":71}},{"value":"/ without doing bounds checks.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411532,"byte_end":411564,"line_start":2068,"line_end":2068,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411566,"byte_end":411569,"line_start":2069,"line_end":2069,"column_start":2,"column_end":5}},{"value":"/ The ranges are allowed to overlap.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411571,"byte_end":411609,"line_start":2070,"line_end":2070,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411611,"byte_end":411614,"line_start":2071,"line_end":2071,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411616,"byte_end":411632,"line_start":2072,"line_end":2072,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411634,"byte_end":411637,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411639,"byte_end":411656,"line_start":2074,"line_end":2074,"column_start":2,"column_end":19}},{"value":"/ - `src`: The range within `self` from which to copy.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411658,"byte_end":411714,"line_start":2075,"line_end":2075,"column_start":2,"column_end":58}},{"value":"/ - `dst`: The starting index within `self` at which to paste.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411716,"byte_end":411780,"line_start":2076,"line_end":2076,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411782,"byte_end":411785,"line_start":2077,"line_end":2077,"column_start":2,"column_end":5}},{"value":"/ # Effects","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411787,"byte_end":411800,"line_start":2078,"line_end":2078,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411802,"byte_end":411805,"line_start":2079,"line_end":2079,"column_start":2,"column_end":5}},{"value":"/ `self[src]` is copied to `self[dest .. dest + src.end() - src.start()]`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411807,"byte_end":411883,"line_start":2080,"line_end":2080,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411885,"byte_end":411888,"line_start":2081,"line_end":2081,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411890,"byte_end":411902,"line_start":2082,"line_end":2082,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411904,"byte_end":411907,"line_start":2083,"line_end":2083,"column_start":2,"column_end":5}},{"value":"/ `src` and `dest .. dest + src.len()` must be entirely within","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411909,"byte_end":411973,"line_start":2084,"line_end":2084,"column_start":2,"column_end":66}},{"value":"/ [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411975,"byte_end":411994,"line_start":2085,"line_end":2085,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":411996,"byte_end":411999,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412001,"byte_end":412030,"line_start":2087,"line_end":2087,"column_start":2,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":2298},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414542,"byte_end":414551,"line_start":2171,"line_end":2171,"column_start":9,"column_end":18},"name":"as_bitptr","qualname":"<BitSlice<O, T>>::as_bitptr","value":"pub fn as_bitptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a raw bit-pointer to the base of the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns a raw bit-pointer to the base of the bit-slice’s region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413029,"byte_end":413099,"line_start":2126,"line_end":2126,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413101,"byte_end":413104,"line_start":2127,"line_end":2127,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413106,"byte_end":413181,"line_start":2128,"line_end":2128,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413183,"byte_end":413248,"line_start":2129,"line_end":2129,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413250,"byte_end":413253,"line_start":2130,"line_end":2130,"column_start":2,"column_end":5}},{"value":"/ The caller must also ensure that the memory the bit-pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413255,"byte_end":413318,"line_start":2131,"line_end":2131,"column_start":2,"column_end":65}},{"value":"/ (non-transitively) points to is never written to using this bit-pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413320,"byte_end":413395,"line_start":2132,"line_end":2132,"column_start":2,"column_end":77}},{"value":"/ or any bit-pointer derived from it. If you need to mutate the contents","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413397,"byte_end":413471,"line_start":2133,"line_end":2133,"column_start":2,"column_end":76}},{"value":"/ of the slice, use [`.as_mut_bitptr()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413473,"byte_end":413516,"line_start":2134,"line_end":2134,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413518,"byte_end":413521,"line_start":2135,"line_end":2135,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413523,"byte_end":413593,"line_start":2136,"line_end":2136,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413595,"byte_end":413670,"line_start":2137,"line_end":2137,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413672,"byte_end":413684,"line_start":2138,"line_end":2138,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413686,"byte_end":413689,"line_start":2139,"line_end":2139,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413691,"byte_end":413705,"line_start":2140,"line_end":2140,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413707,"byte_end":413710,"line_start":2141,"line_end":2141,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413712,"byte_end":413806,"line_start":2142,"line_end":2142,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413808,"byte_end":413811,"line_start":2143,"line_end":2143,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413813,"byte_end":413834,"line_start":2144,"line_end":2144,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413836,"byte_end":413839,"line_start":2145,"line_end":2145,"column_start":2,"column_end":5}},{"value":"/ This returns a structure, [`BitPtr`], rather than an actual raw pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413841,"byte_end":413916,"line_start":2146,"line_end":2146,"column_start":2,"column_end":77}},{"value":"/ `*Bit`. The information required to address a bit within a memory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413918,"byte_end":413987,"line_start":2147,"line_end":2147,"column_start":2,"column_end":71}},{"value":"/ element cannot be encoded into a single pointer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":413989,"byte_end":414041,"line_start":2148,"line_end":2148,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414043,"byte_end":414046,"line_start":2149,"line_end":2149,"column_start":2,"column_end":5}},{"value":"/ This structure can be converted back into a `&BitSlice` with the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414048,"byte_end":414116,"line_start":2150,"line_end":2150,"column_start":2,"column_end":70}},{"value":"/ function [`from_raw_parts`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414118,"byte_end":414150,"line_start":2151,"line_end":2151,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414152,"byte_end":414155,"line_start":2152,"line_end":2152,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414157,"byte_end":414171,"line_start":2153,"line_end":2153,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414173,"byte_end":414176,"line_start":2154,"line_end":2154,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414178,"byte_end":414189,"line_start":2155,"line_end":2155,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414191,"byte_end":414218,"line_start":2156,"line_end":2156,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414220,"byte_end":414223,"line_start":2157,"line_end":2157,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414225,"byte_end":414252,"line_start":2158,"line_end":2158,"column_start":2,"column_end":29}},{"value":"/ let x_ptr = x.as_ptr();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414254,"byte_end":414281,"line_start":2159,"line_end":2159,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414283,"byte_end":414286,"line_start":2160,"line_end":2160,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414288,"byte_end":414300,"line_start":2161,"line_end":2161,"column_start":2,"column_end":14}},{"value":"/   for i in 0 .. x.len() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414302,"byte_end":414331,"line_start":2162,"line_end":2162,"column_start":2,"column_end":31}},{"value":"/     assert_eq!(*x.get_unchecked(i), (&*x)[i]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414333,"byte_end":414383,"line_start":2163,"line_end":2163,"column_start":2,"column_end":52}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414385,"byte_end":414392,"line_start":2164,"line_end":2164,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414394,"byte_end":414399,"line_start":2165,"line_end":2165,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414401,"byte_end":414408,"line_start":2166,"line_end":2166,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414410,"byte_end":414413,"line_start":2167,"line_end":2167,"column_start":2,"column_end":5}},{"value":"/ [`.as_mut_bitptr()`]: Self::as_mut_bitptr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414415,"byte_end":414460,"line_start":2168,"line_end":2168,"column_start":2,"column_end":47}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414462,"byte_end":414514,"line_start":2169,"line_end":2169,"column_start":2,"column_end":54}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414516,"byte_end":414533,"line_start":2170,"line_end":2170,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2299},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415819,"byte_end":415832,"line_start":2211,"line_end":2211,"column_start":9,"column_end":22},"name":"as_mut_bitptr","qualname":"<BitSlice<O, T>>::as_mut_bitptr","value":"pub fn as_mut_bitptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an unsafe mutable bit-pointer to the bit-slice’s region.","sig":null,"attributes":[{"value":"/ Returns an unsafe mutable bit-pointer to the bit-slice’s region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414621,"byte_end":414691,"line_start":2175,"line_end":2175,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414693,"byte_end":414696,"line_start":2176,"line_end":2176,"column_start":2,"column_end":5}},{"value":"/ The caller must ensure that the bit-slice outlives the bit-pointer this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414698,"byte_end":414773,"line_start":2177,"line_end":2177,"column_start":2,"column_end":77}},{"value":"/ function returns, or else it will end up pointing to garbage.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414775,"byte_end":414840,"line_start":2178,"line_end":2178,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414842,"byte_end":414845,"line_start":2179,"line_end":2179,"column_start":2,"column_end":5}},{"value":"/ Modifying the container referenced by this bit-slice may cause its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414847,"byte_end":414917,"line_start":2180,"line_end":2180,"column_start":2,"column_end":72}},{"value":"/ buffer to be reällocated, which would also make any bit-pointers to it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414919,"byte_end":414994,"line_start":2181,"line_end":2181,"column_start":2,"column_end":76}},{"value":"/ invalid.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":414996,"byte_end":415008,"line_start":2182,"line_end":2182,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415010,"byte_end":415013,"line_start":2183,"line_end":2183,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415015,"byte_end":415029,"line_start":2184,"line_end":2184,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415031,"byte_end":415034,"line_start":2185,"line_end":2185,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415036,"byte_end":415138,"line_start":2186,"line_end":2186,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415140,"byte_end":415143,"line_start":2187,"line_end":2187,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415145,"byte_end":415166,"line_start":2188,"line_end":2188,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415168,"byte_end":415171,"line_start":2189,"line_end":2189,"column_start":2,"column_end":5}},{"value":"/ This returns `*mut BitSlice`, which is the equivalont of `*mut [T]`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415173,"byte_end":415244,"line_start":2190,"line_end":2190,"column_start":2,"column_end":73}},{"value":"/ instead of `*mut T`. The pointer encoding used requires more than one","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415246,"byte_end":415319,"line_start":2191,"line_end":2191,"column_start":2,"column_end":75}},{"value":"/ CPU word of space to address a single bit, so there is no advantage to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415321,"byte_end":415395,"line_start":2192,"line_end":2192,"column_start":2,"column_end":76}},{"value":"/ removing the length information from the encoded pointer value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415397,"byte_end":415464,"line_start":2193,"line_end":2193,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415466,"byte_end":415469,"line_start":2194,"line_end":2194,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415471,"byte_end":415485,"line_start":2195,"line_end":2195,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415487,"byte_end":415490,"line_start":2196,"line_end":2196,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415492,"byte_end":415503,"line_start":2197,"line_end":2197,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415505,"byte_end":415532,"line_start":2198,"line_end":2198,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415534,"byte_end":415537,"line_start":2199,"line_end":2199,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut Lsb0, u8; 0; 8];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415539,"byte_end":415580,"line_start":2200,"line_end":2200,"column_start":2,"column_end":43}},{"value":"/ let bits_ptr = bits.as_mut_ptr();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415582,"byte_end":415619,"line_start":2201,"line_end":2201,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415621,"byte_end":415624,"line_start":2202,"line_end":2202,"column_start":2,"column_end":5}},{"value":"/ for i in 0 .. bits.len() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415626,"byte_end":415656,"line_start":2203,"line_end":2203,"column_start":2,"column_end":32}},{"value":"/   unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415658,"byte_end":415672,"line_start":2204,"line_end":2204,"column_start":2,"column_end":16}},{"value":"/     bits_ptr.add(i).write(i % 3 == 0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415674,"byte_end":415716,"line_start":2205,"line_end":2205,"column_start":2,"column_end":44}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415718,"byte_end":415725,"line_start":2206,"line_end":2206,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415727,"byte_end":415732,"line_start":2207,"line_end":2207,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(bits.as_slice()[0], 0b0100_1001);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415734,"byte_end":415782,"line_start":2208,"line_end":2208,"column_start":2,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415784,"byte_end":415791,"line_start":2209,"line_end":2209,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415793,"byte_end":415810,"line_start":2210,"line_end":2210,"column_start":2,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":2300},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417552,"byte_end":417567,"line_start":2258,"line_end":2258,"column_start":9,"column_end":24},"name":"as_bitptr_range","qualname":"<BitSlice<O, T>>::as_bitptr_range","value":"pub fn as_bitptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two raw bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two raw bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415908,"byte_end":415968,"line_start":2215,"line_end":2215,"column_start":2,"column_end":62}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415970,"byte_end":415973,"line_start":2216,"line_end":2216,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":415975,"byte_end":416048,"line_start":2217,"line_end":2217,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bit of the bit-slice. This way, an empty","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416050,"byte_end":416121,"line_start":2218,"line_end":2218,"column_start":2,"column_end":73}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416123,"byte_end":416197,"line_start":2219,"line_end":2219,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416199,"byte_end":416269,"line_start":2220,"line_end":2220,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416271,"byte_end":416274,"line_start":2221,"line_end":2221,"column_start":2,"column_end":5}},{"value":"/ See [`as_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416276,"byte_end":416347,"line_start":2222,"line_end":2222,"column_start":2,"column_end":73}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416349,"byte_end":416424,"line_start":2223,"line_end":2223,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416426,"byte_end":416447,"line_start":2224,"line_end":2224,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416449,"byte_end":416452,"line_start":2225,"line_end":2225,"column_start":2,"column_end":5}},{"value":"/ This function allows a more direct access to bit-pointers, without","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416454,"byte_end":416524,"line_start":2226,"line_end":2226,"column_start":2,"column_end":72}},{"value":"/ paying the cost of encoding into a `*BitSlice`, at the cost of no longer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416526,"byte_end":416602,"line_start":2227,"line_end":2227,"column_start":2,"column_end":78}},{"value":"/ fitting into ordinary Rust interfaces.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416604,"byte_end":416646,"line_start":2228,"line_end":2228,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416648,"byte_end":416651,"line_start":2229,"line_end":2229,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416653,"byte_end":416667,"line_start":2230,"line_end":2230,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416669,"byte_end":416672,"line_start":2231,"line_end":2231,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_ptr_range)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416674,"byte_end":416780,"line_start":2232,"line_end":2232,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416782,"byte_end":416785,"line_start":2233,"line_end":2233,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416787,"byte_end":416808,"line_start":2234,"line_end":2234,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416810,"byte_end":416813,"line_start":2235,"line_end":2235,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416815,"byte_end":416890,"line_start":2236,"line_end":2236,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416892,"byte_end":416966,"line_start":2237,"line_end":2237,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":416968,"byte_end":417043,"line_start":2238,"line_end":2238,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417045,"byte_end":417088,"line_start":2239,"line_end":2239,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417090,"byte_end":417093,"line_start":2240,"line_end":2240,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417095,"byte_end":417109,"line_start":2241,"line_end":2241,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417111,"byte_end":417114,"line_start":2242,"line_end":2242,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417116,"byte_end":417127,"line_start":2243,"line_end":2243,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417129,"byte_end":417156,"line_start":2244,"line_end":2244,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417158,"byte_end":417161,"line_start":2245,"line_end":2245,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417163,"byte_end":417199,"line_start":2246,"line_end":2246,"column_start":2,"column_end":38}},{"value":"/ let mid_ptr = bits.get(2).unwrap().into_bitptr();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417201,"byte_end":417254,"line_start":2247,"line_end":2247,"column_start":2,"column_end":55}},{"value":"/ let mut range = bits.as_bitptr_range();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417256,"byte_end":417299,"line_start":2248,"line_end":2248,"column_start":2,"column_end":45}},{"value":"/ assert!(range.contains(&mid_ptr));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417301,"byte_end":417339,"line_start":2249,"line_end":2249,"column_start":2,"column_end":40}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417341,"byte_end":417353,"line_start":2250,"line_end":2250,"column_start":2,"column_end":14}},{"value":"/   assert!(!range.next().unwrap().read());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417355,"byte_end":417400,"line_start":2251,"line_end":2251,"column_start":2,"column_end":47}},{"value":"/   assert!(range.next_back().unwrap().read())","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417402,"byte_end":417450,"line_start":2252,"line_end":2252,"column_start":2,"column_end":50}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417452,"byte_end":417457,"line_start":2253,"line_end":2253,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417459,"byte_end":417466,"line_start":2254,"line_end":2254,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417468,"byte_end":417471,"line_start":2255,"line_end":2255,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417473,"byte_end":417507,"line_start":2256,"line_end":2256,"column_start":2,"column_end":36}},{"value":"/ [`as_bitptr`]: Self::as_bitptr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417509,"byte_end":417543,"line_start":2257,"line_end":2257,"column_start":2,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":2301},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419075,"byte_end":419094,"line_start":2300,"line_end":2300,"column_start":9,"column_end":28},"name":"as_mut_bitptr_range","qualname":"<BitSlice<O, T>>::as_mut_bitptr_range","value":"pub fn as_mut_bitptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the two unsafe mutable bit-pointers spanning the bit-slice.","sig":null,"attributes":[{"value":"/ Returns the two unsafe mutable bit-pointers spanning the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417658,"byte_end":417729,"line_start":2262,"line_end":2262,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417731,"byte_end":417734,"line_start":2263,"line_end":2263,"column_start":2,"column_end":5}},{"value":"/ The returned range is half-open, which means that the end bit-pointer","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417736,"byte_end":417809,"line_start":2264,"line_end":2264,"column_start":2,"column_end":75}},{"value":"/ points *one past* the last bitt of the bit-slice. This way, an empty","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417811,"byte_end":417883,"line_start":2265,"line_end":2265,"column_start":2,"column_end":74}},{"value":"/ bit-slice is represented by two equal bit-pointers, and the difference","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417885,"byte_end":417959,"line_start":2266,"line_end":2266,"column_start":2,"column_end":76}},{"value":"/ between the two bit-pointers represents the size of the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":417961,"byte_end":418031,"line_start":2267,"line_end":2267,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418033,"byte_end":418036,"line_start":2268,"line_end":2268,"column_start":2,"column_end":5}},{"value":"/ See [`as_mut_bitptr`] for warnings on using these bit-pointers. The end","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418038,"byte_end":418113,"line_start":2269,"line_end":2269,"column_start":2,"column_end":77}},{"value":"/ bit-pointer requires extra caution, as it does not point to a valid bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418115,"byte_end":418190,"line_start":2270,"line_end":2270,"column_start":2,"column_end":77}},{"value":"/ in the bit-slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418192,"byte_end":418213,"line_start":2271,"line_end":2271,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418215,"byte_end":418218,"line_start":2272,"line_end":2272,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418220,"byte_end":418234,"line_start":2273,"line_end":2273,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418236,"byte_end":418239,"line_start":2274,"line_end":2274,"column_start":2,"column_end":5}},{"value":"/ [`slice::as_mut_ptr_range`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.as_mut_ptr_range)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418241,"byte_end":418355,"line_start":2275,"line_end":2275,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418357,"byte_end":418360,"line_start":2276,"line_end":2276,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418362,"byte_end":418383,"line_start":2277,"line_end":2277,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418385,"byte_end":418388,"line_start":2278,"line_end":2278,"column_start":2,"column_end":5}},{"value":"/ This returns a dedicated structure, rather than a range of [`BitPtr`]s,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418390,"byte_end":418465,"line_start":2279,"line_end":2279,"column_start":2,"column_end":77}},{"value":"/ because the traits needed for non-`core` types to correctly operate in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418467,"byte_end":418541,"line_start":2280,"line_end":2280,"column_start":2,"column_end":76}},{"value":"/ ranges are still unstable. The structure can be converted into a range,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418543,"byte_end":418618,"line_start":2281,"line_end":2281,"column_start":2,"column_end":77}},{"value":"/ but that range will not be an iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418620,"byte_end":418663,"line_start":2282,"line_end":2282,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418665,"byte_end":418668,"line_start":2283,"line_end":2283,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418670,"byte_end":418684,"line_start":2284,"line_end":2284,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418686,"byte_end":418689,"line_start":2285,"line_end":2285,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418691,"byte_end":418702,"line_start":2286,"line_end":2286,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418704,"byte_end":418731,"line_start":2287,"line_end":2287,"column_start":2,"column_end":29}},{"value":"/ use bitvec::ptr as bv_ptr;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418733,"byte_end":418763,"line_start":2288,"line_end":2288,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418765,"byte_end":418768,"line_start":2289,"line_end":2289,"column_start":2,"column_end":5}},{"value":"/ let mut data = 0u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418770,"byte_end":418793,"line_start":2290,"line_end":2290,"column_start":2,"column_end":25}},{"value":"/ let bits = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418795,"byte_end":418839,"line_start":2291,"line_end":2291,"column_start":2,"column_end":46}},{"value":"/ for mut bitptr in bits.as_mut_bitptr_range() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418841,"byte_end":418891,"line_start":2292,"line_end":2292,"column_start":2,"column_end":52}},{"value":"/   unsafe { bv_ptr::write(bitptr, true); }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418893,"byte_end":418938,"line_start":2293,"line_end":2293,"column_start":2,"column_end":47}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418940,"byte_end":418945,"line_start":2294,"line_end":2294,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(data, !0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418947,"byte_end":418972,"line_start":2295,"line_end":2295,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418974,"byte_end":418981,"line_start":2296,"line_end":2296,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418983,"byte_end":418986,"line_start":2297,"line_end":2297,"column_start":2,"column_end":5}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":418988,"byte_end":419022,"line_start":2298,"line_end":2298,"column_start":2,"column_end":36}},{"value":"/ [`as_mut_bitptr`]: Self::as_mut_bitptr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419024,"byte_end":419066,"line_start":2299,"line_end":2299,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2302},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420369,"byte_end":420379,"line_start":2339,"line_end":2339,"column_start":9,"column_end":19},"name":"bit_domain","qualname":"<BitSlice<O, T>>::bit_domain","value":"pub fn bit_domain(&Self) -> BitDomain<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419191,"byte_end":419247,"line_start":2304,"line_end":2304,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419249,"byte_end":419252,"line_start":2305,"line_end":2305,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419254,"byte_end":419330,"line_start":2306,"line_end":2306,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419332,"byte_end":419405,"line_start":2307,"line_end":2307,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419407,"byte_end":419479,"line_start":2308,"line_end":2308,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419481,"byte_end":419556,"line_start":2309,"line_end":2309,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419558,"byte_end":419572,"line_start":2310,"line_end":2310,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419574,"byte_end":419577,"line_start":2311,"line_end":2311,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomain`] splitting in its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419579,"byte_end":419641,"line_start":2312,"line_end":2312,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419643,"byte_end":419661,"line_start":2313,"line_end":2313,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419663,"byte_end":419666,"line_start":2314,"line_end":2314,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419668,"byte_end":419682,"line_start":2315,"line_end":2315,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419684,"byte_end":419687,"line_start":2316,"line_end":2316,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419689,"byte_end":419700,"line_start":2317,"line_end":2317,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419702,"byte_end":419729,"line_start":2318,"line_end":2318,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419731,"byte_end":419734,"line_start":2319,"line_end":2319,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419736,"byte_end":419765,"line_start":2320,"line_end":2320,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419767,"byte_end":419810,"line_start":2321,"line_end":2321,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419812,"byte_end":419852,"line_start":2322,"line_end":2322,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419854,"byte_end":419925,"line_start":2323,"line_end":2323,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419927,"byte_end":419930,"line_start":2324,"line_end":2324,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419932,"byte_end":419965,"line_start":2325,"line_end":2325,"column_start":2,"column_end":35}},{"value":"/   .bit_domain()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419967,"byte_end":419986,"line_start":2326,"line_end":2326,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":419988,"byte_end":420003,"line_start":2327,"line_end":2327,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420005,"byte_end":420021,"line_start":2328,"line_end":2328,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420023,"byte_end":420053,"line_start":2329,"line_end":2329,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420055,"byte_end":420085,"line_start":2330,"line_end":2330,"column_start":2,"column_end":32}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420087,"byte_end":420147,"line_start":2331,"line_end":2331,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420149,"byte_end":420209,"line_start":2332,"line_end":2332,"column_start":2,"column_end":62}},{"value":"/ let _: &BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420211,"byte_end":420250,"line_start":2333,"line_end":2333,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420252,"byte_end":420259,"line_start":2334,"line_end":2334,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420261,"byte_end":420264,"line_start":2335,"line_end":2335,"column_start":2,"column_end":5}},{"value":"/ [`BitDomain`]: crate::domain::BitDomain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420266,"byte_end":420309,"line_start":2336,"line_end":2336,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420311,"byte_end":420328,"line_start":2337,"line_end":2337,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420330,"byte_end":420360,"line_start":2338,"line_end":2338,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2303},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421654,"byte_end":421668,"line_start":2379,"line_end":2379,"column_start":9,"column_end":23},"name":"bit_domain_mut","qualname":"<BitSlice<O, T>>::bit_domain_mut","value":"pub fn bit_domain_mut(&mut Self) -> BitDomainMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Splits the slice into subslices at alias boundaries.","sig":null,"attributes":[{"value":"/ Splits the slice into subslices at alias boundaries.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420436,"byte_end":420492,"line_start":2343,"line_end":2343,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420494,"byte_end":420497,"line_start":2344,"line_end":2344,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420499,"byte_end":420575,"line_start":2345,"line_end":2345,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420577,"byte_end":420650,"line_start":2346,"line_end":2346,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420652,"byte_end":420724,"line_start":2347,"line_end":2347,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420726,"byte_end":420801,"line_start":2348,"line_end":2348,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420803,"byte_end":420817,"line_start":2349,"line_end":2349,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420819,"byte_end":420822,"line_start":2350,"line_end":2350,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`BitDomainMut`] splitting in its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420824,"byte_end":420889,"line_start":2351,"line_end":2351,"column_start":2,"column_end":67}},{"value":"/ documentation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420891,"byte_end":420909,"line_start":2352,"line_end":2352,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420911,"byte_end":420914,"line_start":2353,"line_end":2353,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420916,"byte_end":420930,"line_start":2354,"line_end":2354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420932,"byte_end":420935,"line_start":2355,"line_end":2355,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420937,"byte_end":420948,"line_start":2356,"line_end":2356,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420950,"byte_end":420977,"line_start":2357,"line_end":2357,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420979,"byte_end":420982,"line_start":2358,"line_end":2358,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":420984,"byte_end":421013,"line_start":2359,"line_end":2359,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421015,"byte_end":421058,"line_start":2360,"line_end":2360,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421060,"byte_end":421100,"line_start":2361,"line_end":2361,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias>","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421102,"byte_end":421161,"line_start":2362,"line_end":2362,"column_start":2,"column_end":61}},{"value":"/   = &mut rest[.. 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421163,"byte_end":421188,"line_start":2363,"line_end":2363,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421190,"byte_end":421193,"line_start":2364,"line_end":2364,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421195,"byte_end":421228,"line_start":2365,"line_end":2365,"column_start":2,"column_end":35}},{"value":"/   .bit_domain_mut()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421230,"byte_end":421253,"line_start":2366,"line_end":2366,"column_start":2,"column_end":25}},{"value":"/   .region()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421255,"byte_end":421270,"line_start":2367,"line_end":2367,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421272,"byte_end":421288,"line_start":2368,"line_end":2368,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(head.len(), 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421290,"byte_end":421320,"line_start":2369,"line_end":2369,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(tail.len(), 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421322,"byte_end":421352,"line_start":2370,"line_end":2370,"column_start":2,"column_end":32}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = head;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421354,"byte_end":421418,"line_start":2371,"line_end":2371,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = tail;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421420,"byte_end":421484,"line_start":2372,"line_end":2372,"column_start":2,"column_end":66}},{"value":"/ let _: &mut BitSlice<Msb0, u16> = body;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421486,"byte_end":421529,"line_start":2373,"line_end":2373,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421531,"byte_end":421538,"line_start":2374,"line_end":2374,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421540,"byte_end":421543,"line_start":2375,"line_end":2375,"column_start":2,"column_end":5}},{"value":"/ [`BitDomainMut`]: crate::domain::BitDomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421545,"byte_end":421594,"line_start":2376,"line_end":2376,"column_start":2,"column_end":51}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421596,"byte_end":421613,"line_start":2377,"line_end":2377,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421615,"byte_end":421645,"line_start":2378,"line_end":2378,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2304},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422873,"byte_end":422879,"line_start":2418,"line_end":2418,"column_start":9,"column_end":15},"name":"domain","qualname":"<BitSlice<O, T>>::domain","value":"pub fn domain(&Self) -> Domain<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421735,"byte_end":421803,"line_start":2383,"line_end":2383,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421805,"byte_end":421820,"line_start":2384,"line_end":2384,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421822,"byte_end":421825,"line_start":2385,"line_end":2385,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421827,"byte_end":421903,"line_start":2386,"line_end":2386,"column_start":2,"column_end":78}},{"value":"/ the memory locatinos that it completely fills. The locations that are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421905,"byte_end":421978,"line_start":2387,"line_end":2387,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":421980,"byte_end":422052,"line_start":2388,"line_end":2388,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422054,"byte_end":422129,"line_start":2389,"line_end":2389,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422131,"byte_end":422145,"line_start":2390,"line_end":2390,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422147,"byte_end":422150,"line_start":2391,"line_end":2391,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`Domain`] splitting in its documentation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422152,"byte_end":422226,"line_start":2392,"line_end":2392,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422228,"byte_end":422231,"line_start":2393,"line_end":2393,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422233,"byte_end":422247,"line_start":2394,"line_end":2394,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422249,"byte_end":422252,"line_start":2395,"line_end":2395,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422254,"byte_end":422265,"line_start":2396,"line_end":2396,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422267,"byte_end":422294,"line_start":2397,"line_end":2397,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422296,"byte_end":422299,"line_start":2398,"line_end":2398,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422301,"byte_end":422330,"line_start":2399,"line_end":2399,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422332,"byte_end":422375,"line_start":2400,"line_end":2400,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422377,"byte_end":422417,"line_start":2401,"line_end":2401,"column_start":2,"column_end":42}},{"value":"/ let bits: &BitSlice<Msb0, <u16 as BitStore>::Alias> = &rest[.. 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422419,"byte_end":422490,"line_start":2402,"line_end":2402,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422492,"byte_end":422495,"line_start":2403,"line_end":2403,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422497,"byte_end":422530,"line_start":2404,"line_end":2404,"column_start":2,"column_end":35}},{"value":"/   .domain()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422532,"byte_end":422547,"line_start":2405,"line_end":2405,"column_start":2,"column_end":17}},{"value":"/   .region()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422549,"byte_end":422564,"line_start":2406,"line_end":2406,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422566,"byte_end":422582,"line_start":2407,"line_end":2407,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422584,"byte_end":422614,"line_start":2408,"line_end":2408,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422616,"byte_end":422619,"line_start":2409,"line_end":2409,"column_start":2,"column_end":5}},{"value":"/ let _: &<u16 as BitStore>::Alias = head.unwrap().1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422621,"byte_end":422676,"line_start":2410,"line_end":2410,"column_start":2,"column_end":57}},{"value":"/ let _: &<u16 as BitStore>::Alias = tail.unwrap().0;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422678,"byte_end":422733,"line_start":2411,"line_end":2411,"column_start":2,"column_end":57}},{"value":"/ let _: &[u16] = body;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422735,"byte_end":422760,"line_start":2412,"line_end":2412,"column_start":2,"column_end":27}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422762,"byte_end":422769,"line_start":2413,"line_end":2413,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422771,"byte_end":422774,"line_start":2414,"line_end":2414,"column_start":2,"column_end":5}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422776,"byte_end":422813,"line_start":2415,"line_end":2415,"column_start":2,"column_end":39}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422815,"byte_end":422832,"line_start":2416,"line_end":2416,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422834,"byte_end":422864,"line_start":2417,"line_end":2417,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2305},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424144,"byte_end":424154,"line_start":2459,"line_end":2459,"column_start":9,"column_end":19},"name":"domain_mut","qualname":"<BitSlice<O, T>>::domain_mut","value":"pub fn domain_mut(&mut Self) -> DomainMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice, split at alias\n boundaries.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice, split at alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422927,"byte_end":422995,"line_start":2422,"line_end":2422,"column_start":2,"column_end":70}},{"value":"/ boundaries.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":422997,"byte_end":423012,"line_start":2423,"line_end":2423,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423014,"byte_end":423017,"line_start":2424,"line_end":2424,"column_start":2,"column_end":5}},{"value":"/ This splits `self` into the memory locations that it partially fills and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423019,"byte_end":423095,"line_start":2425,"line_end":2425,"column_start":2,"column_end":78}},{"value":"/ the memory locations that it completely fills. The locations that are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423097,"byte_end":423170,"line_start":2426,"line_end":2426,"column_start":2,"column_end":75}},{"value":"/ completely filled may be accessed without any `bitvec`-imposed alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423172,"byte_end":423244,"line_start":2427,"line_end":2427,"column_start":2,"column_end":74}},{"value":"/ conditions, while the locations that are only partially filled are left","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423246,"byte_end":423321,"line_start":2428,"line_end":2428,"column_start":2,"column_end":77}},{"value":"/ unchanged.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423323,"byte_end":423337,"line_start":2429,"line_end":2429,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423339,"byte_end":423342,"line_start":2430,"line_end":2430,"column_start":2,"column_end":5}},{"value":"/ You can read more about the [`DomainMut`] splitting in its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423344,"byte_end":423406,"line_start":2431,"line_end":2431,"column_start":2,"column_end":64}},{"value":"/ documentation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423408,"byte_end":423426,"line_start":2432,"line_end":2432,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423428,"byte_end":423431,"line_start":2433,"line_end":2433,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423433,"byte_end":423447,"line_start":2434,"line_end":2434,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423449,"byte_end":423452,"line_start":2435,"line_end":2435,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423454,"byte_end":423457,"line_start":2436,"line_end":2436,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423459,"byte_end":423470,"line_start":2437,"line_end":2437,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423472,"byte_end":423499,"line_start":2438,"line_end":2438,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423501,"byte_end":423504,"line_start":2439,"line_end":2439,"column_start":2,"column_end":5}},{"value":"/ let mut data = [0u16; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423506,"byte_end":423535,"line_start":2440,"line_end":2440,"column_start":2,"column_end":31}},{"value":"/ let all = data.view_bits_mut::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423537,"byte_end":423580,"line_start":2441,"line_end":2441,"column_start":2,"column_end":45}},{"value":"/ let (_, rest) = all.split_at_mut(8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423582,"byte_end":423622,"line_start":2442,"line_end":2442,"column_start":2,"column_end":42}},{"value":"/ let bits: &mut BitSlice<Msb0, <u16 as BitStore>::Alias> = &mut rest[.. 32];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423624,"byte_end":423703,"line_start":2443,"line_end":2443,"column_start":2,"column_end":81}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423705,"byte_end":423708,"line_start":2444,"line_end":2444,"column_start":2,"column_end":5}},{"value":"/ let (head, body, tail) = bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423710,"byte_end":423743,"line_start":2445,"line_end":2445,"column_start":2,"column_end":35}},{"value":"/   .domain_mut()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423745,"byte_end":423764,"line_start":2446,"line_end":2446,"column_start":2,"column_end":21}},{"value":"/   .region()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423766,"byte_end":423781,"line_start":2447,"line_end":2447,"column_start":2,"column_end":17}},{"value":"/   .unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423783,"byte_end":423799,"line_start":2448,"line_end":2448,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(body.len(), 1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423801,"byte_end":423831,"line_start":2449,"line_end":2449,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423833,"byte_end":423836,"line_start":2450,"line_end":2450,"column_start":2,"column_end":5}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = head.unwrap().1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423838,"byte_end":423915,"line_start":2451,"line_end":2451,"column_start":2,"column_end":79}},{"value":"/ let _: &<<u16 as BitStore>::Alias as BitStore>::Access = tail.unwrap().0;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423917,"byte_end":423994,"line_start":2452,"line_end":2452,"column_start":2,"column_end":79}},{"value":"/ let _: &mut [u16] = body;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":423996,"byte_end":424025,"line_start":2453,"line_end":2453,"column_start":2,"column_end":31}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424027,"byte_end":424034,"line_start":2454,"line_end":2454,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424036,"byte_end":424039,"line_start":2455,"line_end":2455,"column_start":2,"column_end":5}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424041,"byte_end":424084,"line_start":2456,"line_end":2456,"column_start":2,"column_end":45}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424086,"byte_end":424103,"line_start":2457,"line_end":2457,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424105,"byte_end":424135,"line_start":2458,"line_end":2458,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2306},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424596,"byte_end":424604,"line_start":2472,"line_end":2472,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<BitSlice<O, T>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying memory containing the slice.","sig":null,"attributes":[{"value":"/ Views the underlying memory containing the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424212,"byte_end":424265,"line_start":2463,"line_end":2463,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424267,"byte_end":424270,"line_start":2464,"line_end":2464,"column_start":2,"column_end":5}},{"value":"/ The returned slice handle views all elements touched by `self`, and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424272,"byte_end":424343,"line_start":2465,"line_end":2465,"column_start":2,"column_end":73}},{"value":"/ marks them all with `self`’s current aliasing state. For a more precise","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424345,"byte_end":424422,"line_start":2466,"line_end":2466,"column_start":2,"column_end":77}},{"value":"/ view, or one that permits mutation, use [`.domain()`] or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424424,"byte_end":424484,"line_start":2467,"line_end":2467,"column_start":2,"column_end":62}},{"value":"/ [`.domain_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424486,"byte_end":424508,"line_start":2468,"line_end":2468,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424510,"byte_end":424513,"line_start":2469,"line_end":2469,"column_start":2,"column_end":5}},{"value":"/ [`.domain()`]: Self::domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424515,"byte_end":424546,"line_start":2470,"line_end":2470,"column_start":2,"column_end":33}},{"value":"/ [`.domain_mut()`]: Self::domain_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424548,"byte_end":424587,"line_start":2471,"line_end":2471,"column_start":2,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":2320},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427930,"byte_end":427950,"line_start":2578,"line_end":2578,"column_start":9,"column_end":29},"name":"split_at_aliased_mut","qualname":"<BitSlice<O, T>>::split_at_aliased_mut","value":"pub fn split_at_aliased_mut(&mut Self, usize) -> (&mut Self, &mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Splits a mutable slice at some mid-point.","sig":null,"attributes":[{"value":"/ Splits a mutable slice at some mid-point.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427506,"byte_end":427551,"line_start":2567,"line_end":2567,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427553,"byte_end":427556,"line_start":2568,"line_end":2568,"column_start":2,"column_end":5}},{"value":"/ This method has the same behavior as [`.split_at_mut()`], except that it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427558,"byte_end":427634,"line_start":2569,"line_end":2569,"column_start":2,"column_end":78}},{"value":"/ does not apply an aliasing marker to the partitioned subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427636,"byte_end":427703,"line_start":2570,"line_end":2570,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427705,"byte_end":427708,"line_start":2571,"line_end":2571,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427710,"byte_end":427722,"line_start":2572,"line_end":2572,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427724,"byte_end":427727,"line_start":2573,"line_end":2573,"column_start":2,"column_end":5}},{"value":"/ Because this method is defined only on `BitSlice`s whose `T` type is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427729,"byte_end":427801,"line_start":2574,"line_end":2574,"column_start":2,"column_end":74}},{"value":"/ alias-safe, the subslices do not need to be additionally marked.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427803,"byte_end":427871,"line_start":2575,"line_end":2575,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427873,"byte_end":427876,"line_start":2576,"line_end":2576,"column_start":2,"column_end":5}},{"value":"/ [`.split_at_mut()`]: Self::split_at_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427878,"byte_end":427921,"line_start":2577,"line_end":2577,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":2324},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428577,"byte_end":428585,"line_start":2602,"line_end":2602,"column_start":12,"column_end":20},"name":"MAX_BITS","qualname":"::slice::BitSlice::<O, T>::MAX_BITS","value":"usize","parent":{"krate":0,"index":2321},"children":[],"decl_id":null,"docs":" The inclusive maximum length of a `BitSlice<_, T>`.","sig":null,"attributes":[{"value":"/ The inclusive maximum length of a `BitSlice<_, T>`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428219,"byte_end":428274,"line_start":2593,"line_end":2593,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428276,"byte_end":428279,"line_start":2594,"line_end":2594,"column_start":2,"column_end":5}},{"value":"/ As `BitSlice` is zero-indexed, the largest possible index is one less","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428281,"byte_end":428354,"line_start":2595,"line_end":2595,"column_start":2,"column_end":75}},{"value":"/ than this value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428356,"byte_end":428376,"line_start":2596,"line_end":2596,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428378,"byte_end":428381,"line_start":2597,"line_end":2597,"column_start":2,"column_end":5}},{"value":"/ |CPU word width|         Value         |","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428383,"byte_end":428427,"line_start":2598,"line_end":2598,"column_start":2,"column_end":46}},{"value":"/ |-------------:|----------------------:|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428429,"byte_end":428473,"line_start":2599,"line_end":2599,"column_start":2,"column_end":46}},{"value":"/ |32 bits       |     `0x1fff_ffff`     |","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428475,"byte_end":428519,"line_start":2600,"line_end":2600,"column_start":2,"column_end":46}},{"value":"/ |64 bits       |`0x1fff_ffff_ffff_ffff`|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428521,"byte_end":428565,"line_start":2601,"line_end":2601,"column_start":2,"column_end":46}}]},{"kind":"Const","id":{"krate":0,"index":2325},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429422,"byte_end":429430,"line_start":2617,"line_end":2617,"column_start":12,"column_end":20},"name":"MAX_ELTS","qualname":"::slice::BitSlice::<O, T>::MAX_ELTS","value":"usize","parent":{"krate":0,"index":2321},"children":[],"decl_id":null,"docs":" The inclusive maximum length that a slice `[T]` can be for\n `BitSlice<_, T>` to cover it.","sig":null,"attributes":[{"value":"/ The inclusive maximum length that a slice `[T]` can be for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428637,"byte_end":428699,"line_start":2603,"line_end":2603,"column_start":2,"column_end":64}},{"value":"/ `BitSlice<_, T>` to cover it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428701,"byte_end":428734,"line_start":2604,"line_end":2604,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428736,"byte_end":428739,"line_start":2605,"line_end":2605,"column_start":2,"column_end":5}},{"value":"/ A `BitSlice<_, T>` that begins in the interior of an element and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428741,"byte_end":428809,"line_start":2606,"line_end":2606,"column_start":2,"column_end":70}},{"value":"/ contains the maximum number of bits will extend one element past the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428811,"byte_end":428883,"line_start":2607,"line_end":2607,"column_start":2,"column_end":74}},{"value":"/ cutoff that would occur if the slice began at the zeroth bit. Such a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428885,"byte_end":428957,"line_start":2608,"line_end":2608,"column_start":2,"column_end":74}},{"value":"/ slice must be manually constructed, but will not otherwise fail.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428959,"byte_end":429027,"line_start":2609,"line_end":2609,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429029,"byte_end":429032,"line_start":2610,"line_end":2610,"column_start":2,"column_end":5}},{"value":"/ |Type Bits|Max Elements (32-bit)| Max Elements (64-bit) |","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429034,"byte_end":429095,"line_start":2611,"line_end":2611,"column_start":2,"column_end":63}},{"value":"/ |--------:|--------------------:|----------------------:|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429097,"byte_end":429158,"line_start":2612,"line_end":2612,"column_start":2,"column_end":63}},{"value":"/ |        8|    `0x0400_0001`    |`0x0400_0000_0000_0001`|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429160,"byte_end":429221,"line_start":2613,"line_end":2613,"column_start":2,"column_end":63}},{"value":"/ |       16|    `0x0200_0001`    |`0x0200_0000_0000_0001`|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429223,"byte_end":429284,"line_start":2614,"line_end":2614,"column_start":2,"column_end":63}},{"value":"/ |       32|    `0x0100_0001`    |`0x0100_0000_0000_0001`|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429286,"byte_end":429347,"line_start":2615,"line_end":2615,"column_start":2,"column_end":63}},{"value":"/ |       64|    `0x0080_0001`    |`0x0080_0000_0000_0001`|","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":429349,"byte_end":429410,"line_start":2616,"line_end":2616,"column_start":2,"column_end":63}}]},{"kind":"Function","id":{"krate":0,"index":2326},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":431108,"byte_end":431132,"line_start":2681,"line_end":2681,"column_start":15,"column_end":39},"name":"from_raw_parts_unchecked","qualname":"::slice::from_raw_parts_unchecked","value":"pub unsafe fn from_raw_parts_unchecked<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> &'a BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts`], without checking the\n`len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts`]: crate::slice::from_raw_parts\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":430410,"byte_end":431093,"line_start":2658,"line_end":2680,"column_start":1,"column_end":4}}]},{"kind":"Function","id":{"krate":0,"index":2330},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":432010,"byte_end":432038,"line_start":2715,"line_end":2715,"column_start":15,"column_end":43},"name":"from_raw_parts_unchecked_mut","qualname":"::slice::from_raw_parts_unchecked_mut","value":"pub unsafe fn from_raw_parts_unchecked_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> &'a mut BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.","sig":null,"attributes":[{"value":"* Performs the same functionality as [`from_raw_parts_mut`], without checking\nthe `len` argument.\n\n# Parameters\n\n- `data`: A `BitPtr` to a dereferencable region of memory.\n- `len`: The length, in bits, of the region beginning at `*data`. This is not\n  checked against the maximum value, and is encoded directly into the bit-slice\n  reference. If it exceeds [`BitSlice::MAX_BITS`], it will be modulated to fit\n  (the high bits will be discarded).\n\n# Returns\n\nA `&mut BitSlice` reference starting at `data` and running for `len & MAX_BITS`\nbits.\n\n# Safety\n\nSee [`from_raw_parts_mut`].\n\n[`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS\n[`from_raw_parts_mut`]: crate::slice::from_raw_parts_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":431292,"byte_end":431995,"line_start":2692,"line_end":2714,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2472},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433910,"byte_end":433913,"line_start":88,"line_end":88,"column_start":9,"column_end":12},"name":"len","qualname":"<BitSlice<O, T>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of bits in the slice.","sig":null,"attributes":[{"value":"/ Returns the number of bits in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433590,"byte_end":433634,"line_start":73,"line_end":73,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433636,"byte_end":433639,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433641,"byte_end":433655,"line_start":75,"line_end":75,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433657,"byte_end":433660,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ [`slice::len`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.len)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433662,"byte_end":433750,"line_start":77,"line_end":77,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433752,"byte_end":433755,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433757,"byte_end":433771,"line_start":79,"line_end":79,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433773,"byte_end":433776,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433778,"byte_end":433789,"line_start":81,"line_end":81,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433791,"byte_end":433818,"line_start":82,"line_end":82,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433820,"byte_end":433823,"line_start":83,"line_end":83,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433825,"byte_end":433852,"line_start":84,"line_end":84,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(a.len(), 3);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433854,"byte_end":433881,"line_start":85,"line_end":85,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433883,"byte_end":433890,"line_start":86,"line_end":86,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433892,"byte_end":433901,"line_start":87,"line_end":87,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2473},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434299,"byte_end":434307,"line_start":107,"line_end":107,"column_start":9,"column_end":17},"name":"is_empty","qualname":"<BitSlice<O, T>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice has a length of 0.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice has a length of 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433963,"byte_end":434013,"line_start":92,"line_end":92,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434015,"byte_end":434018,"line_start":93,"line_end":93,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434020,"byte_end":434034,"line_start":94,"line_end":94,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434036,"byte_end":434039,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ [`slice::is_empty`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.is_empty)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434041,"byte_end":434139,"line_start":96,"line_end":96,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434141,"byte_end":434144,"line_start":97,"line_end":97,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434146,"byte_end":434160,"line_start":98,"line_end":98,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434162,"byte_end":434165,"line_start":99,"line_end":99,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434167,"byte_end":434178,"line_start":100,"line_end":100,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434180,"byte_end":434207,"line_start":101,"line_end":101,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434209,"byte_end":434212,"line_start":102,"line_end":102,"column_start":2,"column_end":5}},{"value":"/ let a = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434214,"byte_end":434241,"line_start":103,"line_end":103,"column_start":2,"column_end":29}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434243,"byte_end":434270,"line_start":104,"line_end":104,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434272,"byte_end":434279,"line_start":105,"line_end":105,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434281,"byte_end":434290,"line_start":106,"line_end":106,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2474},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434691,"byte_end":434696,"line_start":127,"line_end":127,"column_start":9,"column_end":14},"name":"first","qualname":"<BitSlice<O, T>>::first","value":"pub fn first(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434361,"byte_end":434426,"line_start":111,"line_end":111,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434428,"byte_end":434431,"line_start":112,"line_end":112,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434433,"byte_end":434447,"line_start":113,"line_end":113,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434449,"byte_end":434452,"line_start":114,"line_end":114,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434454,"byte_end":434468,"line_start":115,"line_end":115,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434470,"byte_end":434473,"line_start":116,"line_end":116,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434475,"byte_end":434486,"line_start":117,"line_end":117,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434488,"byte_end":434515,"line_start":118,"line_end":118,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434517,"byte_end":434520,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434522,"byte_end":434549,"line_start":120,"line_end":120,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.first().as_deref());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434551,"byte_end":434601,"line_start":121,"line_end":121,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434603,"byte_end":434606,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434608,"byte_end":434628,"line_start":123,"line_end":123,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.first());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434630,"byte_end":434662,"line_start":124,"line_end":124,"column_start":2,"column_end":34}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434664,"byte_end":434671,"line_start":125,"line_end":125,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434673,"byte_end":434682,"line_start":126,"line_end":126,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2475},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435533,"byte_end":435542,"line_start":160,"line_end":160,"column_start":9,"column_end":18},"name":"first_mut","qualname":"<BitSlice<O, T>>::first_mut","value":"pub fn first_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the first bit of the slice, or `None`\n if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the first bit of the slice, or `None`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434756,"byte_end":434826,"line_start":131,"line_end":131,"column_start":2,"column_end":72}},{"value":"/ if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434828,"byte_end":434847,"line_start":132,"line_end":132,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434849,"byte_end":434852,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434854,"byte_end":434868,"line_start":134,"line_end":134,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434870,"byte_end":434873,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ [`slice::first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.first_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434875,"byte_end":434975,"line_start":136,"line_end":136,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434977,"byte_end":434980,"line_start":137,"line_end":137,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":434982,"byte_end":435003,"line_start":138,"line_end":138,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435005,"byte_end":435008,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435010,"byte_end":435081,"line_start":140,"line_end":140,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435083,"byte_end":435157,"line_start":141,"line_end":141,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435159,"byte_end":435232,"line_start":142,"line_end":142,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435234,"byte_end":435241,"line_start":143,"line_end":143,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435243,"byte_end":435246,"line_start":144,"line_end":144,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435248,"byte_end":435262,"line_start":145,"line_end":145,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435264,"byte_end":435267,"line_start":146,"line_end":146,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435269,"byte_end":435280,"line_start":147,"line_end":147,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435282,"byte_end":435309,"line_start":148,"line_end":148,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435311,"byte_end":435314,"line_start":149,"line_end":149,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435316,"byte_end":435347,"line_start":150,"line_end":150,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435349,"byte_end":435352,"line_start":151,"line_end":151,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut first) = x.first_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435354,"byte_end":435398,"line_start":152,"line_end":152,"column_start":2,"column_end":46}},{"value":"/   *first = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435400,"byte_end":435420,"line_start":153,"line_end":153,"column_start":2,"column_end":22}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435422,"byte_end":435427,"line_start":154,"line_end":154,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435429,"byte_end":435463,"line_start":155,"line_end":155,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435465,"byte_end":435472,"line_start":156,"line_end":156,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435474,"byte_end":435477,"line_start":157,"line_end":157,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435479,"byte_end":435513,"line_start":158,"line_end":158,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435515,"byte_end":435524,"line_start":159,"line_end":159,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2476},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436123,"byte_end":436134,"line_start":185,"line_end":185,"column_start":9,"column_end":20},"name":"split_first","qualname":"<BitSlice<O, T>>::split_first","value":"pub fn split_first(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435608,"byte_end":435675,"line_start":164,"line_end":164,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435677,"byte_end":435703,"line_start":165,"line_end":165,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435705,"byte_end":435708,"line_start":166,"line_end":166,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435710,"byte_end":435724,"line_start":167,"line_end":167,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435726,"byte_end":435729,"line_start":168,"line_end":168,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435731,"byte_end":435828,"line_start":169,"line_end":169,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435830,"byte_end":435833,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435835,"byte_end":435849,"line_start":171,"line_end":171,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435851,"byte_end":435854,"line_start":172,"line_end":172,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435856,"byte_end":435867,"line_start":173,"line_end":173,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435869,"byte_end":435896,"line_start":174,"line_end":174,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435898,"byte_end":435901,"line_start":175,"line_end":175,"column_start":2,"column_end":5}},{"value":"/ let x = bits![1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435903,"byte_end":435930,"line_start":176,"line_end":176,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435932,"byte_end":435935,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ if let Some((first, rest)) = x.split_first() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435937,"byte_end":435987,"line_start":178,"line_end":178,"column_start":2,"column_end":52}},{"value":"/   assert_eq!(first, &true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":435989,"byte_end":436020,"line_start":179,"line_end":179,"column_start":2,"column_end":33}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436022,"byte_end":436058,"line_start":180,"line_end":180,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436060,"byte_end":436065,"line_start":181,"line_end":181,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436067,"byte_end":436094,"line_start":182,"line_end":182,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436096,"byte_end":436103,"line_start":183,"line_end":183,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436105,"byte_end":436114,"line_start":184,"line_end":184,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2477},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437532,"byte_end":437547,"line_start":233,"line_end":233,"column_start":9,"column_end":24},"name":"split_first_mut","qualname":"<BitSlice<O, T>>::split_first_mut","value":"pub fn split_first_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the first and all the rest of the bits of the slice, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436342,"byte_end":436409,"line_start":195,"line_end":195,"column_start":2,"column_end":69}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436411,"byte_end":436437,"line_start":196,"line_end":196,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436439,"byte_end":436442,"line_start":197,"line_end":197,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436444,"byte_end":436458,"line_start":198,"line_end":198,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436460,"byte_end":436463,"line_start":199,"line_end":199,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_first_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#split_first_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436465,"byte_end":436570,"line_start":200,"line_end":200,"column_start":2,"column_end":107}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436572,"byte_end":436575,"line_start":201,"line_end":201,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436577,"byte_end":436598,"line_start":202,"line_end":202,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436600,"byte_end":436603,"line_start":203,"line_end":203,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436605,"byte_end":436676,"line_start":204,"line_end":204,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436678,"byte_end":436752,"line_start":205,"line_end":205,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436754,"byte_end":436827,"line_start":206,"line_end":206,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436829,"byte_end":436836,"line_start":207,"line_end":207,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436838,"byte_end":436841,"line_start":208,"line_end":208,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436843,"byte_end":436915,"line_start":209,"line_end":209,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436917,"byte_end":436990,"line_start":210,"line_end":210,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":436992,"byte_end":437026,"line_start":211,"line_end":211,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437028,"byte_end":437031,"line_start":212,"line_end":212,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437033,"byte_end":437047,"line_start":213,"line_end":213,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437049,"byte_end":437052,"line_start":214,"line_end":214,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437054,"byte_end":437065,"line_start":215,"line_end":215,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437067,"byte_end":437094,"line_start":216,"line_end":216,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437096,"byte_end":437099,"line_start":217,"line_end":217,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437101,"byte_end":437132,"line_start":218,"line_end":218,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437134,"byte_end":437137,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut first, rest)) = x.split_first_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437139,"byte_end":437197,"line_start":220,"line_end":220,"column_start":2,"column_end":60}},{"value":"/   *first = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437199,"byte_end":437219,"line_start":221,"line_end":221,"column_start":2,"column_end":22}},{"value":"/   rest.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437221,"byte_end":437245,"line_start":222,"line_end":222,"column_start":2,"column_end":26}},{"value":"/   rest.set(1, false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437247,"byte_end":437272,"line_start":223,"line_end":223,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437274,"byte_end":437279,"line_start":224,"line_end":224,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437281,"byte_end":437315,"line_start":225,"line_end":225,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437317,"byte_end":437324,"line_start":226,"line_end":226,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437326,"byte_end":437329,"line_start":227,"line_end":227,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437331,"byte_end":437365,"line_start":228,"line_end":228,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437479,"byte_end":437488,"line_start":231,"line_end":231,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437490,"byte_end":437523,"line_start":232,"line_end":232,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2478},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438315,"byte_end":438325,"line_start":266,"line_end":266,"column_start":9,"column_end":19},"name":"split_last","qualname":"<BitSlice<O, T>>::split_last","value":"pub fn split_last(&Self) -> Option<(BitRef<, Const, O, T>, &Self)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437799,"byte_end":437865,"line_start":245,"line_end":245,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437867,"byte_end":437893,"line_start":246,"line_end":246,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437895,"byte_end":437898,"line_start":247,"line_end":247,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437900,"byte_end":437914,"line_start":248,"line_end":248,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437916,"byte_end":437919,"line_start":249,"line_end":249,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":437921,"byte_end":438023,"line_start":250,"line_end":250,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438025,"byte_end":438028,"line_start":251,"line_end":251,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438030,"byte_end":438044,"line_start":252,"line_end":252,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438046,"byte_end":438049,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438051,"byte_end":438062,"line_start":254,"line_end":254,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438064,"byte_end":438091,"line_start":255,"line_end":255,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438093,"byte_end":438096,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438098,"byte_end":438125,"line_start":257,"line_end":257,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438127,"byte_end":438130,"line_start":258,"line_end":258,"column_start":2,"column_end":5}},{"value":"/ if let Some((last, rest)) = x.split_last() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438132,"byte_end":438180,"line_start":259,"line_end":259,"column_start":2,"column_end":50}},{"value":"/   assert_eq!(last, &true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438182,"byte_end":438212,"line_start":260,"line_end":260,"column_start":2,"column_end":32}},{"value":"/   assert_eq!(rest, bits![0; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438214,"byte_end":438250,"line_start":261,"line_end":261,"column_start":2,"column_end":38}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438252,"byte_end":438257,"line_start":262,"line_end":262,"column_start":2,"column_end":7}},{"value":"/ # fn end_the_block() {}","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438259,"byte_end":438286,"line_start":263,"line_end":263,"column_start":2,"column_end":29}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438288,"byte_end":438295,"line_start":264,"line_end":264,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438297,"byte_end":438306,"line_start":265,"line_end":265,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2479},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439748,"byte_end":439762,"line_start":314,"line_end":314,"column_start":9,"column_end":23},"name":"split_last_mut","qualname":"<BitSlice<O, T>>::split_last_mut","value":"pub fn split_last_mut(&mut Self)\n-> Option<(BitRef<, Mut, O, T::Alias>, &mut BitSlice<O, T::Alias>)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last and all the rest of the bits of the slice, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last and all the rest of the bits of the slice, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438553,"byte_end":438619,"line_start":276,"line_end":276,"column_start":2,"column_end":68}},{"value":"/ `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438621,"byte_end":438647,"line_start":277,"line_end":277,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438649,"byte_end":438652,"line_start":278,"line_end":278,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438654,"byte_end":438668,"line_start":279,"line_end":279,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438670,"byte_end":438673,"line_start":280,"line_end":280,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_last_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438675,"byte_end":438785,"line_start":281,"line_end":281,"column_start":2,"column_end":112}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438787,"byte_end":438790,"line_start":282,"line_end":282,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438792,"byte_end":438813,"line_start":283,"line_end":283,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438815,"byte_end":438818,"line_start":284,"line_end":284,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438820,"byte_end":438891,"line_start":285,"line_end":285,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438893,"byte_end":438967,"line_start":286,"line_end":286,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":438969,"byte_end":439042,"line_start":287,"line_end":287,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439044,"byte_end":439051,"line_start":288,"line_end":288,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439053,"byte_end":439056,"line_start":289,"line_end":289,"column_start":2,"column_end":5}},{"value":"/ Because the references are permitted to use the same memory address,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439058,"byte_end":439130,"line_start":290,"line_end":290,"column_start":2,"column_end":74}},{"value":"/ they are marked as aliasing in order to satisfy Rust’s requirements","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439132,"byte_end":439205,"line_start":291,"line_end":291,"column_start":2,"column_end":73}},{"value":"/ about freedom from data races.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439207,"byte_end":439241,"line_start":292,"line_end":292,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439243,"byte_end":439246,"line_start":293,"line_end":293,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439248,"byte_end":439262,"line_start":294,"line_end":294,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439264,"byte_end":439267,"line_start":295,"line_end":295,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439269,"byte_end":439280,"line_start":296,"line_end":296,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439282,"byte_end":439309,"line_start":297,"line_end":297,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439311,"byte_end":439314,"line_start":298,"line_end":298,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439316,"byte_end":439347,"line_start":299,"line_end":299,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439349,"byte_end":439352,"line_start":300,"line_end":300,"column_start":2,"column_end":5}},{"value":"/ if let Some((mut last, rest)) = x.split_last_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439354,"byte_end":439410,"line_start":301,"line_end":301,"column_start":2,"column_end":58}},{"value":"/   *last = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439412,"byte_end":439431,"line_start":302,"line_end":302,"column_start":2,"column_end":21}},{"value":"/   rest.set(0, false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439433,"byte_end":439458,"line_start":303,"line_end":303,"column_start":2,"column_end":27}},{"value":"/   rest.set(1, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439460,"byte_end":439484,"line_start":304,"line_end":304,"column_start":2,"column_end":26}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439486,"byte_end":439491,"line_start":305,"line_end":305,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439493,"byte_end":439527,"line_start":306,"line_end":306,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439529,"byte_end":439536,"line_start":307,"line_end":307,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439538,"byte_end":439541,"line_start":308,"line_end":308,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439543,"byte_end":439581,"line_start":309,"line_end":309,"column_start":2,"column_end":40}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439695,"byte_end":439704,"line_start":312,"line_end":312,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":439706,"byte_end":439739,"line_start":313,"line_end":313,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2480},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440446,"byte_end":440450,"line_start":344,"line_end":344,"column_start":9,"column_end":13},"name":"last","qualname":"<BitSlice<O, T>>::last","value":"pub fn last(&Self) -> Option<BitRef<, Const, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns the last bit of the slice, or `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns the last bit of the slice, or `None` if it is empty.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440022,"byte_end":440086,"line_start":326,"line_end":326,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440088,"byte_end":440091,"line_start":327,"line_end":327,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440093,"byte_end":440107,"line_start":328,"line_end":328,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440109,"byte_end":440112,"line_start":329,"line_end":329,"column_start":2,"column_end":5}},{"value":"/ [`slice::last`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440114,"byte_end":440204,"line_start":330,"line_end":330,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440206,"byte_end":440209,"line_start":331,"line_end":331,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440211,"byte_end":440225,"line_start":332,"line_end":332,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440227,"byte_end":440230,"line_start":333,"line_end":333,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440232,"byte_end":440243,"line_start":334,"line_end":334,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440245,"byte_end":440272,"line_start":335,"line_end":335,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440274,"byte_end":440277,"line_start":336,"line_end":336,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440279,"byte_end":440306,"line_start":337,"line_end":337,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.last().as_deref());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440308,"byte_end":440357,"line_start":338,"line_end":338,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440359,"byte_end":440362,"line_start":339,"line_end":339,"column_start":2,"column_end":5}},{"value":"/ let w = bits![];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440364,"byte_end":440384,"line_start":340,"line_end":340,"column_start":2,"column_end":22}},{"value":"/ assert_eq!(None, w.last());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440386,"byte_end":440417,"line_start":341,"line_end":341,"column_start":2,"column_end":33}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440419,"byte_end":440426,"line_start":342,"line_end":342,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440428,"byte_end":440437,"line_start":343,"line_end":343,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2481},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441331,"byte_end":441339,"line_start":379,"line_end":379,"column_start":9,"column_end":17},"name":"last_mut","qualname":"<BitSlice<O, T>>::last_mut","value":"pub fn last_mut(&mut Self) -> Option<BitRef<, Mut, O, T>>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable pointer to the last bit in the slice.","sig":null,"attributes":[{"value":"/ Returns a mutable pointer to the last bit in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440591,"byte_end":440650,"line_start":351,"line_end":351,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440652,"byte_end":440655,"line_start":352,"line_end":352,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440657,"byte_end":440671,"line_start":353,"line_end":353,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440673,"byte_end":440676,"line_start":354,"line_end":354,"column_start":2,"column_end":5}},{"value":"/ [`slice::last_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.last_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440678,"byte_end":440776,"line_start":355,"line_end":355,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440778,"byte_end":440781,"line_start":356,"line_end":356,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440783,"byte_end":440804,"line_start":357,"line_end":357,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440806,"byte_end":440809,"line_start":358,"line_end":358,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440811,"byte_end":440882,"line_start":359,"line_end":359,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440884,"byte_end":440958,"line_start":360,"line_end":360,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":440960,"byte_end":441033,"line_start":361,"line_end":361,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441035,"byte_end":441042,"line_start":362,"line_end":362,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441044,"byte_end":441047,"line_start":363,"line_end":363,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441049,"byte_end":441063,"line_start":364,"line_end":364,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441065,"byte_end":441068,"line_start":365,"line_end":365,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441070,"byte_end":441081,"line_start":366,"line_end":366,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441083,"byte_end":441110,"line_start":367,"line_end":367,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441112,"byte_end":441115,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441117,"byte_end":441148,"line_start":369,"line_end":369,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441150,"byte_end":441153,"line_start":370,"line_end":370,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut last) = x.last_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441155,"byte_end":441197,"line_start":371,"line_end":371,"column_start":2,"column_end":44}},{"value":"/   *last = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441199,"byte_end":441218,"line_start":372,"line_end":372,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441220,"byte_end":441225,"line_start":373,"line_end":373,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441227,"byte_end":441261,"line_start":374,"line_end":374,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441263,"byte_end":441270,"line_start":375,"line_end":375,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441272,"byte_end":441275,"line_start":376,"line_end":376,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441277,"byte_end":441311,"line_start":377,"line_end":377,"column_start":2,"column_end":36}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441313,"byte_end":441322,"line_start":378,"line_end":378,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2482},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442208,"byte_end":442211,"line_start":409,"line_end":409,"column_start":9,"column_end":12},"name":"get","qualname":"<BitSlice<O, T>>::get","value":"pub fn get<'a, I>(&'a Self, I) -> Option<I::Immut> where I: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice depending on the type of index.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice depending on the type of index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441486,"byte_end":441562,"line_start":386,"line_end":386,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441564,"byte_end":441567,"line_start":387,"line_end":387,"column_start":2,"column_end":5}},{"value":"/ - If given a position, returns a reference to the bit at that position","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441569,"byte_end":441643,"line_start":388,"line_end":388,"column_start":2,"column_end":76}},{"value":"/   or `None` if out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441645,"byte_end":441678,"line_start":389,"line_end":389,"column_start":2,"column_end":35}},{"value":"/ - If given a range, returns the subslice corresponding to that range, or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441680,"byte_end":441756,"line_start":390,"line_end":390,"column_start":2,"column_end":78}},{"value":"/   `None` if out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441758,"byte_end":441788,"line_start":391,"line_end":391,"column_start":2,"column_end":32}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441790,"byte_end":441793,"line_start":392,"line_end":392,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441795,"byte_end":441809,"line_start":393,"line_end":393,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441811,"byte_end":441814,"line_start":394,"line_end":394,"column_start":2,"column_end":5}},{"value":"/ [`slice::get`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441816,"byte_end":441904,"line_start":395,"line_end":395,"column_start":2,"column_end":90}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441906,"byte_end":441909,"line_start":396,"line_end":396,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441911,"byte_end":441925,"line_start":397,"line_end":397,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441927,"byte_end":441930,"line_start":398,"line_end":398,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441932,"byte_end":441943,"line_start":399,"line_end":399,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441945,"byte_end":441972,"line_start":400,"line_end":400,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441974,"byte_end":441977,"line_start":401,"line_end":401,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":441979,"byte_end":442006,"line_start":402,"line_end":402,"column_start":2,"column_end":29}},{"value":"/ assert_eq!(Some(&true), v.get(1).as_deref());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442008,"byte_end":442057,"line_start":403,"line_end":403,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(Some(bits![0, 1]), v.get(0 .. 2));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442059,"byte_end":442108,"line_start":404,"line_end":404,"column_start":2,"column_end":51}},{"value":"/ assert_eq!(None, v.get(3));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442110,"byte_end":442141,"line_start":405,"line_end":405,"column_start":2,"column_end":33}},{"value":"/ assert_eq!(None, v.get(0 .. 4));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442143,"byte_end":442179,"line_start":406,"line_end":406,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442181,"byte_end":442188,"line_start":407,"line_end":407,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442190,"byte_end":442199,"line_start":408,"line_end":408,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2485},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443168,"byte_end":443175,"line_start":444,"line_end":444,"column_start":9,"column_end":16},"name":"get_mut","qualname":"<BitSlice<O, T>>::get_mut","value":"pub fn get_mut<'a, I>(&'a mut Self, I) -> Option<I::Mut> where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice depending on the type\n of index (see [`.get()`]) or `None` if the index is out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice depending on the type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442318,"byte_end":442392,"line_start":414,"line_end":414,"column_start":2,"column_end":76}},{"value":"/ of index (see [`.get()`]) or `None` if the index is out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442394,"byte_end":442464,"line_start":415,"line_end":415,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442466,"byte_end":442469,"line_start":416,"line_end":416,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442471,"byte_end":442485,"line_start":417,"line_end":417,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442487,"byte_end":442490,"line_start":418,"line_end":418,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442492,"byte_end":442588,"line_start":419,"line_end":419,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442590,"byte_end":442593,"line_start":420,"line_end":420,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442595,"byte_end":442616,"line_start":421,"line_end":421,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442618,"byte_end":442621,"line_start":422,"line_end":422,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442623,"byte_end":442694,"line_start":423,"line_end":423,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442696,"byte_end":442770,"line_start":424,"line_end":424,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442772,"byte_end":442845,"line_start":425,"line_end":425,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442847,"byte_end":442854,"line_start":426,"line_end":426,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442856,"byte_end":442859,"line_start":427,"line_end":427,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442861,"byte_end":442875,"line_start":428,"line_end":428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442877,"byte_end":442880,"line_start":429,"line_end":429,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442882,"byte_end":442893,"line_start":430,"line_end":430,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442895,"byte_end":442922,"line_start":431,"line_end":431,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442924,"byte_end":442927,"line_start":432,"line_end":432,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442929,"byte_end":442960,"line_start":433,"line_end":433,"column_start":2,"column_end":33}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442962,"byte_end":442965,"line_start":434,"line_end":434,"column_start":2,"column_end":5}},{"value":"/ if let Some(mut bit) = x.get_mut(1) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":442967,"byte_end":443008,"line_start":435,"line_end":435,"column_start":2,"column_end":43}},{"value":"/   *bit = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443010,"byte_end":443028,"line_start":436,"line_end":436,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443030,"byte_end":443035,"line_start":437,"line_end":437,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443037,"byte_end":443071,"line_start":438,"line_end":438,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443073,"byte_end":443080,"line_start":439,"line_end":439,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443082,"byte_end":443085,"line_start":440,"line_end":440,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443087,"byte_end":443121,"line_start":441,"line_end":441,"column_start":2,"column_end":36}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443123,"byte_end":443148,"line_start":442,"line_end":442,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443150,"byte_end":443159,"line_start":443,"line_end":443,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2488},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444110,"byte_end":444123,"line_start":475,"line_end":475,"column_start":16,"column_end":29},"name":"get_unchecked","qualname":"<BitSlice<O, T>>::get_unchecked","value":"pub unsafe fn get_unchecked<'a, I>(&'a Self, I) -> I::Immut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to a bit or subslice, without doing bounds checking.","sig":null,"attributes":[{"value":"/ Returns a reference to a bit or subslice, without doing bounds checking.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443288,"byte_end":443364,"line_start":449,"line_end":449,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443366,"byte_end":443369,"line_start":450,"line_end":450,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443371,"byte_end":443447,"line_start":451,"line_end":451,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443449,"byte_end":443518,"line_start":452,"line_end":452,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see [`.get()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443520,"byte_end":443596,"line_start":453,"line_end":453,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443598,"byte_end":443601,"line_start":454,"line_end":454,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443603,"byte_end":443617,"line_start":455,"line_end":455,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443619,"byte_end":443622,"line_start":456,"line_end":456,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443624,"byte_end":443732,"line_start":457,"line_end":457,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443734,"byte_end":443737,"line_start":458,"line_end":458,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443739,"byte_end":443753,"line_start":459,"line_end":459,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443755,"byte_end":443758,"line_start":460,"line_end":460,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443760,"byte_end":443771,"line_start":461,"line_end":461,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443773,"byte_end":443800,"line_start":462,"line_end":462,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443802,"byte_end":443805,"line_start":463,"line_end":463,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443807,"byte_end":443834,"line_start":464,"line_end":464,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443836,"byte_end":443839,"line_start":465,"line_end":465,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443841,"byte_end":443853,"line_start":466,"line_end":466,"column_start":2,"column_end":14}},{"value":"/   assert_eq!(x.get_unchecked(1), &true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443855,"byte_end":443899,"line_start":467,"line_end":467,"column_start":2,"column_end":46}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443901,"byte_end":443906,"line_start":468,"line_end":468,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443908,"byte_end":443915,"line_start":469,"line_end":469,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443917,"byte_end":443920,"line_start":470,"line_end":470,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":443922,"byte_end":444018,"line_start":471,"line_end":471,"column_start":2,"column_end":98}},{"value":"/ [`.get()`]: Self::get","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444020,"byte_end":444045,"line_start":472,"line_end":472,"column_start":2,"column_end":27}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444047,"byte_end":444056,"line_start":473,"line_end":473,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444058,"byte_end":444094,"line_start":474,"line_end":474,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2491},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445422,"byte_end":445439,"line_start":517,"line_end":517,"column_start":16,"column_end":33},"name":"get_unchecked_mut","qualname":"<BitSlice<O, T>>::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut<'a, I>(&'a mut Self, I) -> I::Mut where\nI: BitSliceIndex","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to a bit or subslice, without doing bounds\n checking.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to a bit or subslice, without doing bounds","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444232,"byte_end":444306,"line_start":480,"line_end":480,"column_start":2,"column_end":76}},{"value":"/ checking.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444308,"byte_end":444321,"line_start":481,"line_end":481,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444323,"byte_end":444326,"line_start":482,"line_end":482,"column_start":2,"column_end":5}},{"value":"/ This is generally not recommended; use with caution! Calling this method","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444328,"byte_end":444404,"line_start":483,"line_end":483,"column_start":2,"column_end":78}},{"value":"/ with an out-of-bounds index is *[undefined behavior]* even if the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444406,"byte_end":444475,"line_start":484,"line_end":484,"column_start":2,"column_end":71}},{"value":"/ resulting reference is not used. For a safe alternative, see","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444477,"byte_end":444541,"line_start":485,"line_end":485,"column_start":2,"column_end":66}},{"value":"/ [`.get_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444543,"byte_end":444562,"line_start":486,"line_end":486,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444564,"byte_end":444567,"line_start":487,"line_end":487,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444569,"byte_end":444583,"line_start":488,"line_end":488,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444585,"byte_end":444588,"line_start":489,"line_end":489,"column_start":2,"column_end":5}},{"value":"/ [`slice::get_unchecked_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.get_unchecked_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444590,"byte_end":444706,"line_start":490,"line_end":490,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444708,"byte_end":444711,"line_start":491,"line_end":491,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444713,"byte_end":444734,"line_start":492,"line_end":492,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444736,"byte_end":444739,"line_start":493,"line_end":493,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444741,"byte_end":444812,"line_start":494,"line_end":494,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444814,"byte_end":444888,"line_start":495,"line_end":495,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444890,"byte_end":444963,"line_start":496,"line_end":496,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444965,"byte_end":444972,"line_start":497,"line_end":497,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444974,"byte_end":444977,"line_start":498,"line_end":498,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444979,"byte_end":444993,"line_start":499,"line_end":499,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":444995,"byte_end":444998,"line_start":500,"line_end":500,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445000,"byte_end":445011,"line_start":501,"line_end":501,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445013,"byte_end":445040,"line_start":502,"line_end":502,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445042,"byte_end":445045,"line_start":503,"line_end":503,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445047,"byte_end":445075,"line_start":504,"line_end":504,"column_start":2,"column_end":30}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445077,"byte_end":445089,"line_start":505,"line_end":505,"column_start":2,"column_end":14}},{"value":"/   let mut bit = x.get_unchecked_mut(1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445091,"byte_end":445134,"line_start":506,"line_end":506,"column_start":2,"column_end":45}},{"value":"/   *bit = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445136,"byte_end":445154,"line_start":507,"line_end":507,"column_start":2,"column_end":20}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445156,"byte_end":445161,"line_start":508,"line_end":508,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![0, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445163,"byte_end":445197,"line_start":509,"line_end":509,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445199,"byte_end":445206,"line_start":510,"line_end":510,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445208,"byte_end":445211,"line_start":511,"line_end":511,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445213,"byte_end":445247,"line_start":512,"line_end":512,"column_start":2,"column_end":36}},{"value":"/ [`get_mut`]: Self::get_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445249,"byte_end":445279,"line_start":513,"line_end":513,"column_start":2,"column_end":32}},{"value":"/ [undefined behavior]: ../../reference/behavior-considered-undefined.html","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445281,"byte_end":445357,"line_start":514,"line_end":514,"column_start":2,"column_end":78}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445359,"byte_end":445368,"line_start":515,"line_end":515,"column_start":2,"column_end":11}},{"value":"allow(clippy :: missing_safety_doc)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445370,"byte_end":445406,"line_start":516,"line_end":516,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":2494},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445692,"byte_end":445698,"line_start":526,"line_end":526,"column_start":9,"column_end":15},"name":"as_ptr","qualname":"<BitSlice<O, T>>::as_ptr","value":"pub fn as_ptr(&Self) -> BitPtr<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445570,"byte_end":445587,"line_start":523,"line_end":523,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445589,"byte_end":445619,"line_start":524,"line_end":524,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr` to access the region pointer\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445621,"byte_end":445683,"line_start":525,"line_end":525,"column_start":2,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2495},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445900,"byte_end":445912,"line_start":534,"line_end":534,"column_start":9,"column_end":21},"name":"as_ptr_range","qualname":"<BitSlice<O, T>>::as_ptr_range","value":"pub fn as_ptr_range(&Self) -> BitPtrRange<Const, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445771,"byte_end":445788,"line_start":531,"line_end":531,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445790,"byte_end":445820,"line_start":532,"line_end":532,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445822,"byte_end":445891,"line_start":533,"line_end":533,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2496},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446122,"byte_end":446132,"line_start":542,"line_end":542,"column_start":9,"column_end":19},"name":"as_mut_ptr","qualname":"<BitSlice<O, T>>::as_mut_ptr","value":"pub fn as_mut_ptr(&mut Self) -> BitPtr<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":445996,"byte_end":446013,"line_start":539,"line_end":539,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446015,"byte_end":446045,"line_start":540,"line_end":540,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr` to access the region pointer\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446047,"byte_end":446113,"line_start":541,"line_end":541,"column_start":2,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":2497},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446344,"byte_end":446360,"line_start":550,"line_end":550,"column_start":9,"column_end":25},"name":"as_mut_ptr_range","qualname":"<BitSlice<O, T>>::as_mut_ptr_range","value":"pub fn as_mut_ptr_range(&mut Self) -> BitPtrRange<Mut, O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446211,"byte_end":446228,"line_start":547,"line_end":547,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446230,"byte_end":446260,"line_start":548,"line_end":548,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_mut_bitptr_range` to access the region pointers\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446262,"byte_end":446335,"line_start":549,"line_end":549,"column_start":2,"column_end":75}}]},{"kind":"Method","id":{"krate":0,"index":2498},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446955,"byte_end":446959,"line_start":579,"line_end":579,"column_start":9,"column_end":13},"name":"swap","qualname":"<BitSlice<O, T>>::swap","value":"pub fn swap(&mut Self, usize, usize)","parent":null,"children":[],"decl_id":null,"docs":" Swaps two bits in the slice.","sig":null,"attributes":[{"value":"/ Swaps two bits in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446434,"byte_end":446466,"line_start":554,"line_end":554,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446468,"byte_end":446471,"line_start":555,"line_end":555,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446473,"byte_end":446487,"line_start":556,"line_end":556,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446489,"byte_end":446492,"line_start":557,"line_end":557,"column_start":2,"column_end":5}},{"value":"/ [`slice::swap`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.swap)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446494,"byte_end":446584,"line_start":558,"line_end":558,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446586,"byte_end":446589,"line_start":559,"line_end":559,"column_start":2,"column_end":5}},{"value":"/ # Arguments","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446591,"byte_end":446606,"line_start":560,"line_end":560,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446608,"byte_end":446611,"line_start":561,"line_end":561,"column_start":2,"column_end":5}},{"value":"/ - `a`: The index of the first bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446613,"byte_end":446650,"line_start":562,"line_end":562,"column_start":2,"column_end":39}},{"value":"/ - `b`: The index of the second bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446652,"byte_end":446690,"line_start":563,"line_end":563,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446692,"byte_end":446695,"line_start":564,"line_end":564,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446697,"byte_end":446709,"line_start":565,"line_end":565,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446711,"byte_end":446714,"line_start":566,"line_end":566,"column_start":2,"column_end":5}},{"value":"/ Panics if `a` or `b` are out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446716,"byte_end":446759,"line_start":567,"line_end":567,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446761,"byte_end":446764,"line_start":568,"line_end":568,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446766,"byte_end":446780,"line_start":569,"line_end":569,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446782,"byte_end":446785,"line_start":570,"line_end":570,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446787,"byte_end":446798,"line_start":571,"line_end":571,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446800,"byte_end":446827,"line_start":572,"line_end":572,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446829,"byte_end":446832,"line_start":573,"line_end":573,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446834,"byte_end":446868,"line_start":574,"line_end":574,"column_start":2,"column_end":36}},{"value":"/ v.swap(1, 3);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446870,"byte_end":446887,"line_start":575,"line_end":575,"column_start":2,"column_end":19}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446889,"byte_end":446926,"line_start":576,"line_end":576,"column_start":2,"column_end":39}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446928,"byte_end":446935,"line_start":577,"line_end":577,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":446937,"byte_end":446946,"line_start":578,"line_end":578,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2499},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447466,"byte_end":447473,"line_start":603,"line_end":603,"column_start":9,"column_end":16},"name":"reverse","qualname":"<BitSlice<O, T>>::reverse","value":"pub fn reverse(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Reverses the order of bits in the slice, in place.","sig":null,"attributes":[{"value":"/ Reverses the order of bits in the slice, in place.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447099,"byte_end":447153,"line_start":587,"line_end":587,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447155,"byte_end":447158,"line_start":588,"line_end":588,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447160,"byte_end":447174,"line_start":589,"line_end":589,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447176,"byte_end":447179,"line_start":590,"line_end":590,"column_start":2,"column_end":5}},{"value":"/ [`slice::reverse`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.reverse)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447181,"byte_end":447277,"line_start":591,"line_end":591,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447279,"byte_end":447282,"line_start":592,"line_end":592,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447284,"byte_end":447298,"line_start":593,"line_end":593,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447300,"byte_end":447303,"line_start":594,"line_end":594,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447305,"byte_end":447316,"line_start":595,"line_end":595,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447318,"byte_end":447345,"line_start":596,"line_end":596,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447347,"byte_end":447350,"line_start":597,"line_end":597,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447352,"byte_end":447383,"line_start":598,"line_end":598,"column_start":2,"column_end":33}},{"value":"/ v.reverse();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447385,"byte_end":447401,"line_start":599,"line_end":599,"column_start":2,"column_end":18}},{"value":"/ assert_eq!(v, bits![1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447403,"byte_end":447437,"line_start":600,"line_end":600,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447439,"byte_end":447446,"line_start":601,"line_end":601,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":447448,"byte_end":447457,"line_start":602,"line_end":602,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2500},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449805,"byte_end":449809,"line_start":672,"line_end":672,"column_start":9,"column_end":13},"name":"iter","qualname":"<BitSlice<O, T>>::iter","value":"pub fn iter(&Self) -> Iter<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448565,"byte_end":448604,"line_start":635,"line_end":635,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448606,"byte_end":448609,"line_start":636,"line_end":636,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448611,"byte_end":448625,"line_start":637,"line_end":637,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448627,"byte_end":448630,"line_start":638,"line_end":638,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448632,"byte_end":448722,"line_start":639,"line_end":639,"column_start":2,"column_end":92}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448724,"byte_end":448727,"line_start":640,"line_end":640,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448729,"byte_end":448750,"line_start":641,"line_end":641,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448752,"byte_end":448755,"line_start":642,"line_end":642,"column_start":2,"column_end":5}},{"value":"/ This iterator yields [`BitRef`] proxy references, rather than `&bool`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448757,"byte_end":448830,"line_start":643,"line_end":643,"column_start":2,"column_end":75}},{"value":"/ ordinary references. It does so in order to promote consistency in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448832,"byte_end":448906,"line_start":644,"line_end":644,"column_start":2,"column_end":76}},{"value":"/ crate, and make switching between immutable and mutable single-bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448908,"byte_end":448978,"line_start":645,"line_end":645,"column_start":2,"column_end":72}},{"value":"/ access easier.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":448980,"byte_end":448998,"line_start":646,"line_end":646,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449000,"byte_end":449003,"line_start":647,"line_end":647,"column_start":2,"column_end":5}},{"value":"/ The produced iterator has a [`by_ref`] adapter that yields `&bool`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449005,"byte_end":449075,"line_start":648,"line_end":648,"column_start":2,"column_end":72}},{"value":"/ references, and a [`by_val`] adapter that yields `bool` values. Use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449077,"byte_end":449148,"line_start":649,"line_end":649,"column_start":2,"column_end":73}},{"value":"/ these methods to fit this iterator into APIs that expect ordinary `bool`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449150,"byte_end":449226,"line_start":650,"line_end":650,"column_start":2,"column_end":78}},{"value":"/ inputs.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449228,"byte_end":449239,"line_start":651,"line_end":651,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449241,"byte_end":449244,"line_start":652,"line_end":652,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449246,"byte_end":449260,"line_start":653,"line_end":653,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449262,"byte_end":449265,"line_start":654,"line_end":654,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449267,"byte_end":449278,"line_start":655,"line_end":655,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449280,"byte_end":449307,"line_start":656,"line_end":656,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449309,"byte_end":449312,"line_start":657,"line_end":657,"column_start":2,"column_end":5}},{"value":"/ let x = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449314,"byte_end":449341,"line_start":658,"line_end":658,"column_start":2,"column_end":29}},{"value":"/ let mut iterator = x.iter();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449343,"byte_end":449375,"line_start":659,"line_end":659,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449377,"byte_end":449380,"line_start":660,"line_end":660,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449382,"byte_end":449439,"line_start":661,"line_end":661,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&false));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449441,"byte_end":449498,"line_start":662,"line_end":662,"column_start":2,"column_end":59}},{"value":"/ assert_eq!(iterator.next().as_deref(), Some(&true));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449500,"byte_end":449556,"line_start":663,"line_end":663,"column_start":2,"column_end":58}},{"value":"/ assert_eq!(iterator.next().as_deref(), None);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449558,"byte_end":449607,"line_start":664,"line_end":664,"column_start":2,"column_end":51}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449609,"byte_end":449616,"line_start":665,"line_end":665,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449618,"byte_end":449621,"line_start":666,"line_end":666,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449623,"byte_end":449657,"line_start":667,"line_end":667,"column_start":2,"column_end":36}},{"value":"/ [`by_ref`]: crate::slice::Iter::by_ref","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449659,"byte_end":449701,"line_start":668,"line_end":668,"column_start":2,"column_end":44}},{"value":"/ [`by_val`]: crate::slice::Iter::by_val","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449703,"byte_end":449745,"line_start":669,"line_end":669,"column_start":2,"column_end":44}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449747,"byte_end":449764,"line_start":670,"line_end":670,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449766,"byte_end":449796,"line_start":671,"line_end":671,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2501},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451043,"byte_end":451051,"line_start":712,"line_end":712,"column_start":9,"column_end":17},"name":"iter_mut","qualname":"<BitSlice<O, T>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each bit.","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each bit.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449856,"byte_end":449911,"line_start":676,"line_end":676,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449913,"byte_end":449916,"line_start":677,"line_end":677,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449918,"byte_end":449932,"line_start":678,"line_end":678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449934,"byte_end":449937,"line_start":679,"line_end":679,"column_start":2,"column_end":5}},{"value":"/ [`slice::iter_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.iter_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":449939,"byte_end":450037,"line_start":680,"line_end":680,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450039,"byte_end":450042,"line_start":681,"line_end":681,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450044,"byte_end":450065,"line_start":682,"line_end":682,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450067,"byte_end":450070,"line_start":683,"line_end":683,"column_start":2,"column_end":5}},{"value":"/ This crate cannot manifest `&mut bool` references, and must use the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450072,"byte_end":450143,"line_start":684,"line_end":684,"column_start":2,"column_end":73}},{"value":"/ [`BitRef`] proxy type where `&mut bool` exists in the standard library","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450145,"byte_end":450219,"line_start":685,"line_end":685,"column_start":2,"column_end":76}},{"value":"/ API. The proxy value must be bound as `mut` in order to write through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450221,"byte_end":450294,"line_start":686,"line_end":686,"column_start":2,"column_end":75}},{"value":"/ it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450296,"byte_end":450303,"line_start":687,"line_end":687,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450305,"byte_end":450308,"line_start":688,"line_end":688,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450310,"byte_end":450383,"line_start":689,"line_end":689,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450385,"byte_end":450455,"line_start":690,"line_end":690,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450457,"byte_end":450526,"line_start":691,"line_end":691,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450528,"byte_end":450604,"line_start":692,"line_end":692,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450606,"byte_end":450661,"line_start":693,"line_end":693,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450663,"byte_end":450666,"line_start":694,"line_end":694,"column_start":2,"column_end":5}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450668,"byte_end":450671,"line_start":695,"line_end":695,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450673,"byte_end":450687,"line_start":696,"line_end":696,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450689,"byte_end":450692,"line_start":697,"line_end":697,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450694,"byte_end":450705,"line_start":698,"line_end":698,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450707,"byte_end":450734,"line_start":699,"line_end":699,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450736,"byte_end":450739,"line_start":700,"line_end":700,"column_start":2,"column_end":5}},{"value":"/ let x = bits![mut 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450741,"byte_end":450772,"line_start":701,"line_end":701,"column_start":2,"column_end":33}},{"value":"/ for mut bit in x.iter_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450774,"byte_end":450807,"line_start":702,"line_end":702,"column_start":2,"column_end":35}},{"value":"/   *bit = !*bit;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450809,"byte_end":450828,"line_start":703,"line_end":703,"column_start":2,"column_end":21}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450830,"byte_end":450835,"line_start":704,"line_end":704,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(x, bits![1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450837,"byte_end":450871,"line_start":705,"line_end":705,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450873,"byte_end":450880,"line_start":706,"line_end":706,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450882,"byte_end":450885,"line_start":707,"line_end":707,"column_start":2,"column_end":5}},{"value":"/ [`BitRef`]: crate::ptr::BitRef","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450887,"byte_end":450921,"line_start":708,"line_end":708,"column_start":2,"column_end":36}},{"value":"/ [`.remove_alias()`]: crate::slice::IterMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450923,"byte_end":450983,"line_start":709,"line_end":709,"column_start":2,"column_end":62}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":450985,"byte_end":451002,"line_start":710,"line_end":710,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451004,"byte_end":451034,"line_start":711,"line_end":711,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2502},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452035,"byte_end":452042,"line_start":751,"line_end":751,"column_start":9,"column_end":16},"name":"windows","qualname":"<BitSlice<O, T>>::windows","value":"pub fn windows(&Self, usize) -> Windows<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over all contiguous windows of length `size`. The\n windows overlap. If the slice is shorter than `size`, the iterator\n returns no values.","sig":null,"attributes":[{"value":"/ Returns an iterator over all contiguous windows of length `size`. The","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451108,"byte_end":451181,"line_start":716,"line_end":716,"column_start":2,"column_end":75}},{"value":"/ windows overlap. If the slice is shorter than `size`, the iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451183,"byte_end":451253,"line_start":717,"line_end":717,"column_start":2,"column_end":72}},{"value":"/ returns no values.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451255,"byte_end":451277,"line_start":718,"line_end":718,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451279,"byte_end":451282,"line_start":719,"line_end":719,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451284,"byte_end":451298,"line_start":720,"line_end":720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451300,"byte_end":451303,"line_start":721,"line_end":721,"column_start":2,"column_end":5}},{"value":"/ [`slice::windows`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.windows)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451305,"byte_end":451401,"line_start":722,"line_end":722,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451403,"byte_end":451406,"line_start":723,"line_end":723,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451408,"byte_end":451420,"line_start":724,"line_end":724,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451422,"byte_end":451425,"line_start":725,"line_end":725,"column_start":2,"column_end":5}},{"value":"/ Panics if `size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451427,"byte_end":451453,"line_start":726,"line_end":726,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451455,"byte_end":451458,"line_start":727,"line_end":727,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451460,"byte_end":451474,"line_start":728,"line_end":728,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451476,"byte_end":451479,"line_start":729,"line_end":729,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451481,"byte_end":451492,"line_start":730,"line_end":730,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451494,"byte_end":451521,"line_start":731,"line_end":731,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451523,"byte_end":451526,"line_start":732,"line_end":732,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451528,"byte_end":451562,"line_start":733,"line_end":733,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.windows(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451564,"byte_end":451600,"line_start":734,"line_end":734,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451602,"byte_end":451652,"line_start":735,"line_end":735,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451654,"byte_end":451704,"line_start":736,"line_end":736,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451706,"byte_end":451756,"line_start":737,"line_end":737,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451758,"byte_end":451793,"line_start":738,"line_end":738,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451795,"byte_end":451802,"line_start":739,"line_end":739,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451804,"byte_end":451807,"line_start":740,"line_end":740,"column_start":2,"column_end":5}},{"value":"/ If the slice is shorter than `size`:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451809,"byte_end":451849,"line_start":741,"line_end":741,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451851,"byte_end":451854,"line_start":742,"line_end":742,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451856,"byte_end":451867,"line_start":743,"line_end":743,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451869,"byte_end":451896,"line_start":744,"line_end":744,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451898,"byte_end":451901,"line_start":745,"line_end":745,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451903,"byte_end":451931,"line_start":746,"line_end":746,"column_start":2,"column_end":30}},{"value":"/ let mut iter = slice.windows(4);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451933,"byte_end":451969,"line_start":747,"line_end":747,"column_start":2,"column_end":38}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":451971,"byte_end":452006,"line_start":748,"line_end":748,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452008,"byte_end":452015,"line_start":749,"line_end":749,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452017,"byte_end":452026,"line_start":750,"line_end":750,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2503},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453298,"byte_end":453304,"line_start":791,"line_end":791,"column_start":9,"column_end":15},"name":"chunks","qualname":"<BitSlice<O, T>>::chunks","value":"pub fn chunks(&Self, usize) -> Chunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452165,"byte_end":452235,"line_start":756,"line_end":756,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452237,"byte_end":452280,"line_start":757,"line_end":757,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452282,"byte_end":452285,"line_start":758,"line_end":758,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452287,"byte_end":452357,"line_start":759,"line_end":759,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452359,"byte_end":452435,"line_start":760,"line_end":760,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452437,"byte_end":452454,"line_start":761,"line_end":761,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452456,"byte_end":452459,"line_start":762,"line_end":762,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452461,"byte_end":452532,"line_start":763,"line_end":763,"column_start":2,"column_end":73}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks()`] for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452534,"byte_end":452608,"line_start":764,"line_end":764,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452610,"byte_end":452665,"line_start":765,"line_end":765,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452667,"byte_end":452670,"line_start":766,"line_end":766,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452672,"byte_end":452686,"line_start":767,"line_end":767,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452688,"byte_end":452691,"line_start":768,"line_end":768,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452693,"byte_end":452787,"line_start":769,"line_end":769,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452789,"byte_end":452792,"line_start":770,"line_end":770,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452794,"byte_end":452806,"line_start":771,"line_end":771,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452808,"byte_end":452811,"line_start":772,"line_end":772,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452813,"byte_end":452845,"line_start":773,"line_end":773,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452847,"byte_end":452850,"line_start":774,"line_end":774,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452852,"byte_end":452866,"line_start":775,"line_end":775,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452868,"byte_end":452871,"line_start":776,"line_end":776,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452873,"byte_end":452884,"line_start":777,"line_end":777,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452886,"byte_end":452913,"line_start":778,"line_end":778,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452915,"byte_end":452918,"line_start":779,"line_end":779,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452920,"byte_end":452957,"line_start":780,"line_end":780,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452959,"byte_end":452994,"line_start":781,"line_end":781,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":452996,"byte_end":453046,"line_start":782,"line_end":782,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453048,"byte_end":453098,"line_start":783,"line_end":783,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453100,"byte_end":453147,"line_start":784,"line_end":784,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453149,"byte_end":453184,"line_start":785,"line_end":785,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453186,"byte_end":453193,"line_start":786,"line_end":786,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453195,"byte_end":453198,"line_start":787,"line_end":787,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453200,"byte_end":453243,"line_start":788,"line_end":788,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453245,"byte_end":453278,"line_start":789,"line_end":789,"column_start":2,"column_end":35}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453280,"byte_end":453289,"line_start":790,"line_end":790,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2504},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455045,"byte_end":455055,"line_start":844,"line_end":844,"column_start":9,"column_end":19},"name":"chunks_mut","qualname":"<BitSlice<O, T>>::chunks_mut","value":"pub fn chunks_mut(&mut Self, usize) -> ChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453442,"byte_end":453512,"line_start":796,"line_end":796,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453514,"byte_end":453557,"line_start":797,"line_end":797,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453559,"byte_end":453562,"line_start":798,"line_end":798,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453564,"byte_end":453639,"line_start":799,"line_end":799,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453641,"byte_end":453714,"line_start":800,"line_end":800,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453716,"byte_end":453740,"line_start":801,"line_end":801,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453742,"byte_end":453745,"line_start":802,"line_end":802,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453747,"byte_end":453822,"line_start":803,"line_end":803,"column_start":2,"column_end":77}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.rchunks_mut()`] for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453824,"byte_end":453898,"line_start":804,"line_end":804,"column_start":2,"column_end":76}},{"value":"/ the same iterator but starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453900,"byte_end":453959,"line_start":805,"line_end":805,"column_start":2,"column_end":61}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453961,"byte_end":453964,"line_start":806,"line_end":806,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453966,"byte_end":453980,"line_start":807,"line_end":807,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453982,"byte_end":453985,"line_start":808,"line_end":808,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":453987,"byte_end":454089,"line_start":809,"line_end":809,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454091,"byte_end":454094,"line_start":810,"line_end":810,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454096,"byte_end":454117,"line_start":811,"line_end":811,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454119,"byte_end":454122,"line_start":812,"line_end":812,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454124,"byte_end":454197,"line_start":813,"line_end":813,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454199,"byte_end":454269,"line_start":814,"line_end":814,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454271,"byte_end":454340,"line_start":815,"line_end":815,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454342,"byte_end":454418,"line_start":816,"line_end":816,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454420,"byte_end":454475,"line_start":817,"line_end":817,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454477,"byte_end":454480,"line_start":818,"line_end":818,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454482,"byte_end":454494,"line_start":819,"line_end":819,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454496,"byte_end":454499,"line_start":820,"line_end":820,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454501,"byte_end":454533,"line_start":821,"line_end":821,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454535,"byte_end":454538,"line_start":822,"line_end":822,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454540,"byte_end":454554,"line_start":823,"line_end":823,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454556,"byte_end":454559,"line_start":824,"line_end":824,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454561,"byte_end":454572,"line_start":825,"line_end":825,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454574,"byte_end":454601,"line_start":826,"line_end":826,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454603,"byte_end":454606,"line_start":827,"line_end":827,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454608,"byte_end":454636,"line_start":828,"line_end":828,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454638,"byte_end":454660,"line_start":829,"line_end":829,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454662,"byte_end":454665,"line_start":830,"line_end":830,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_mut(2) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454667,"byte_end":454701,"line_start":831,"line_end":831,"column_start":2,"column_end":36}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454703,"byte_end":454742,"line_start":832,"line_end":832,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454744,"byte_end":454774,"line_start":833,"line_end":833,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454776,"byte_end":454783,"line_start":834,"line_end":834,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454785,"byte_end":454802,"line_start":835,"line_end":835,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454804,"byte_end":454809,"line_start":836,"line_end":836,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 0, 1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454811,"byte_end":454851,"line_start":837,"line_end":837,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454853,"byte_end":454860,"line_start":838,"line_end":838,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454862,"byte_end":454865,"line_start":839,"line_end":839,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454867,"byte_end":454918,"line_start":840,"line_end":840,"column_start":2,"column_end":53}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454920,"byte_end":454961,"line_start":841,"line_end":841,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":454963,"byte_end":455025,"line_start":842,"line_end":842,"column_start":2,"column_end":64}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455027,"byte_end":455036,"line_start":843,"line_end":843,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2505},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456652,"byte_end":456664,"line_start":890,"line_end":890,"column_start":9,"column_end":21},"name":"chunks_exact","qualname":"<BitSlice<O, T>>::chunks_exact","value":"pub fn chunks_exact(&Self, usize) -> ChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455203,"byte_end":455273,"line_start":849,"line_end":849,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455275,"byte_end":455318,"line_start":850,"line_end":850,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455320,"byte_end":455323,"line_start":851,"line_end":851,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455325,"byte_end":455395,"line_start":852,"line_end":852,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455397,"byte_end":455472,"line_start":853,"line_end":853,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455474,"byte_end":455550,"line_start":854,"line_end":854,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455552,"byte_end":455569,"line_start":855,"line_end":855,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455571,"byte_end":455574,"line_start":856,"line_end":856,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455576,"byte_end":455651,"line_start":857,"line_end":857,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455653,"byte_end":455719,"line_start":858,"line_end":858,"column_start":2,"column_end":68}},{"value":"/ [`.chunks()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455721,"byte_end":455739,"line_start":859,"line_end":859,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455741,"byte_end":455744,"line_start":860,"line_end":860,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455746,"byte_end":455820,"line_start":861,"line_end":861,"column_start":2,"column_end":76}},{"value":"/ remainder as a smaller chunk, and [`.rchunks_exact()`] for the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455822,"byte_end":455893,"line_start":862,"line_end":862,"column_start":2,"column_end":73}},{"value":"/ iterator but starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455895,"byte_end":455945,"line_start":863,"line_end":863,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455947,"byte_end":455950,"line_start":864,"line_end":864,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455952,"byte_end":455966,"line_start":865,"line_end":865,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455968,"byte_end":455971,"line_start":866,"line_end":866,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":455973,"byte_end":456079,"line_start":867,"line_end":867,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456081,"byte_end":456084,"line_start":868,"line_end":868,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456086,"byte_end":456098,"line_start":869,"line_end":869,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456100,"byte_end":456103,"line_start":870,"line_end":870,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456105,"byte_end":456137,"line_start":871,"line_end":871,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456139,"byte_end":456142,"line_start":872,"line_end":872,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456144,"byte_end":456158,"line_start":873,"line_end":873,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456160,"byte_end":456163,"line_start":874,"line_end":874,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456165,"byte_end":456176,"line_start":875,"line_end":875,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456178,"byte_end":456205,"line_start":876,"line_end":876,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456207,"byte_end":456210,"line_start":877,"line_end":877,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456212,"byte_end":456249,"line_start":878,"line_end":878,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.chunks_exact(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456251,"byte_end":456292,"line_start":879,"line_end":879,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456294,"byte_end":456344,"line_start":880,"line_end":880,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456346,"byte_end":456396,"line_start":881,"line_end":881,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456398,"byte_end":456433,"line_start":882,"line_end":882,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456435,"byte_end":456478,"line_start":883,"line_end":883,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456480,"byte_end":456487,"line_start":884,"line_end":884,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456489,"byte_end":456492,"line_start":885,"line_end":885,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456494,"byte_end":456525,"line_start":886,"line_end":886,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456527,"byte_end":456572,"line_start":887,"line_end":887,"column_start":2,"column_end":47}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456574,"byte_end":456632,"line_start":888,"line_end":888,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456634,"byte_end":456643,"line_start":889,"line_end":889,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2506},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458665,"byte_end":458681,"line_start":945,"line_end":945,"column_start":9,"column_end":25},"name":"chunks_exact_mut","qualname":"<BitSlice<O, T>>::chunks_exact_mut","value":"pub fn chunks_exact_mut(&mut Self, usize) -> ChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the beginning of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456812,"byte_end":456882,"line_start":895,"line_end":895,"column_start":2,"column_end":72}},{"value":"/ starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456884,"byte_end":456927,"line_start":896,"line_end":896,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456929,"byte_end":456932,"line_start":897,"line_end":897,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":456934,"byte_end":457009,"line_start":898,"line_end":898,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457011,"byte_end":457085,"line_start":899,"line_end":899,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457087,"byte_end":457163,"line_start":900,"line_end":900,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457165,"byte_end":457192,"line_start":901,"line_end":901,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457194,"byte_end":457197,"line_start":902,"line_end":902,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457199,"byte_end":457274,"line_start":903,"line_end":903,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457276,"byte_end":457342,"line_start":904,"line_end":904,"column_start":2,"column_end":68}},{"value":"/ [`.chunks_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457344,"byte_end":457366,"line_start":905,"line_end":905,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457368,"byte_end":457371,"line_start":906,"line_end":906,"column_start":2,"column_end":5}},{"value":"/ See [`.chunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457373,"byte_end":457447,"line_start":907,"line_end":907,"column_start":2,"column_end":76}},{"value":"/ the remainder as a smaller chunk, and [`.rchunks_exact_mut()`] for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457449,"byte_end":457523,"line_start":908,"line_end":908,"column_start":2,"column_end":76}},{"value":"/ same iterator but starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457525,"byte_end":457580,"line_start":909,"line_end":909,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457582,"byte_end":457585,"line_start":910,"line_end":910,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457587,"byte_end":457601,"line_start":911,"line_end":911,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457603,"byte_end":457606,"line_start":912,"line_end":912,"column_start":2,"column_end":5}},{"value":"/ [`slice::chunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.chunks_exact_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457608,"byte_end":457722,"line_start":913,"line_end":913,"column_start":2,"column_end":116}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457724,"byte_end":457727,"line_start":914,"line_end":914,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457729,"byte_end":457750,"line_start":915,"line_end":915,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457752,"byte_end":457755,"line_start":916,"line_end":916,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457757,"byte_end":457830,"line_start":917,"line_end":917,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457832,"byte_end":457902,"line_start":918,"line_end":918,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457904,"byte_end":457973,"line_start":919,"line_end":919,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":457975,"byte_end":458051,"line_start":920,"line_end":920,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458053,"byte_end":458108,"line_start":921,"line_end":921,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458110,"byte_end":458113,"line_start":922,"line_end":922,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458115,"byte_end":458127,"line_start":923,"line_end":923,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458129,"byte_end":458132,"line_start":924,"line_end":924,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458134,"byte_end":458166,"line_start":925,"line_end":925,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458168,"byte_end":458171,"line_start":926,"line_end":926,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458173,"byte_end":458187,"line_start":927,"line_end":927,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458189,"byte_end":458192,"line_start":928,"line_end":928,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458194,"byte_end":458205,"line_start":929,"line_end":929,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458207,"byte_end":458234,"line_start":930,"line_end":930,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458236,"byte_end":458239,"line_start":931,"line_end":931,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458241,"byte_end":458269,"line_start":932,"line_end":932,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458271,"byte_end":458274,"line_start":933,"line_end":933,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.chunks_exact_mut(2) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458276,"byte_end":458316,"line_start":934,"line_end":934,"column_start":2,"column_end":42}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458318,"byte_end":458344,"line_start":935,"line_end":935,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458346,"byte_end":458351,"line_start":936,"line_end":936,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 1, 1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458353,"byte_end":458393,"line_start":937,"line_end":937,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458395,"byte_end":458402,"line_start":938,"line_end":938,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458404,"byte_end":458407,"line_start":939,"line_end":939,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458409,"byte_end":458448,"line_start":940,"line_end":940,"column_start":2,"column_end":41}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458450,"byte_end":458521,"line_start":941,"line_end":941,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458523,"byte_end":458576,"line_start":942,"line_end":942,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458578,"byte_end":458645,"line_start":943,"line_end":943,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458647,"byte_end":458656,"line_start":944,"line_end":944,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2507},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459983,"byte_end":459990,"line_start":988,"line_end":988,"column_start":9,"column_end":16},"name":"rchunks","qualname":"<BitSlice<O, T>>::rchunks","value":"pub fn rchunks(&Self, usize) -> RChunks<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458847,"byte_end":458917,"line_start":953,"line_end":953,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458919,"byte_end":458956,"line_start":954,"line_end":954,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458958,"byte_end":458961,"line_start":955,"line_end":955,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":458963,"byte_end":459033,"line_start":956,"line_end":956,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last chunk will not have length","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459035,"byte_end":459111,"line_start":957,"line_end":957,"column_start":2,"column_end":78}},{"value":"/ `chunk_size`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459113,"byte_end":459130,"line_start":958,"line_end":958,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459132,"byte_end":459135,"line_start":959,"line_end":959,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact()`] for a variant of this iterator that returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459137,"byte_end":459209,"line_start":960,"line_end":960,"column_start":2,"column_end":74}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks()`] for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459211,"byte_end":459284,"line_start":961,"line_end":961,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459286,"byte_end":459347,"line_start":962,"line_end":962,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459349,"byte_end":459352,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459354,"byte_end":459368,"line_start":964,"line_end":964,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459370,"byte_end":459373,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459375,"byte_end":459471,"line_start":966,"line_end":966,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459473,"byte_end":459476,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459478,"byte_end":459490,"line_start":968,"line_end":968,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459492,"byte_end":459495,"line_start":969,"line_end":969,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459497,"byte_end":459529,"line_start":970,"line_end":970,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459531,"byte_end":459534,"line_start":971,"line_end":971,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459536,"byte_end":459550,"line_start":972,"line_end":972,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459552,"byte_end":459555,"line_start":973,"line_end":973,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459557,"byte_end":459568,"line_start":974,"line_end":974,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459570,"byte_end":459597,"line_start":975,"line_end":975,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459599,"byte_end":459602,"line_start":976,"line_end":976,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459604,"byte_end":459641,"line_start":977,"line_end":977,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459643,"byte_end":459679,"line_start":978,"line_end":978,"column_start":2,"column_end":38}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459681,"byte_end":459731,"line_start":979,"line_end":979,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459733,"byte_end":459783,"line_start":980,"line_end":980,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459785,"byte_end":459832,"line_start":981,"line_end":981,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459834,"byte_end":459869,"line_start":982,"line_end":982,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459871,"byte_end":459878,"line_start":983,"line_end":983,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459880,"byte_end":459883,"line_start":984,"line_end":984,"column_start":2,"column_end":5}},{"value":"/ [`.chunks()`]: Self::chunks","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459885,"byte_end":459916,"line_start":985,"line_end":985,"column_start":2,"column_end":33}},{"value":"/ [`.rchunks_exact()`]: Self::rchunks_exact","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459918,"byte_end":459963,"line_start":986,"line_end":986,"column_start":2,"column_end":47}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":459965,"byte_end":459974,"line_start":987,"line_end":987,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2508},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461737,"byte_end":461748,"line_start":1041,"line_end":1041,"column_start":9,"column_end":20},"name":"rchunks_mut","qualname":"<BitSlice<O, T>>::rchunks_mut","value":"pub fn rchunks_mut(&mut Self, usize) -> RChunksMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460130,"byte_end":460200,"line_start":993,"line_end":993,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460202,"byte_end":460239,"line_start":994,"line_end":994,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460241,"byte_end":460244,"line_start":995,"line_end":995,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460246,"byte_end":460321,"line_start":996,"line_end":996,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last chunk will not have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460323,"byte_end":460396,"line_start":997,"line_end":997,"column_start":2,"column_end":75}},{"value":"/ length `chunk_size`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460398,"byte_end":460422,"line_start":998,"line_end":998,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460424,"byte_end":460427,"line_start":999,"line_end":999,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_exact_mut()`] for a variant of this iterator that returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460429,"byte_end":460505,"line_start":1000,"line_end":1000,"column_start":2,"column_end":78}},{"value":"/ chunks of always exactly `chunk_size` bits, and [`.chunks_mut()`] for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460507,"byte_end":460580,"line_start":1001,"line_end":1001,"column_start":2,"column_end":75}},{"value":"/ the same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460582,"byte_end":460647,"line_start":1002,"line_end":1002,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460649,"byte_end":460652,"line_start":1003,"line_end":1003,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460654,"byte_end":460668,"line_start":1004,"line_end":1004,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460670,"byte_end":460673,"line_start":1005,"line_end":1005,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460675,"byte_end":460779,"line_start":1006,"line_end":1006,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460781,"byte_end":460784,"line_start":1007,"line_end":1007,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460786,"byte_end":460807,"line_start":1008,"line_end":1008,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460809,"byte_end":460812,"line_start":1009,"line_end":1009,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460814,"byte_end":460887,"line_start":1010,"line_end":1010,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460889,"byte_end":460959,"line_start":1011,"line_end":1011,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":460961,"byte_end":461030,"line_start":1012,"line_end":1012,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461032,"byte_end":461108,"line_start":1013,"line_end":1013,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461110,"byte_end":461165,"line_start":1014,"line_end":1014,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461167,"byte_end":461170,"line_start":1015,"line_end":1015,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461172,"byte_end":461184,"line_start":1016,"line_end":1016,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461186,"byte_end":461189,"line_start":1017,"line_end":1017,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461191,"byte_end":461223,"line_start":1018,"line_end":1018,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461225,"byte_end":461228,"line_start":1019,"line_end":1019,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461230,"byte_end":461244,"line_start":1020,"line_end":1020,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461246,"byte_end":461249,"line_start":1021,"line_end":1021,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461251,"byte_end":461262,"line_start":1022,"line_end":1022,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461264,"byte_end":461291,"line_start":1023,"line_end":1023,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461293,"byte_end":461296,"line_start":1024,"line_end":1024,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461298,"byte_end":461326,"line_start":1025,"line_end":1025,"column_start":2,"column_end":30}},{"value":"/ let mut count = 1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461328,"byte_end":461350,"line_start":1026,"line_end":1026,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461352,"byte_end":461355,"line_start":1027,"line_end":1027,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_mut(2) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461357,"byte_end":461392,"line_start":1028,"line_end":1028,"column_start":2,"column_end":37}},{"value":"/   for mut bit in chunk.iter_mut() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461394,"byte_end":461433,"line_start":1029,"line_end":1029,"column_start":2,"column_end":41}},{"value":"/     *bit = count % 2 == 0;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461435,"byte_end":461465,"line_start":1030,"line_end":1030,"column_start":2,"column_end":32}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461467,"byte_end":461474,"line_start":1031,"line_end":1031,"column_start":2,"column_end":9}},{"value":"/   count += 1;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461476,"byte_end":461493,"line_start":1032,"line_end":1032,"column_start":2,"column_end":19}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461495,"byte_end":461500,"line_start":1033,"line_end":1033,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461502,"byte_end":461542,"line_start":1034,"line_end":1034,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461544,"byte_end":461551,"line_start":1035,"line_end":1035,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461553,"byte_end":461556,"line_start":1036,"line_end":1036,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_mut()`]: Self::chunks_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461558,"byte_end":461597,"line_start":1037,"line_end":1037,"column_start":2,"column_end":41}},{"value":"/ [`.rchunks_exact_mut()`]: Self::rchunks_exact_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461599,"byte_end":461652,"line_start":1038,"line_end":1038,"column_start":2,"column_end":55}},{"value":"/ [`.remove_alias()`]: crate::slice::RChunksMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461654,"byte_end":461717,"line_start":1039,"line_end":1039,"column_start":2,"column_end":65}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461719,"byte_end":461728,"line_start":1040,"line_end":1040,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2509},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463351,"byte_end":463364,"line_start":1087,"line_end":1087,"column_start":9,"column_end":22},"name":"rchunks_exact","qualname":"<BitSlice<O, T>>::rchunks_exact","value":"pub fn rchunks_exact(&Self, usize) -> RChunksExact<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461898,"byte_end":461968,"line_start":1046,"line_end":1046,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":461970,"byte_end":462007,"line_start":1047,"line_end":1047,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462009,"byte_end":462012,"line_start":1048,"line_end":1048,"column_start":2,"column_end":5}},{"value":"/ The chunks are slices and do not overlap. If `chunk_size` does not","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462014,"byte_end":462084,"line_start":1049,"line_end":1049,"column_start":2,"column_end":72}},{"value":"/ divide the length of the slice, then the last up to `chunk_size-1` bits","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462086,"byte_end":462161,"line_start":1050,"line_end":1050,"column_start":2,"column_end":77}},{"value":"/ will be omitted and can be retrieved from the [`.remainder()`] method of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462163,"byte_end":462239,"line_start":1051,"line_end":1051,"column_start":2,"column_end":78}},{"value":"/ the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462241,"byte_end":462258,"line_start":1052,"line_end":1052,"column_start":2,"column_end":19}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462260,"byte_end":462263,"line_start":1053,"line_end":1053,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462265,"byte_end":462340,"line_start":1054,"line_end":1054,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462342,"byte_end":462408,"line_start":1055,"line_end":1055,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462410,"byte_end":462429,"line_start":1056,"line_end":1056,"column_start":2,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462431,"byte_end":462434,"line_start":1057,"line_end":1057,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks()`] for a variant of this iterator that also returns the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462436,"byte_end":462511,"line_start":1058,"line_end":1058,"column_start":2,"column_end":77}},{"value":"/ remainder as a smaller chunk, and [`.chunks_exact()`] for the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462513,"byte_end":462583,"line_start":1059,"line_end":1059,"column_start":2,"column_end":72}},{"value":"/ iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462585,"byte_end":462641,"line_start":1060,"line_end":1060,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462643,"byte_end":462646,"line_start":1061,"line_end":1061,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462648,"byte_end":462662,"line_start":1062,"line_end":1062,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462664,"byte_end":462667,"line_start":1063,"line_end":1063,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462669,"byte_end":462777,"line_start":1064,"line_end":1064,"column_start":2,"column_end":110}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462779,"byte_end":462782,"line_start":1065,"line_end":1065,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462784,"byte_end":462796,"line_start":1066,"line_end":1066,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462798,"byte_end":462801,"line_start":1067,"line_end":1067,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462803,"byte_end":462835,"line_start":1068,"line_end":1068,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462837,"byte_end":462840,"line_start":1069,"line_end":1069,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462842,"byte_end":462856,"line_start":1070,"line_end":1070,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462858,"byte_end":462861,"line_start":1071,"line_end":1071,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462863,"byte_end":462874,"line_start":1072,"line_end":1072,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462876,"byte_end":462903,"line_start":1073,"line_end":1073,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462905,"byte_end":462908,"line_start":1074,"line_end":1074,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462910,"byte_end":462947,"line_start":1075,"line_end":1075,"column_start":2,"column_end":39}},{"value":"/ let mut iter = slice.rchunks_exact(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462949,"byte_end":462991,"line_start":1076,"line_end":1076,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":462993,"byte_end":463043,"line_start":1077,"line_end":1077,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463045,"byte_end":463095,"line_start":1078,"line_end":1078,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463097,"byte_end":463132,"line_start":1079,"line_end":1079,"column_start":2,"column_end":37}},{"value":"/ assert_eq!(iter.remainder(), bits![0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463134,"byte_end":463177,"line_start":1080,"line_end":1080,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463179,"byte_end":463186,"line_start":1081,"line_end":1081,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463188,"byte_end":463191,"line_start":1082,"line_end":1082,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact()`]: Self::chunks_exact","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463193,"byte_end":463236,"line_start":1083,"line_end":1083,"column_start":2,"column_end":45}},{"value":"/ [`.rchunks()`]: Self::rchunks","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463238,"byte_end":463271,"line_start":1084,"line_end":1084,"column_start":2,"column_end":35}},{"value":"/ [`.remainder()`]: crate::slice::ChunksExact::remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463273,"byte_end":463331,"line_start":1085,"line_end":1085,"column_start":2,"column_end":60}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463333,"byte_end":463342,"line_start":1086,"line_end":1086,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2510},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465371,"byte_end":465388,"line_start":1142,"line_end":1142,"column_start":9,"column_end":26},"name":"rchunks_exact_mut","qualname":"<BitSlice<O, T>>::rchunks_exact_mut","value":"pub fn rchunks_exact_mut(&mut Self, usize) -> RChunksExactMut<, O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over `chunk_size` bits of the slice at a time,\n starting at the end of the slice.","sig":null,"attributes":[{"value":"/ Returns an iterator over `chunk_size` bits of the slice at a time,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463514,"byte_end":463584,"line_start":1092,"line_end":1092,"column_start":2,"column_end":72}},{"value":"/ starting at the end of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463586,"byte_end":463623,"line_start":1093,"line_end":1093,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463625,"byte_end":463628,"line_start":1094,"line_end":1094,"column_start":2,"column_end":5}},{"value":"/ The chunks are mutable slices, and do not overlap. If `chunk_size` does","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463630,"byte_end":463705,"line_start":1095,"line_end":1095,"column_start":2,"column_end":77}},{"value":"/ not divide the length of the slice, then the last up to `chunk_size-1`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463707,"byte_end":463781,"line_start":1096,"line_end":1096,"column_start":2,"column_end":76}},{"value":"/ bits will be omitted and can be retrieved from the [`.into_remainder()`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463783,"byte_end":463859,"line_start":1097,"line_end":1097,"column_start":2,"column_end":78}},{"value":"/ method of the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463861,"byte_end":463888,"line_start":1098,"line_end":1098,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463890,"byte_end":463893,"line_start":1099,"line_end":1099,"column_start":2,"column_end":5}},{"value":"/ Due to each chunk having exactly `chunk_size` bits, the compiler may be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463895,"byte_end":463970,"line_start":1100,"line_end":1100,"column_start":2,"column_end":77}},{"value":"/ able to optimize the resulting code better than in the case of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":463972,"byte_end":464038,"line_start":1101,"line_end":1101,"column_start":2,"column_end":68}},{"value":"/ [`.rchunks_mut()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464040,"byte_end":464063,"line_start":1102,"line_end":1102,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464065,"byte_end":464068,"line_start":1103,"line_end":1103,"column_start":2,"column_end":5}},{"value":"/ See [`.rchunks_mut()`] for a variant of this iterator that also returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464070,"byte_end":464145,"line_start":1104,"line_end":1104,"column_start":2,"column_end":77}},{"value":"/ the remainder as a smaller chunk, and [`.chunks_exact_mut()`] for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464147,"byte_end":464220,"line_start":1105,"line_end":1105,"column_start":2,"column_end":75}},{"value":"/ same iterator but starting at the beginning of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464222,"byte_end":464283,"line_start":1106,"line_end":1106,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464285,"byte_end":464288,"line_start":1107,"line_end":1107,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464290,"byte_end":464304,"line_start":1108,"line_end":1108,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464306,"byte_end":464309,"line_start":1109,"line_end":1109,"column_start":2,"column_end":5}},{"value":"/ [`slice::rchunks_exact_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rchunks_exact_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464311,"byte_end":464427,"line_start":1110,"line_end":1110,"column_start":2,"column_end":118}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464429,"byte_end":464432,"line_start":1111,"line_end":1111,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464434,"byte_end":464455,"line_start":1112,"line_end":1112,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464457,"byte_end":464460,"line_start":1113,"line_end":1113,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464462,"byte_end":464535,"line_start":1114,"line_end":1114,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464537,"byte_end":464607,"line_start":1115,"line_end":1115,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464609,"byte_end":464678,"line_start":1116,"line_end":1116,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464680,"byte_end":464756,"line_start":1117,"line_end":1117,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464758,"byte_end":464813,"line_start":1118,"line_end":1118,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464815,"byte_end":464818,"line_start":1119,"line_end":1119,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464820,"byte_end":464832,"line_start":1120,"line_end":1120,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464834,"byte_end":464837,"line_start":1121,"line_end":1121,"column_start":2,"column_end":5}},{"value":"/ Panics if `chunk_size` is 0.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464839,"byte_end":464871,"line_start":1122,"line_end":1122,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464873,"byte_end":464876,"line_start":1123,"line_end":1123,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464878,"byte_end":464892,"line_start":1124,"line_end":1124,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464894,"byte_end":464897,"line_start":1125,"line_end":1125,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464899,"byte_end":464910,"line_start":1126,"line_end":1126,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464912,"byte_end":464939,"line_start":1127,"line_end":1127,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464941,"byte_end":464944,"line_start":1128,"line_end":1128,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0; 5];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464946,"byte_end":464974,"line_start":1129,"line_end":1129,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464976,"byte_end":464979,"line_start":1130,"line_end":1130,"column_start":2,"column_end":5}},{"value":"/ for chunk in v.rchunks_exact_mut(2) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":464981,"byte_end":465022,"line_start":1131,"line_end":1131,"column_start":2,"column_end":43}},{"value":"/   chunk.set_all(true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465024,"byte_end":465050,"line_start":1132,"line_end":1132,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465052,"byte_end":465057,"line_start":1133,"line_end":1133,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465059,"byte_end":465099,"line_start":1134,"line_end":1134,"column_start":2,"column_end":42}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465101,"byte_end":465108,"line_start":1135,"line_end":1135,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465110,"byte_end":465113,"line_start":1136,"line_end":1136,"column_start":2,"column_end":5}},{"value":"/ [`.chunks_exact_mut()`]: Self::chunks_exact_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465115,"byte_end":465166,"line_start":1137,"line_end":1137,"column_start":2,"column_end":53}},{"value":"/ [`.into_remainder()`]: crate::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465168,"byte_end":465239,"line_start":1138,"line_end":1138,"column_start":2,"column_end":73}},{"value":"/ [`.rchunks_mut()`]: Self::rchunks_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465241,"byte_end":465282,"line_start":1139,"line_end":1139,"column_start":2,"column_end":43}},{"value":"/ [`.remove_alias()`]: crate::slice::ChunksExactMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465284,"byte_end":465351,"line_start":1140,"line_end":1140,"column_start":2,"column_end":69}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465353,"byte_end":465362,"line_start":1141,"line_end":1141,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2511},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466916,"byte_end":466924,"line_start":1198,"line_end":1198,"column_start":9,"column_end":17},"name":"split_at","qualname":"<BitSlice<O, T>>::split_at","value":"pub fn split_at(&Self, usize) -> (&Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":" Divides one slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one slice into two at an index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465556,"byte_end":465599,"line_start":1150,"line_end":1150,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465601,"byte_end":465604,"line_start":1151,"line_end":1151,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465606,"byte_end":465681,"line_start":1152,"line_end":1152,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465683,"byte_end":465758,"line_start":1153,"line_end":1153,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465760,"byte_end":465799,"line_start":1154,"line_end":1154,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465801,"byte_end":465804,"line_start":1155,"line_end":1155,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465806,"byte_end":465820,"line_start":1156,"line_end":1156,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465822,"byte_end":465825,"line_start":1157,"line_end":1157,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465827,"byte_end":465925,"line_start":1158,"line_end":1158,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465927,"byte_end":465930,"line_start":1159,"line_end":1159,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465932,"byte_end":465944,"line_start":1160,"line_end":1160,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465946,"byte_end":465949,"line_start":1161,"line_end":1161,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465951,"byte_end":465977,"line_start":1162,"line_end":1162,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465979,"byte_end":465982,"line_start":1163,"line_end":1163,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":465984,"byte_end":465998,"line_start":1164,"line_end":1164,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466000,"byte_end":466003,"line_start":1165,"line_end":1165,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466005,"byte_end":466081,"line_start":1166,"line_end":1166,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466083,"byte_end":466158,"line_start":1167,"line_end":1167,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466160,"byte_end":466234,"line_start":1168,"line_end":1168,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466236,"byte_end":466309,"line_start":1169,"line_end":1169,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466311,"byte_end":466384,"line_start":1170,"line_end":1170,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466386,"byte_end":466389,"line_start":1171,"line_end":1171,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466391,"byte_end":466405,"line_start":1172,"line_end":1172,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466407,"byte_end":466410,"line_start":1173,"line_end":1173,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466412,"byte_end":466423,"line_start":1174,"line_end":1174,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466425,"byte_end":466452,"line_start":1175,"line_end":1175,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466454,"byte_end":466457,"line_start":1176,"line_end":1176,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466459,"byte_end":466495,"line_start":1177,"line_end":1177,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466497,"byte_end":466500,"line_start":1178,"line_end":1178,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466502,"byte_end":466507,"line_start":1179,"line_end":1179,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(0);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466509,"byte_end":466549,"line_start":1180,"line_end":1180,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466551,"byte_end":466583,"line_start":1181,"line_end":1181,"column_start":2,"column_end":34}},{"value":"/   assert_eq!(right, v);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466585,"byte_end":466612,"line_start":1182,"line_end":1182,"column_start":2,"column_end":29}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466614,"byte_end":466619,"line_start":1183,"line_end":1183,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466621,"byte_end":466624,"line_start":1184,"line_end":1184,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466626,"byte_end":466631,"line_start":1185,"line_end":1185,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466633,"byte_end":466673,"line_start":1186,"line_end":1186,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466675,"byte_end":466711,"line_start":1187,"line_end":1187,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466713,"byte_end":466756,"line_start":1188,"line_end":1188,"column_start":2,"column_end":45}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466758,"byte_end":466763,"line_start":1189,"line_end":1189,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466765,"byte_end":466768,"line_start":1190,"line_end":1190,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466770,"byte_end":466775,"line_start":1191,"line_end":1191,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at(6);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466777,"byte_end":466817,"line_start":1192,"line_end":1192,"column_start":2,"column_end":42}},{"value":"/   assert_eq!(left, v);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466819,"byte_end":466845,"line_start":1193,"line_end":1193,"column_start":2,"column_end":28}},{"value":"/   assert_eq!(right, bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466847,"byte_end":466880,"line_start":1194,"line_end":1194,"column_start":2,"column_end":35}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466882,"byte_end":466887,"line_start":1195,"line_end":1195,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466889,"byte_end":466896,"line_start":1196,"line_end":1196,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":466898,"byte_end":466907,"line_start":1197,"line_end":1197,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2512},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469353,"byte_end":469365,"line_start":1265,"line_end":1265,"column_start":9,"column_end":21},"name":"split_at_mut","qualname":"<BitSlice<O, T>>::split_at_mut","value":"pub fn split_at_mut(&mut Self, usize)\n-> (&mut BitSlice<O, T::Alias>, &mut BitSlice<O, T::Alias>)","parent":null,"children":[],"decl_id":null,"docs":" Divides one mutable slice into two at an index.","sig":null,"attributes":[{"value":"/ Divides one mutable slice into two at an index.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467098,"byte_end":467149,"line_start":1204,"line_end":1204,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467151,"byte_end":467154,"line_start":1205,"line_end":1205,"column_start":2,"column_end":5}},{"value":"/ The first will contain all indices from `[0, mid)` (excluding the index","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467156,"byte_end":467231,"line_start":1206,"line_end":1206,"column_start":2,"column_end":77}},{"value":"/ `mid` itself) and the second will contain all indices from `[mid, len)`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467233,"byte_end":467308,"line_start":1207,"line_end":1207,"column_start":2,"column_end":77}},{"value":"/ (excluding the index `len` itself).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467310,"byte_end":467349,"line_start":1208,"line_end":1208,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467351,"byte_end":467354,"line_start":1209,"line_end":1209,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467356,"byte_end":467370,"line_start":1210,"line_end":1210,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467372,"byte_end":467375,"line_start":1211,"line_end":1211,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_at_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_at_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467377,"byte_end":467483,"line_start":1212,"line_end":1212,"column_start":2,"column_end":108}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467485,"byte_end":467488,"line_start":1213,"line_end":1213,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467490,"byte_end":467511,"line_start":1214,"line_end":1214,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467513,"byte_end":467516,"line_start":1215,"line_end":1215,"column_start":2,"column_end":5}},{"value":"/ The partition index `mid` may occur anywhere in the slice, and as a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467518,"byte_end":467589,"line_start":1216,"line_end":1216,"column_start":2,"column_end":73}},{"value":"/ result the two returned slices may both have write access to the memory","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467591,"byte_end":467666,"line_start":1217,"line_end":1217,"column_start":2,"column_end":77}},{"value":"/ address containing `mid`. As such, the returned slices must be marked","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467668,"byte_end":467741,"line_start":1218,"line_end":1218,"column_start":2,"column_end":75}},{"value":"/ with [`T::Alias`] in order to correctly manage memory access going","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467743,"byte_end":467813,"line_start":1219,"line_end":1219,"column_start":2,"column_end":72}},{"value":"/ forward.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467815,"byte_end":467827,"line_start":1220,"line_end":1220,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467829,"byte_end":467832,"line_start":1221,"line_end":1221,"column_start":2,"column_end":5}},{"value":"/ This marking is applied to all memory accesses in both slices,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467834,"byte_end":467900,"line_start":1222,"line_end":1222,"column_start":2,"column_end":68}},{"value":"/ regardless of whether any future accesses actually require it. To limit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467902,"byte_end":467977,"line_start":1223,"line_end":1223,"column_start":2,"column_end":77}},{"value":"/ the alias marking to only the addresses that need it, use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":467979,"byte_end":468040,"line_start":1224,"line_end":1224,"column_start":2,"column_end":63}},{"value":"/ [`.bit_domain()`] or [`.bit_domain_mut()`] to split either slice into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468042,"byte_end":468115,"line_start":1225,"line_end":1225,"column_start":2,"column_end":75}},{"value":"/ its aliased and unaliased subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468117,"byte_end":468157,"line_start":1226,"line_end":1226,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468159,"byte_end":468162,"line_start":1227,"line_end":1227,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468164,"byte_end":468176,"line_start":1228,"line_end":1228,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468178,"byte_end":468181,"line_start":1229,"line_end":1229,"column_start":2,"column_end":5}},{"value":"/ Panics if `mid > len`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468183,"byte_end":468209,"line_start":1230,"line_end":1230,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468211,"byte_end":468214,"line_start":1231,"line_end":1231,"column_start":2,"column_end":5}},{"value":"/ # Behavior","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468216,"byte_end":468230,"line_start":1232,"line_end":1232,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468232,"byte_end":468235,"line_start":1233,"line_end":1233,"column_start":2,"column_end":5}},{"value":"/ When `mid` is `0` or `self.len()`, then the left or right return values,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468237,"byte_end":468313,"line_start":1234,"line_end":1234,"column_start":2,"column_end":78}},{"value":"/ respectively, are empty slices. Empty slice references produced by this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468315,"byte_end":468390,"line_start":1235,"line_end":1235,"column_start":2,"column_end":77}},{"value":"/ method are specified to have the address information you would expect:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468392,"byte_end":468466,"line_start":1236,"line_end":1236,"column_start":2,"column_end":76}},{"value":"/ a left empty slice has the same base address and start bit as `self`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468468,"byte_end":468541,"line_start":1237,"line_end":1237,"column_start":2,"column_end":75}},{"value":"/ and a right empty slice will have its address raised by `self.len()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468543,"byte_end":468616,"line_start":1238,"line_end":1238,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468618,"byte_end":468621,"line_start":1239,"line_end":1239,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468623,"byte_end":468637,"line_start":1240,"line_end":1240,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468639,"byte_end":468642,"line_start":1241,"line_end":1241,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468644,"byte_end":468655,"line_start":1242,"line_end":1242,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468657,"byte_end":468684,"line_start":1243,"line_end":1243,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468686,"byte_end":468689,"line_start":1244,"line_end":1244,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 0, 1, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468691,"byte_end":468731,"line_start":1245,"line_end":1245,"column_start":2,"column_end":42}},{"value":"/ // scoped to restrict the lifetime of the borrows","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468733,"byte_end":468786,"line_start":1246,"line_end":1246,"column_start":2,"column_end":55}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468788,"byte_end":468793,"line_start":1247,"line_end":1247,"column_start":2,"column_end":7}},{"value":"/   let (left, right) = v.split_at_mut(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468795,"byte_end":468839,"line_start":1248,"line_end":1248,"column_start":2,"column_end":46}},{"value":"/   assert_eq!(left, bits![0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468841,"byte_end":468877,"line_start":1249,"line_end":1249,"column_start":2,"column_end":38}},{"value":"/   assert_eq!(right, bits![0, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468879,"byte_end":468922,"line_start":1250,"line_end":1250,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468924,"byte_end":468927,"line_start":1251,"line_end":1251,"column_start":2,"column_end":5}},{"value":"/   left.set(1, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468929,"byte_end":468953,"line_start":1252,"line_end":1252,"column_start":2,"column_end":26}},{"value":"/   right.set(1, false);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468955,"byte_end":468981,"line_start":1253,"line_end":1253,"column_start":2,"column_end":28}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468983,"byte_end":468988,"line_start":1254,"line_end":1254,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![0, 1, 0, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":468990,"byte_end":469033,"line_start":1255,"line_end":1255,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469035,"byte_end":469042,"line_start":1256,"line_end":1256,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469044,"byte_end":469047,"line_start":1257,"line_end":1257,"column_start":2,"column_end":5}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469049,"byte_end":469096,"line_start":1258,"line_end":1258,"column_start":2,"column_end":49}},{"value":"/ [`.bit_domain`()]: Self::bit_domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469098,"byte_end":469137,"line_start":1259,"line_end":1259,"column_start":2,"column_end":41}},{"value":"/ [`.bit_domain_mut`()]: Self::bit_domain_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469139,"byte_end":469186,"line_start":1260,"line_end":1260,"column_start":2,"column_end":49}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469300,"byte_end":469309,"line_start":1263,"line_end":1263,"column_start":2,"column_end":11}},{"value":"allow(clippy :: type_complexity)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469311,"byte_end":469344,"line_start":1264,"line_end":1264,"column_start":2,"column_end":35}}]},{"kind":"Method","id":{"krate":0,"index":2513},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471317,"byte_end":471322,"line_start":1330,"line_end":1330,"column_start":9,"column_end":14},"name":"split","qualname":"<BitSlice<O, T>>::split","value":"pub fn split<F>(&Self, F) -> Split<, O, T, F> where F: FnMut(usize, &bool) ->\nbool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`.\n The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469540,"byte_end":469615,"line_start":1273,"line_end":1273,"column_start":2,"column_end":77}},{"value":"/ The matched bit is not contained in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469617,"byte_end":469671,"line_start":1274,"line_end":1274,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469673,"byte_end":469676,"line_start":1275,"line_end":1275,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469678,"byte_end":469692,"line_start":1276,"line_end":1276,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469694,"byte_end":469697,"line_start":1277,"line_end":1277,"column_start":2,"column_end":5}},{"value":"/ [`slice::split`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469699,"byte_end":469791,"line_start":1278,"line_end":1278,"column_start":2,"column_end":94}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469793,"byte_end":469796,"line_start":1279,"line_end":1279,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469798,"byte_end":469819,"line_start":1280,"line_end":1280,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469821,"byte_end":469824,"line_start":1281,"line_end":1281,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469826,"byte_end":469894,"line_start":1282,"line_end":1282,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469896,"byte_end":469970,"line_start":1283,"line_end":1283,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469972,"byte_end":469982,"line_start":1284,"line_end":1284,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469984,"byte_end":469987,"line_start":1285,"line_end":1285,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":469989,"byte_end":470003,"line_start":1286,"line_end":1286,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470005,"byte_end":470008,"line_start":1287,"line_end":1287,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470010,"byte_end":470021,"line_start":1288,"line_end":1288,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470023,"byte_end":470050,"line_start":1289,"line_end":1289,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470052,"byte_end":470055,"line_start":1290,"line_end":1290,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 1, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470057,"byte_end":470091,"line_start":1291,"line_end":1291,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|pos, _bit| pos % 3 == 2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470093,"byte_end":470150,"line_start":1292,"line_end":1292,"column_start":2,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470152,"byte_end":470155,"line_start":1293,"line_end":1293,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470157,"byte_end":470207,"line_start":1294,"line_end":1294,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470209,"byte_end":470256,"line_start":1295,"line_end":1295,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470258,"byte_end":470293,"line_start":1296,"line_end":1296,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470295,"byte_end":470302,"line_start":1297,"line_end":1297,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470304,"byte_end":470307,"line_start":1298,"line_end":1298,"column_start":2,"column_end":5}},{"value":"/ If the first bit is matched, an empty slice will be the first item","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470309,"byte_end":470379,"line_start":1299,"line_end":1299,"column_start":2,"column_end":72}},{"value":"/ returned by the iterator. Similarly, if the last bit in the slice is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470381,"byte_end":470453,"line_start":1300,"line_end":1300,"column_start":2,"column_end":74}},{"value":"/ matched, an empty slice will be the last item returned by the iterator:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470455,"byte_end":470530,"line_start":1301,"line_end":1301,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470532,"byte_end":470535,"line_start":1302,"line_end":1302,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470537,"byte_end":470548,"line_start":1303,"line_end":1303,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470550,"byte_end":470577,"line_start":1304,"line_end":1304,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470579,"byte_end":470582,"line_start":1305,"line_end":1305,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470584,"byte_end":470615,"line_start":1306,"line_end":1306,"column_start":2,"column_end":33}},{"value":"/ let mut iter = slice.split(|_pos, bit| *bit);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470617,"byte_end":470666,"line_start":1307,"line_end":1307,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470668,"byte_end":470671,"line_start":1308,"line_end":1308,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470673,"byte_end":470723,"line_start":1309,"line_end":1309,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470725,"byte_end":470771,"line_start":1310,"line_end":1310,"column_start":2,"column_end":48}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470773,"byte_end":470808,"line_start":1311,"line_end":1311,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470810,"byte_end":470817,"line_start":1312,"line_end":1312,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470819,"byte_end":470822,"line_start":1313,"line_end":1313,"column_start":2,"column_end":5}},{"value":"/ If two matched bits are directly adjacent, an empty slice will be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470824,"byte_end":470893,"line_start":1314,"line_end":1314,"column_start":2,"column_end":71}},{"value":"/ present between them:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470895,"byte_end":470920,"line_start":1315,"line_end":1315,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470922,"byte_end":470925,"line_start":1316,"line_end":1316,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470927,"byte_end":470938,"line_start":1317,"line_end":1317,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470940,"byte_end":470967,"line_start":1318,"line_end":1318,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470969,"byte_end":470972,"line_start":1319,"line_end":1319,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":470974,"byte_end":471008,"line_start":1320,"line_end":1320,"column_start":2,"column_end":36}},{"value":"/ let mut iter = slice.split(|_pos, bit| !*bit);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471010,"byte_end":471060,"line_start":1321,"line_end":1321,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471062,"byte_end":471065,"line_start":1322,"line_end":1322,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471067,"byte_end":471114,"line_start":1323,"line_end":1323,"column_start":2,"column_end":49}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471116,"byte_end":471162,"line_start":1324,"line_end":1324,"column_start":2,"column_end":48}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471164,"byte_end":471211,"line_start":1325,"line_end":1325,"column_start":2,"column_end":49}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471213,"byte_end":471248,"line_start":1326,"line_end":1326,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471250,"byte_end":471257,"line_start":1327,"line_end":1327,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471259,"byte_end":471276,"line_start":1328,"line_end":1328,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471278,"byte_end":471308,"line_start":1329,"line_end":1329,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2515},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472627,"byte_end":472636,"line_start":1369,"line_end":1369,"column_start":9,"column_end":18},"name":"split_mut","qualname":"<BitSlice<O, T>>::split_mut","value":"pub fn split_mut<F>(&mut Self, F) -> SplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`. The matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471430,"byte_end":471505,"line_start":1335,"line_end":1335,"column_start":2,"column_end":77}},{"value":"/ `pred`. The matched bit is not contained in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471507,"byte_end":471569,"line_start":1336,"line_end":1336,"column_start":2,"column_end":64}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471571,"byte_end":471574,"line_start":1337,"line_end":1337,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471576,"byte_end":471590,"line_start":1338,"line_end":1338,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471592,"byte_end":471595,"line_start":1339,"line_end":1339,"column_start":2,"column_end":5}},{"value":"/ [`slice::split_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.split_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471597,"byte_end":471697,"line_start":1340,"line_end":1340,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471699,"byte_end":471702,"line_start":1341,"line_end":1341,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471704,"byte_end":471725,"line_start":1342,"line_end":1342,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471727,"byte_end":471730,"line_start":1343,"line_end":1343,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471732,"byte_end":471800,"line_start":1344,"line_end":1344,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471802,"byte_end":471876,"line_start":1345,"line_end":1345,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471878,"byte_end":471888,"line_start":1346,"line_end":1346,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471890,"byte_end":471893,"line_start":1347,"line_end":1347,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471895,"byte_end":471968,"line_start":1348,"line_end":1348,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":471970,"byte_end":472040,"line_start":1349,"line_end":1349,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472042,"byte_end":472111,"line_start":1350,"line_end":1350,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472113,"byte_end":472189,"line_start":1351,"line_end":1351,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472191,"byte_end":472246,"line_start":1352,"line_end":1352,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472248,"byte_end":472251,"line_start":1353,"line_end":1353,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472253,"byte_end":472267,"line_start":1354,"line_end":1354,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472269,"byte_end":472272,"line_start":1355,"line_end":1355,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472274,"byte_end":472285,"line_start":1356,"line_end":1356,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472287,"byte_end":472314,"line_start":1357,"line_end":1357,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472316,"byte_end":472319,"line_start":1358,"line_end":1358,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472321,"byte_end":472361,"line_start":1359,"line_end":1359,"column_start":2,"column_end":42}},{"value":"/ for group in v.split_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472363,"byte_end":472411,"line_start":1360,"line_end":1360,"column_start":2,"column_end":50}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472413,"byte_end":472438,"line_start":1361,"line_end":1361,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472440,"byte_end":472445,"line_start":1362,"line_end":1362,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472447,"byte_end":472490,"line_start":1363,"line_end":1363,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472492,"byte_end":472499,"line_start":1364,"line_end":1364,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472501,"byte_end":472504,"line_start":1365,"line_end":1365,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472506,"byte_end":472567,"line_start":1366,"line_end":1366,"column_start":2,"column_end":63}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472569,"byte_end":472586,"line_start":1367,"line_end":1367,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472588,"byte_end":472618,"line_start":1368,"line_end":1368,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2517},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474213,"byte_end":474219,"line_start":1419,"line_end":1419,"column_start":9,"column_end":15},"name":"rsplit","qualname":"<BitSlice<O, T>>::rsplit","value":"pub fn rsplit<F>(&Self, F) -> RSplit<, O, T, F> where F: FnMut(usize, &bool)\n-> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n starting at the end of the slice and working backwards. The matched bit\n is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472766,"byte_end":472841,"line_start":1374,"line_end":1374,"column_start":2,"column_end":77}},{"value":"/ starting at the end of the slice and working backwards. The matched bit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472843,"byte_end":472918,"line_start":1375,"line_end":1375,"column_start":2,"column_end":77}},{"value":"/ is not contained in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472920,"byte_end":472958,"line_start":1376,"line_end":1376,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472960,"byte_end":472963,"line_start":1377,"line_end":1377,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472965,"byte_end":472979,"line_start":1378,"line_end":1378,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472981,"byte_end":472984,"line_start":1379,"line_end":1379,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":472986,"byte_end":473080,"line_start":1380,"line_end":1380,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473082,"byte_end":473085,"line_start":1381,"line_end":1381,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473087,"byte_end":473108,"line_start":1382,"line_end":1382,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473110,"byte_end":473113,"line_start":1383,"line_end":1383,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473115,"byte_end":473183,"line_start":1384,"line_end":1384,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473185,"byte_end":473259,"line_start":1385,"line_end":1385,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473261,"byte_end":473271,"line_start":1386,"line_end":1386,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473273,"byte_end":473276,"line_start":1387,"line_end":1387,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473278,"byte_end":473292,"line_start":1388,"line_end":1388,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473294,"byte_end":473297,"line_start":1389,"line_end":1389,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473299,"byte_end":473310,"line_start":1390,"line_end":1390,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473312,"byte_end":473339,"line_start":1391,"line_end":1391,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473341,"byte_end":473344,"line_start":1392,"line_end":1392,"column_start":2,"column_end":5}},{"value":"/ let slice = bits![1, 1, 1, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473346,"byte_end":473386,"line_start":1393,"line_end":1393,"column_start":2,"column_end":42}},{"value":"/ let mut iter = slice.rsplit(|_pos, bit| !*bit);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473388,"byte_end":473439,"line_start":1394,"line_end":1394,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473441,"byte_end":473444,"line_start":1395,"line_end":1395,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473446,"byte_end":473496,"line_start":1396,"line_end":1396,"column_start":2,"column_end":52}},{"value":"/ assert_eq!(iter.next().unwrap(), bits![1; 3]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473498,"byte_end":473548,"line_start":1397,"line_end":1397,"column_start":2,"column_end":52}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473550,"byte_end":473585,"line_start":1398,"line_end":1398,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473587,"byte_end":473594,"line_start":1399,"line_end":1399,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473596,"byte_end":473599,"line_start":1400,"line_end":1400,"column_start":2,"column_end":5}},{"value":"/ As with [`.split()`], if the first or last bit is matched, an empty","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473601,"byte_end":473672,"line_start":1401,"line_end":1401,"column_start":2,"column_end":73}},{"value":"/ slice will be the first (or last) item returned by the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473674,"byte_end":473742,"line_start":1402,"line_end":1402,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473744,"byte_end":473747,"line_start":1403,"line_end":1403,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473749,"byte_end":473760,"line_start":1404,"line_end":1404,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473762,"byte_end":473789,"line_start":1405,"line_end":1405,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473791,"byte_end":473794,"line_start":1406,"line_end":1406,"column_start":2,"column_end":5}},{"value":"/ let v = bits![1, 0, 0, 1, 0, 0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473796,"byte_end":473835,"line_start":1407,"line_end":1407,"column_start":2,"column_end":41}},{"value":"/ let mut it = v.rsplit(|_pos, bit| *bit);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473837,"byte_end":473881,"line_start":1408,"line_end":1408,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473883,"byte_end":473927,"line_start":1409,"line_end":1409,"column_start":2,"column_end":46}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473929,"byte_end":473977,"line_start":1410,"line_end":1410,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![0; 2]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":473979,"byte_end":474027,"line_start":1411,"line_end":1411,"column_start":2,"column_end":50}},{"value":"/ assert_eq!(it.next().unwrap(), bits![]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474029,"byte_end":474073,"line_start":1412,"line_end":1412,"column_start":2,"column_end":46}},{"value":"/ assert!(it.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474075,"byte_end":474108,"line_start":1413,"line_end":1413,"column_start":2,"column_end":35}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474110,"byte_end":474117,"line_start":1414,"line_end":1414,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474119,"byte_end":474122,"line_start":1415,"line_end":1415,"column_start":2,"column_end":5}},{"value":"/ [`.split()`]: Self::split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474124,"byte_end":474153,"line_start":1416,"line_end":1416,"column_start":2,"column_end":31}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474155,"byte_end":474172,"line_start":1417,"line_end":1417,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474174,"byte_end":474204,"line_start":1418,"line_end":1418,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2519},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475591,"byte_end":475601,"line_start":1459,"line_end":1459,"column_start":9,"column_end":19},"name":"rsplit_mut","qualname":"<BitSlice<O, T>>::rsplit_mut","value":"pub fn rsplit_mut<F>(&mut Self, F) -> RSplitMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over mutable subslices separated by bits that match\n `pred`, starting at the end of the slice and working backwards. The\n matched bit is not contained in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over mutable subslices separated by bits that match","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474329,"byte_end":474404,"line_start":1424,"line_end":1424,"column_start":2,"column_end":77}},{"value":"/ `pred`, starting at the end of the slice and working backwards. The","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474406,"byte_end":474477,"line_start":1425,"line_end":1425,"column_start":2,"column_end":73}},{"value":"/ matched bit is not contained in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474479,"byte_end":474529,"line_start":1426,"line_end":1426,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474531,"byte_end":474534,"line_start":1427,"line_end":1427,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474536,"byte_end":474550,"line_start":1428,"line_end":1428,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474552,"byte_end":474555,"line_start":1429,"line_end":1429,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplit_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplit_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474557,"byte_end":474659,"line_start":1430,"line_end":1430,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474661,"byte_end":474664,"line_start":1431,"line_end":1431,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474666,"byte_end":474687,"line_start":1432,"line_end":1432,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474689,"byte_end":474692,"line_start":1433,"line_end":1433,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474694,"byte_end":474762,"line_start":1434,"line_end":1434,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474764,"byte_end":474838,"line_start":1435,"line_end":1435,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474840,"byte_end":474850,"line_start":1436,"line_end":1436,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474852,"byte_end":474855,"line_start":1437,"line_end":1437,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474857,"byte_end":474930,"line_start":1438,"line_end":1438,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":474932,"byte_end":475002,"line_start":1439,"line_end":1439,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475004,"byte_end":475073,"line_start":1440,"line_end":1440,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475075,"byte_end":475151,"line_start":1441,"line_end":1441,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475153,"byte_end":475208,"line_start":1442,"line_end":1442,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475210,"byte_end":475213,"line_start":1443,"line_end":1443,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475215,"byte_end":475229,"line_start":1444,"line_end":1444,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475231,"byte_end":475234,"line_start":1445,"line_end":1445,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475236,"byte_end":475247,"line_start":1446,"line_end":1446,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475249,"byte_end":475276,"line_start":1447,"line_end":1447,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475278,"byte_end":475281,"line_start":1448,"line_end":1448,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475283,"byte_end":475323,"line_start":1449,"line_end":1449,"column_start":2,"column_end":42}},{"value":"/ for group in v.rsplit_mut(|_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475325,"byte_end":475374,"line_start":1450,"line_end":1450,"column_start":2,"column_end":51}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475376,"byte_end":475401,"line_start":1451,"line_end":1451,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475403,"byte_end":475408,"line_start":1452,"line_end":1452,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475410,"byte_end":475453,"line_start":1453,"line_end":1453,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475455,"byte_end":475462,"line_start":1454,"line_end":1454,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475464,"byte_end":475467,"line_start":1455,"line_end":1455,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475469,"byte_end":475531,"line_start":1456,"line_end":1456,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475533,"byte_end":475550,"line_start":1457,"line_end":1457,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475552,"byte_end":475582,"line_start":1458,"line_end":1458,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2521},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476706,"byte_end":476712,"line_start":1497,"line_end":1497,"column_start":9,"column_end":15},"name":"splitn","qualname":"<BitSlice<O, T>>::splitn","value":"pub fn splitn<F>(&Self, usize, F) -> SplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475733,"byte_end":475808,"line_start":1464,"line_end":1464,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475810,"byte_end":475886,"line_start":1465,"line_end":1465,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475888,"byte_end":475909,"line_start":1466,"line_end":1466,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475911,"byte_end":475914,"line_start":1467,"line_end":1467,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475916,"byte_end":475992,"line_start":1468,"line_end":1468,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475994,"byte_end":475997,"line_start":1469,"line_end":1469,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":475999,"byte_end":476013,"line_start":1470,"line_end":1470,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476015,"byte_end":476018,"line_start":1471,"line_end":1471,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476020,"byte_end":476114,"line_start":1472,"line_end":1472,"column_start":2,"column_end":96}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476116,"byte_end":476119,"line_start":1473,"line_end":1473,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476121,"byte_end":476142,"line_start":1474,"line_end":1474,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476144,"byte_end":476147,"line_start":1475,"line_end":1475,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476149,"byte_end":476217,"line_start":1476,"line_end":1476,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476219,"byte_end":476293,"line_start":1477,"line_end":1477,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476295,"byte_end":476305,"line_start":1478,"line_end":1478,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476307,"byte_end":476310,"line_start":1479,"line_end":1479,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476312,"byte_end":476326,"line_start":1480,"line_end":1480,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476328,"byte_end":476331,"line_start":1481,"line_end":1481,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once by set bits (i.e., `[0, 0,]`, `[0, 1, 0]`):","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476333,"byte_end":476407,"line_start":1482,"line_end":1482,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476409,"byte_end":476412,"line_start":1483,"line_end":1483,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476414,"byte_end":476425,"line_start":1484,"line_end":1484,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476427,"byte_end":476454,"line_start":1485,"line_end":1485,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476456,"byte_end":476459,"line_start":1486,"line_end":1486,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476461,"byte_end":476497,"line_start":1487,"line_end":1487,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476499,"byte_end":476502,"line_start":1488,"line_end":1488,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476504,"byte_end":476552,"line_start":1489,"line_end":1489,"column_start":2,"column_end":50}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476554,"byte_end":476587,"line_start":1490,"line_end":1490,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476589,"byte_end":476619,"line_start":1491,"line_end":1491,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476621,"byte_end":476630,"line_start":1492,"line_end":1492,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476632,"byte_end":476637,"line_start":1493,"line_end":1493,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476639,"byte_end":476646,"line_start":1494,"line_end":1494,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476648,"byte_end":476665,"line_start":1495,"line_end":1495,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476667,"byte_end":476697,"line_start":1496,"line_end":1496,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2523},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478164,"byte_end":478174,"line_start":1540,"line_end":1540,"column_start":9,"column_end":19},"name":"splitn_mut","qualname":"<BitSlice<O, T>>::splitn_mut","value":"pub fn splitn_mut<F>(&mut Self, usize, F) -> SplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. The matched bit is not contained\n in the subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476835,"byte_end":476910,"line_start":1502,"line_end":1502,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. The matched bit is not contained","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476912,"byte_end":476988,"line_start":1503,"line_end":1503,"column_start":2,"column_end":78}},{"value":"/ in the subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":476990,"byte_end":477011,"line_start":1504,"line_end":1504,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477013,"byte_end":477016,"line_start":1505,"line_end":1505,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477018,"byte_end":477094,"line_start":1506,"line_end":1506,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477096,"byte_end":477099,"line_start":1507,"line_end":1507,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477101,"byte_end":477115,"line_start":1508,"line_end":1508,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477117,"byte_end":477120,"line_start":1509,"line_end":1509,"column_start":2,"column_end":5}},{"value":"/ [`slice::splitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.splitn_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477122,"byte_end":477224,"line_start":1510,"line_end":1510,"column_start":2,"column_end":104}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477226,"byte_end":477229,"line_start":1511,"line_end":1511,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477231,"byte_end":477252,"line_start":1512,"line_end":1512,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477254,"byte_end":477257,"line_start":1513,"line_end":1513,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477259,"byte_end":477327,"line_start":1514,"line_end":1514,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477329,"byte_end":477403,"line_start":1515,"line_end":1515,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477405,"byte_end":477415,"line_start":1516,"line_end":1516,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477417,"byte_end":477420,"line_start":1517,"line_end":1517,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477422,"byte_end":477495,"line_start":1518,"line_end":1518,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477497,"byte_end":477567,"line_start":1519,"line_end":1519,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477569,"byte_end":477638,"line_start":1520,"line_end":1520,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477640,"byte_end":477716,"line_start":1521,"line_end":1521,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477718,"byte_end":477773,"line_start":1522,"line_end":1522,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477775,"byte_end":477778,"line_start":1523,"line_end":1523,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477780,"byte_end":477794,"line_start":1524,"line_end":1524,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477796,"byte_end":477799,"line_start":1525,"line_end":1525,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477801,"byte_end":477812,"line_start":1526,"line_end":1526,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477814,"byte_end":477841,"line_start":1527,"line_end":1527,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477843,"byte_end":477846,"line_start":1528,"line_end":1528,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477848,"byte_end":477888,"line_start":1529,"line_end":1529,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477890,"byte_end":477893,"line_start":1530,"line_end":1530,"column_start":2,"column_end":5}},{"value":"/ for group in v.splitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477895,"byte_end":477947,"line_start":1531,"line_end":1531,"column_start":2,"column_end":54}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477949,"byte_end":477974,"line_start":1532,"line_end":1532,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477976,"byte_end":477981,"line_start":1533,"line_end":1533,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":477983,"byte_end":478026,"line_start":1534,"line_end":1534,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478028,"byte_end":478035,"line_start":1535,"line_end":1535,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478037,"byte_end":478040,"line_start":1536,"line_end":1536,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::SplitNMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478042,"byte_end":478104,"line_start":1537,"line_end":1537,"column_start":2,"column_end":64}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478106,"byte_end":478123,"line_start":1538,"line_end":1538,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478125,"byte_end":478155,"line_start":1539,"line_end":1539,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2525},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479385,"byte_end":479392,"line_start":1580,"line_end":1580,"column_start":9,"column_end":16},"name":"rsplitn","qualname":"<BitSlice<O, T>>::rsplitn","value":"pub fn rsplitn<F>(&Self, usize, F) -> RSplitN<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478319,"byte_end":478394,"line_start":1545,"line_end":1545,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478396,"byte_end":478469,"line_start":1546,"line_end":1546,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478471,"byte_end":478541,"line_start":1547,"line_end":1547,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478543,"byte_end":478557,"line_start":1548,"line_end":1548,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478559,"byte_end":478562,"line_start":1549,"line_end":1549,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478564,"byte_end":478640,"line_start":1550,"line_end":1550,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478642,"byte_end":478645,"line_start":1551,"line_end":1551,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478647,"byte_end":478661,"line_start":1552,"line_end":1552,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478663,"byte_end":478666,"line_start":1553,"line_end":1553,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478668,"byte_end":478764,"line_start":1554,"line_end":1554,"column_start":2,"column_end":98}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478766,"byte_end":478769,"line_start":1555,"line_end":1555,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478771,"byte_end":478792,"line_start":1556,"line_end":1556,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478794,"byte_end":478797,"line_start":1557,"line_end":1557,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478799,"byte_end":478867,"line_start":1558,"line_end":1558,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478869,"byte_end":478943,"line_start":1559,"line_end":1559,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478945,"byte_end":478955,"line_start":1560,"line_end":1560,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478957,"byte_end":478960,"line_start":1561,"line_end":1561,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478962,"byte_end":478976,"line_start":1562,"line_end":1562,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478978,"byte_end":478981,"line_start":1563,"line_end":1563,"column_start":2,"column_end":5}},{"value":"/ Print the slice split once, starting from the end, by set bits (i.e.,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":478983,"byte_end":479056,"line_start":1564,"line_end":1564,"column_start":2,"column_end":75}},{"value":"/ `[0]`, `[0, 0, 1, 0]`):","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479058,"byte_end":479085,"line_start":1565,"line_end":1565,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479087,"byte_end":479090,"line_start":1566,"line_end":1566,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479092,"byte_end":479103,"line_start":1567,"line_end":1567,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479105,"byte_end":479132,"line_start":1568,"line_end":1568,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479134,"byte_end":479137,"line_start":1569,"line_end":1569,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479139,"byte_end":479175,"line_start":1570,"line_end":1570,"column_start":2,"column_end":38}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479177,"byte_end":479180,"line_start":1571,"line_end":1571,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479182,"byte_end":479231,"line_start":1572,"line_end":1572,"column_start":2,"column_end":51}},{"value":"/   # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479233,"byte_end":479266,"line_start":1573,"line_end":1573,"column_start":2,"column_end":35}},{"value":"/   println!(\"{:b}\", group);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479268,"byte_end":479298,"line_start":1574,"line_end":1574,"column_start":2,"column_end":32}},{"value":"/   # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479300,"byte_end":479309,"line_start":1575,"line_end":1575,"column_start":2,"column_end":11}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479311,"byte_end":479316,"line_start":1576,"line_end":1576,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479318,"byte_end":479325,"line_start":1577,"line_end":1577,"column_start":2,"column_end":9}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479327,"byte_end":479344,"line_start":1578,"line_end":1578,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479346,"byte_end":479376,"line_start":1579,"line_end":1579,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2527},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480912,"byte_end":480923,"line_start":1624,"line_end":1624,"column_start":9,"column_end":20},"name":"rsplitn_mut","qualname":"<BitSlice<O, T>>::rsplitn_mut","value":"pub fn rsplitn_mut<F>(&mut Self, usize, F) -> RSplitNMut<, O, T, F> where\nF: FnMut(usize, &bool) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over subslices separated by bits that match `pred`,\n limited to returning at most `n` items. This starts at the end of the\n slice and works backwards. The matched bit is not contained in the\n subslices.","sig":null,"attributes":[{"value":"/ Returns an iterator over subslices separated by bits that match `pred`,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479517,"byte_end":479592,"line_start":1585,"line_end":1585,"column_start":2,"column_end":77}},{"value":"/ limited to returning at most `n` items. This starts at the end of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479594,"byte_end":479667,"line_start":1586,"line_end":1586,"column_start":2,"column_end":75}},{"value":"/ slice and works backwards. The matched bit is not contained in the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479669,"byte_end":479739,"line_start":1587,"line_end":1587,"column_start":2,"column_end":72}},{"value":"/ subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479741,"byte_end":479755,"line_start":1588,"line_end":1588,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479757,"byte_end":479760,"line_start":1589,"line_end":1589,"column_start":2,"column_end":5}},{"value":"/ The last item returned, if any, will contain the remainder of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479762,"byte_end":479838,"line_start":1590,"line_end":1590,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479840,"byte_end":479843,"line_start":1591,"line_end":1591,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479845,"byte_end":479859,"line_start":1592,"line_end":1592,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479861,"byte_end":479864,"line_start":1593,"line_end":1593,"column_start":2,"column_end":5}},{"value":"/ [`slice::rsplitn_mut`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.rsplitn_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479866,"byte_end":479970,"line_start":1594,"line_end":1594,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479972,"byte_end":479975,"line_start":1595,"line_end":1595,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":479977,"byte_end":479998,"line_start":1596,"line_end":1596,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480000,"byte_end":480003,"line_start":1597,"line_end":1597,"column_start":2,"column_end":5}},{"value":"/ In order to allow more than one bit of information for the split","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480005,"byte_end":480073,"line_start":1598,"line_end":1598,"column_start":2,"column_end":70}},{"value":"/ decision, the predicate receives the index of each bit, as well as its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480075,"byte_end":480149,"line_start":1599,"line_end":1599,"column_start":2,"column_end":76}},{"value":"/ value.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480151,"byte_end":480161,"line_start":1600,"line_end":1600,"column_start":2,"column_end":12}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480163,"byte_end":480166,"line_start":1601,"line_end":1601,"column_start":2,"column_end":5}},{"value":"/ This iterator marks each yielded item as aliased, as iterators can be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480168,"byte_end":480241,"line_start":1602,"line_end":1602,"column_start":2,"column_end":75}},{"value":"/ used to yield multiple items into the same scope. If you are using","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480243,"byte_end":480313,"line_start":1603,"line_end":1603,"column_start":2,"column_end":72}},{"value":"/ the iterator in a manner that ensures that all yielded items have","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480315,"byte_end":480384,"line_start":1604,"line_end":1604,"column_start":2,"column_end":71}},{"value":"/ disjoint lifetimes, you can use the [`.remove_alias()`] adapter on it to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480386,"byte_end":480462,"line_start":1605,"line_end":1605,"column_start":2,"column_end":78}},{"value":"/ remove the alias marker from the yielded subslices.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480464,"byte_end":480519,"line_start":1606,"line_end":1606,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480521,"byte_end":480524,"line_start":1607,"line_end":1607,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480526,"byte_end":480540,"line_start":1608,"line_end":1608,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480542,"byte_end":480545,"line_start":1609,"line_end":1609,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480547,"byte_end":480558,"line_start":1610,"line_end":1610,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480560,"byte_end":480587,"line_start":1611,"line_end":1611,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480589,"byte_end":480592,"line_start":1612,"line_end":1612,"column_start":2,"column_end":5}},{"value":"/ let v = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480594,"byte_end":480634,"line_start":1613,"line_end":1613,"column_start":2,"column_end":42}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480636,"byte_end":480639,"line_start":1614,"line_end":1614,"column_start":2,"column_end":5}},{"value":"/ for group in v.rsplitn_mut(2, |_pos, bit| *bit) {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480641,"byte_end":480694,"line_start":1615,"line_end":1615,"column_start":2,"column_end":55}},{"value":"/   group.set(0, true);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480696,"byte_end":480721,"line_start":1616,"line_end":1616,"column_start":2,"column_end":27}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480723,"byte_end":480728,"line_start":1617,"line_end":1617,"column_start":2,"column_end":7}},{"value":"/ assert_eq!(v, bits![1, 0, 1, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480730,"byte_end":480773,"line_start":1618,"line_end":1618,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480775,"byte_end":480782,"line_start":1619,"line_end":1619,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480784,"byte_end":480787,"line_start":1620,"line_end":1620,"column_start":2,"column_end":5}},{"value":"/ [`.remove_alias()`]: crate::slice::RSplitNMut::remove_alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480789,"byte_end":480852,"line_start":1621,"line_end":1621,"column_start":2,"column_end":65}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480854,"byte_end":480871,"line_start":1622,"line_end":1622,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":480873,"byte_end":480903,"line_start":1623,"line_end":1623,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":2529},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482222,"byte_end":482230,"line_start":1664,"line_end":1664,"column_start":9,"column_end":17},"name":"contains","qualname":"<BitSlice<O, T>>::contains","value":"pub fn contains<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the slice contains a subslice that matches the given\n span.","sig":null,"attributes":[{"value":"/ Returns `true` if the slice contains a subslice that matches the given","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481070,"byte_end":481144,"line_start":1629,"line_end":1629,"column_start":2,"column_end":76}},{"value":"/ span.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481146,"byte_end":481155,"line_start":1630,"line_end":1630,"column_start":2,"column_end":11}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481157,"byte_end":481160,"line_start":1631,"line_end":1631,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481162,"byte_end":481176,"line_start":1632,"line_end":1632,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481178,"byte_end":481181,"line_start":1633,"line_end":1633,"column_start":2,"column_end":5}},{"value":"/ [`slice::contains`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.contains)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481183,"byte_end":481281,"line_start":1634,"line_end":1634,"column_start":2,"column_end":100}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481283,"byte_end":481286,"line_start":1635,"line_end":1635,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481288,"byte_end":481309,"line_start":1636,"line_end":1636,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481311,"byte_end":481314,"line_start":1637,"line_end":1637,"column_start":2,"column_end":5}},{"value":"/ This searches for a matching subslice (allowing different type","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481316,"byte_end":481382,"line_start":1638,"line_end":1638,"column_start":2,"column_end":68}},{"value":"/ parameters) rather than for a specific bit. Searching for a contained","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481384,"byte_end":481457,"line_start":1639,"line_end":1639,"column_start":2,"column_end":75}},{"value":"/ element with a given value is not as useful on a collection of `bool`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481459,"byte_end":481533,"line_start":1640,"line_end":1640,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481535,"byte_end":481538,"line_start":1641,"line_end":1641,"column_start":2,"column_end":5}},{"value":"/ Furthermore, `BitSlice` defines [`any`] and [`not_all`], which are","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481540,"byte_end":481610,"line_start":1642,"line_end":1642,"column_start":2,"column_end":72}},{"value":"/ optimized searchers for any `true` or `false` bit, respectively, in a","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481612,"byte_end":481685,"line_start":1643,"line_end":1643,"column_start":2,"column_end":75}},{"value":"/ sequence.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481687,"byte_end":481700,"line_start":1644,"line_end":1644,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481702,"byte_end":481705,"line_start":1645,"line_end":1645,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481707,"byte_end":481721,"line_start":1646,"line_end":1646,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481723,"byte_end":481726,"line_start":1647,"line_end":1647,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481728,"byte_end":481739,"line_start":1648,"line_end":1648,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481741,"byte_end":481768,"line_start":1649,"line_end":1649,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481770,"byte_end":481773,"line_start":1650,"line_end":1650,"column_start":2,"column_end":5}},{"value":"/ let data = 0b0101_1010u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481775,"byte_end":481804,"line_start":1651,"line_end":1651,"column_start":2,"column_end":31}},{"value":"/ let bits_msb = data.view_bits::<Msb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481806,"byte_end":481850,"line_start":1652,"line_end":1652,"column_start":2,"column_end":46}},{"value":"/ let bits_lsb = data.view_bits::<Lsb0>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481852,"byte_end":481896,"line_start":1653,"line_end":1653,"column_start":2,"column_end":46}},{"value":"/ assert!(bits_msb.contains(&bits_lsb[1 .. 5]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481898,"byte_end":481948,"line_start":1654,"line_end":1654,"column_start":2,"column_end":52}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481950,"byte_end":481957,"line_start":1655,"line_end":1655,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481959,"byte_end":481962,"line_start":1656,"line_end":1656,"column_start":2,"column_end":5}},{"value":"/ This example uses a palindrome pattern to demonstrate that the slice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":481964,"byte_end":482036,"line_start":1657,"line_end":1657,"column_start":2,"column_end":74}},{"value":"/ being searched for does not need to have the same type parameters as the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482038,"byte_end":482114,"line_start":1658,"line_end":1658,"column_start":2,"column_end":78}},{"value":"/ slice being searched.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482116,"byte_end":482141,"line_start":1659,"line_end":1659,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482143,"byte_end":482146,"line_start":1660,"line_end":1660,"column_start":2,"column_end":5}},{"value":"/ [`any`]: Self::any","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482148,"byte_end":482170,"line_start":1661,"line_end":1661,"column_start":2,"column_end":24}},{"value":"/ [`not_all`]: Self::not_all","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482172,"byte_end":482202,"line_start":1662,"line_end":1662,"column_start":2,"column_end":32}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482204,"byte_end":482213,"line_start":1663,"line_end":1663,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2533},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483163,"byte_end":483174,"line_start":1705,"line_end":1705,"column_start":9,"column_end":20},"name":"starts_with","qualname":"<BitSlice<O, T>>::starts_with","value":"pub fn starts_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482426,"byte_end":482482,"line_start":1676,"line_end":1676,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482484,"byte_end":482487,"line_start":1677,"line_end":1677,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482489,"byte_end":482503,"line_start":1678,"line_end":1678,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482505,"byte_end":482508,"line_start":1679,"line_end":1679,"column_start":2,"column_end":5}},{"value":"/ [`slice::starts_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.starts_with)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482510,"byte_end":482614,"line_start":1680,"line_end":1680,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482616,"byte_end":482619,"line_start":1681,"line_end":1681,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482621,"byte_end":482635,"line_start":1682,"line_end":1682,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482637,"byte_end":482640,"line_start":1683,"line_end":1683,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482642,"byte_end":482653,"line_start":1684,"line_end":1684,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482655,"byte_end":482682,"line_start":1685,"line_end":1685,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482684,"byte_end":482687,"line_start":1686,"line_end":1686,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482689,"byte_end":482719,"line_start":1687,"line_end":1687,"column_start":2,"column_end":32}},{"value":"/ assert!(v.starts_with(bits![0]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482721,"byte_end":482758,"line_start":1688,"line_end":1688,"column_start":2,"column_end":39}},{"value":"/ assert!(v.starts_with(bits![0, 1]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482760,"byte_end":482800,"line_start":1689,"line_end":1689,"column_start":2,"column_end":42}},{"value":"/ assert!(!v.starts_with(bits![1]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482802,"byte_end":482840,"line_start":1690,"line_end":1690,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.starts_with(bits![1, 0]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482842,"byte_end":482883,"line_start":1691,"line_end":1691,"column_start":2,"column_end":43}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482885,"byte_end":482892,"line_start":1692,"line_end":1692,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482894,"byte_end":482897,"line_start":1693,"line_end":1693,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482899,"byte_end":482955,"line_start":1694,"line_end":1694,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482957,"byte_end":482960,"line_start":1695,"line_end":1695,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482962,"byte_end":482973,"line_start":1696,"line_end":1696,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":482975,"byte_end":483002,"line_start":1697,"line_end":1697,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483004,"byte_end":483007,"line_start":1698,"line_end":1698,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483009,"byte_end":483036,"line_start":1699,"line_end":1699,"column_start":2,"column_end":29}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483038,"byte_end":483074,"line_start":1700,"line_end":1700,"column_start":2,"column_end":38}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483076,"byte_end":483096,"line_start":1701,"line_end":1701,"column_start":2,"column_end":22}},{"value":"/ assert!(v.starts_with(bits![]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483098,"byte_end":483134,"line_start":1702,"line_end":1702,"column_start":2,"column_end":38}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483136,"byte_end":483143,"line_start":1703,"line_end":1703,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483145,"byte_end":483154,"line_start":1704,"line_end":1704,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2536},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484090,"byte_end":484099,"line_start":1743,"line_end":1743,"column_start":9,"column_end":18},"name":"ends_with","qualname":"<BitSlice<O, T>>::ends_with","value":"pub fn ends_with<O2, T2>(&Self, &BitSlice<O2, T2>) -> bool where O2: BitOrder,\nT2: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the slice.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483369,"byte_end":483425,"line_start":1714,"line_end":1714,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483427,"byte_end":483430,"line_start":1715,"line_end":1715,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483432,"byte_end":483446,"line_start":1716,"line_end":1716,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483448,"byte_end":483451,"line_start":1717,"line_end":1717,"column_start":2,"column_end":5}},{"value":"/ [`slice::ends_with`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.ends_with)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483453,"byte_end":483553,"line_start":1718,"line_end":1718,"column_start":2,"column_end":102}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483555,"byte_end":483558,"line_start":1719,"line_end":1719,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483560,"byte_end":483574,"line_start":1720,"line_end":1720,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483576,"byte_end":483579,"line_start":1721,"line_end":1721,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483581,"byte_end":483592,"line_start":1722,"line_end":1722,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483594,"byte_end":483621,"line_start":1723,"line_end":1723,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483623,"byte_end":483626,"line_start":1724,"line_end":1724,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483628,"byte_end":483658,"line_start":1725,"line_end":1725,"column_start":2,"column_end":32}},{"value":"/ assert!(v.ends_with(bits![0]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483660,"byte_end":483695,"line_start":1726,"line_end":1726,"column_start":2,"column_end":37}},{"value":"/ assert!(v.ends_with(bits![0; 2]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483697,"byte_end":483735,"line_start":1727,"line_end":1727,"column_start":2,"column_end":40}},{"value":"/ assert!(!v.ends_with(bits![1]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483737,"byte_end":483773,"line_start":1728,"line_end":1728,"column_start":2,"column_end":38}},{"value":"/ assert!(!v.ends_with(bits![1, 0]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483775,"byte_end":483814,"line_start":1729,"line_end":1729,"column_start":2,"column_end":41}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483816,"byte_end":483823,"line_start":1730,"line_end":1730,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483825,"byte_end":483828,"line_start":1731,"line_end":1731,"column_start":2,"column_end":5}},{"value":"/ Always returns `true` if `needle` is an empty slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483830,"byte_end":483886,"line_start":1732,"line_end":1732,"column_start":2,"column_end":58}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483888,"byte_end":483891,"line_start":1733,"line_end":1733,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483893,"byte_end":483904,"line_start":1734,"line_end":1734,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483906,"byte_end":483933,"line_start":1735,"line_end":1735,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483935,"byte_end":483938,"line_start":1736,"line_end":1736,"column_start":2,"column_end":5}},{"value":"/ let v = bits![0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483940,"byte_end":483967,"line_start":1737,"line_end":1737,"column_start":2,"column_end":29}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":483969,"byte_end":484003,"line_start":1738,"line_end":1738,"column_start":2,"column_end":36}},{"value":"/ let v = bits![];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484005,"byte_end":484025,"line_start":1739,"line_end":1739,"column_start":2,"column_end":22}},{"value":"/ assert!(v.ends_with(bits![]));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484027,"byte_end":484061,"line_start":1740,"line_end":1740,"column_start":2,"column_end":36}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484063,"byte_end":484070,"line_start":1741,"line_end":1741,"column_start":2,"column_end":9}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484072,"byte_end":484081,"line_start":1742,"line_end":1742,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2539},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485411,"byte_end":485422,"line_start":1793,"line_end":1793,"column_start":9,"column_end":20},"name":"rotate_left","qualname":"<BitSlice<O, T>>::rotate_left","value":"pub fn rotate_left(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `by` bits of the slice\n move to the end while the last `self.len() - by` bits move to the\n front. After calling `.rotate_left()`, the bit previously at index `by`\n will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `by` bits of the slice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484320,"byte_end":484393,"line_start":1753,"line_end":1753,"column_start":2,"column_end":75}},{"value":"/ move to the end while the last `self.len() - by` bits move to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484395,"byte_end":484464,"line_start":1754,"line_end":1754,"column_start":2,"column_end":71}},{"value":"/ front. After calling `.rotate_left()`, the bit previously at index `by`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484466,"byte_end":484541,"line_start":1755,"line_end":1755,"column_start":2,"column_end":77}},{"value":"/ will become the first bit in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484543,"byte_end":484586,"line_start":1756,"line_end":1756,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484588,"byte_end":484591,"line_start":1757,"line_end":1757,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484593,"byte_end":484607,"line_start":1758,"line_end":1758,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484609,"byte_end":484612,"line_start":1759,"line_end":1759,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_left`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_left)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484614,"byte_end":484711,"line_start":1760,"line_end":1760,"column_start":2,"column_end":99}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484713,"byte_end":484716,"line_start":1761,"line_end":1761,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484718,"byte_end":484730,"line_start":1762,"line_end":1762,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484732,"byte_end":484735,"line_start":1763,"line_end":1763,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484737,"byte_end":484807,"line_start":1764,"line_end":1764,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484809,"byte_end":484881,"line_start":1765,"line_end":1765,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484883,"byte_end":484886,"line_start":1766,"line_end":1766,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484888,"byte_end":484904,"line_start":1767,"line_end":1767,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484906,"byte_end":484909,"line_start":1768,"line_end":1768,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484911,"byte_end":484953,"line_start":1769,"line_end":1769,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484955,"byte_end":484958,"line_start":1770,"line_end":1770,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484960,"byte_end":484974,"line_start":1771,"line_end":1771,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484976,"byte_end":484979,"line_start":1772,"line_end":1772,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484981,"byte_end":484992,"line_start":1773,"line_end":1773,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":484994,"byte_end":485021,"line_start":1774,"line_end":1774,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485023,"byte_end":485026,"line_start":1775,"line_end":1775,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485028,"byte_end":485068,"line_start":1776,"line_end":1776,"column_start":2,"column_end":42}},{"value":"/ a.rotate_left(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485070,"byte_end":485091,"line_start":1777,"line_end":1777,"column_start":2,"column_end":23}},{"value":"/ assert_eq!(a, bits![1, 0, 1, 0, 0, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485093,"byte_end":485136,"line_start":1778,"line_end":1778,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485138,"byte_end":485145,"line_start":1779,"line_end":1779,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485147,"byte_end":485150,"line_start":1780,"line_end":1780,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485152,"byte_end":485176,"line_start":1781,"line_end":1781,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485178,"byte_end":485181,"line_start":1782,"line_end":1782,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485183,"byte_end":485194,"line_start":1783,"line_end":1783,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485196,"byte_end":485223,"line_start":1784,"line_end":1784,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485225,"byte_end":485228,"line_start":1785,"line_end":1785,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485230,"byte_end":485270,"line_start":1786,"line_end":1786,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_left(1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485272,"byte_end":485301,"line_start":1787,"line_end":1787,"column_start":2,"column_end":31}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485303,"byte_end":485346,"line_start":1788,"line_end":1788,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485348,"byte_end":485355,"line_start":1789,"line_end":1789,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485357,"byte_end":485360,"line_start":1790,"line_end":1790,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485362,"byte_end":485391,"line_start":1791,"line_end":1791,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":485393,"byte_end":485402,"line_start":1792,"line_end":1792,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2540},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487753,"byte_end":487765,"line_start":1868,"line_end":1868,"column_start":9,"column_end":21},"name":"rotate_right","qualname":"<BitSlice<O, T>>::rotate_right","value":"pub fn rotate_right(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Rotates the slice in-place such that the first `self.len() - by` bits of\n the slice move to the end while the last `by` bits move to the front.\n After calling `.rotate_right()`, the bit previously at index `self.len()\n - by` will become the first bit in the slice.","sig":null,"attributes":[{"value":"/ Rotates the slice in-place such that the first `self.len() - by` bits of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486644,"byte_end":486720,"line_start":1828,"line_end":1828,"column_start":2,"column_end":78}},{"value":"/ the slice move to the end while the last `by` bits move to the front.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486722,"byte_end":486795,"line_start":1829,"line_end":1829,"column_start":2,"column_end":75}},{"value":"/ After calling `.rotate_right()`, the bit previously at index `self.len()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486797,"byte_end":486873,"line_start":1830,"line_end":1830,"column_start":2,"column_end":78}},{"value":"/ - by` will become the first bit in the slice.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486875,"byte_end":486924,"line_start":1831,"line_end":1831,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486926,"byte_end":486929,"line_start":1832,"line_end":1832,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486931,"byte_end":486945,"line_start":1833,"line_end":1833,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486947,"byte_end":486950,"line_start":1834,"line_end":1834,"column_start":2,"column_end":5}},{"value":"/ [`slice::rotate_right`](https://doc.rust-lang.org/stable/std/primitive.slice.html#rotate_right)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":486952,"byte_end":487051,"line_start":1835,"line_end":1835,"column_start":2,"column_end":101}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487053,"byte_end":487056,"line_start":1836,"line_end":1836,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487058,"byte_end":487070,"line_start":1837,"line_end":1837,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487072,"byte_end":487075,"line_start":1838,"line_end":1838,"column_start":2,"column_end":5}},{"value":"/ This function will panic if `by` is greater than the length of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487077,"byte_end":487147,"line_start":1839,"line_end":1839,"column_start":2,"column_end":72}},{"value":"/ slice. Note that `by == self.len()` does *not* panic and is a noöp.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487149,"byte_end":487221,"line_start":1840,"line_end":1840,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487223,"byte_end":487226,"line_start":1841,"line_end":1841,"column_start":2,"column_end":5}},{"value":"/ # Complexity","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487228,"byte_end":487244,"line_start":1842,"line_end":1842,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487246,"byte_end":487249,"line_start":1843,"line_end":1843,"column_start":2,"column_end":5}},{"value":"/ Takes linear (in [`self.len()`]) time.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487251,"byte_end":487293,"line_start":1844,"line_end":1844,"column_start":2,"column_end":44}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487295,"byte_end":487298,"line_start":1845,"line_end":1845,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487300,"byte_end":487314,"line_start":1846,"line_end":1846,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487316,"byte_end":487319,"line_start":1847,"line_end":1847,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487321,"byte_end":487332,"line_start":1848,"line_end":1848,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487334,"byte_end":487361,"line_start":1849,"line_end":1849,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487363,"byte_end":487366,"line_start":1850,"line_end":1850,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 1, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487368,"byte_end":487408,"line_start":1851,"line_end":1851,"column_start":2,"column_end":42}},{"value":"/ a.rotate_right(2);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487410,"byte_end":487432,"line_start":1852,"line_end":1852,"column_start":2,"column_end":24}},{"value":"/ assert_eq!(a, bits![1, 0, 0, 0, 1, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487434,"byte_end":487477,"line_start":1853,"line_end":1853,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487479,"byte_end":487486,"line_start":1854,"line_end":1854,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487488,"byte_end":487491,"line_start":1855,"line_end":1855,"column_start":2,"column_end":5}},{"value":"/ Rotating a subslice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487493,"byte_end":487517,"line_start":1856,"line_end":1856,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487519,"byte_end":487522,"line_start":1857,"line_end":1857,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487524,"byte_end":487535,"line_start":1858,"line_end":1858,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487537,"byte_end":487564,"line_start":1859,"line_end":1859,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487566,"byte_end":487569,"line_start":1860,"line_end":1860,"column_start":2,"column_end":5}},{"value":"/ let a = bits![mut 0, 0, 1, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487571,"byte_end":487611,"line_start":1861,"line_end":1861,"column_start":2,"column_end":42}},{"value":"/ a[1 .. 5].rotate_right(1);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487613,"byte_end":487643,"line_start":1862,"line_end":1862,"column_start":2,"column_end":32}},{"value":"/ assert_eq!(a, bits![0, 1, 0, 1, 0, 1]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487645,"byte_end":487688,"line_start":1863,"line_end":1863,"column_start":2,"column_end":45}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487690,"byte_end":487697,"line_start":1864,"line_end":1864,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487699,"byte_end":487702,"line_start":1865,"line_end":1865,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487704,"byte_end":487733,"line_start":1866,"line_end":1866,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":487735,"byte_end":487744,"line_start":1867,"line_end":1867,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2541},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488526,"byte_end":488542,"line_start":1896,"line_end":1896,"column_start":9,"column_end":25},"name":"clone_from_slice","qualname":"<BitSlice<O, T>>::clone_from_slice","value":"pub fn clone_from_slice<O2, T2>(&mut Self, &BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488397,"byte_end":488414,"line_start":1893,"line_end":1893,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488416,"byte_end":488446,"line_start":1894,"line_end":1894,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `clone_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488448,"byte_end":488517,"line_start":1895,"line_end":1895,"column_start":2,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":2544},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488809,"byte_end":488824,"line_start":1908,"line_end":1908,"column_start":9,"column_end":24},"name":"copy_from_slice","qualname":"<BitSlice<O, T>>::copy_from_slice","value":"pub fn copy_from_slice(&mut Self, &Self)","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488681,"byte_end":488698,"line_start":1905,"line_end":1905,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488700,"byte_end":488730,"line_start":1906,"line_end":1906,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `copy_from_bitslice` to copy between bitslices\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488732,"byte_end":488800,"line_start":1907,"line_end":1907,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2545},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489874,"byte_end":489885,"line_start":1944,"line_end":1944,"column_start":9,"column_end":20},"name":"copy_within","qualname":"<BitSlice<O, T>>::copy_within","value":"pub fn copy_within<R>(&mut Self, R, usize) where R: RangeBounds<usize>","parent":null,"children":[],"decl_id":null,"docs":" Copies bits from one part of the slice to another part of itself.","sig":null,"attributes":[{"value":"/ Copies bits from one part of the slice to another part of itself.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488886,"byte_end":488955,"line_start":1912,"line_end":1912,"column_start":2,"column_end":71}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488957,"byte_end":488960,"line_start":1913,"line_end":1913,"column_start":2,"column_end":5}},{"value":"/ `src` is the range within `self` to copy from. `dest` is the starting","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":488962,"byte_end":489035,"line_start":1914,"line_end":1914,"column_start":2,"column_end":75}},{"value":"/ index of the range within `self` to copy to, which will have the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489037,"byte_end":489110,"line_start":1915,"line_end":1915,"column_start":2,"column_end":75}},{"value":"/ length as `src`. The two ranges may overlap. The ends of the two ranges","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489112,"byte_end":489187,"line_start":1916,"line_end":1916,"column_start":2,"column_end":77}},{"value":"/ must be less than or equal to [`self.len()`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489189,"byte_end":489238,"line_start":1917,"line_end":1917,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489240,"byte_end":489243,"line_start":1918,"line_end":1918,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489245,"byte_end":489259,"line_start":1919,"line_end":1919,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489261,"byte_end":489264,"line_start":1920,"line_end":1920,"column_start":2,"column_end":5}},{"value":"/ [`slice::copy_within`](https://doc.rust-lang.org/stable/std/primitive.slice.html#method.copy_within)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489266,"byte_end":489370,"line_start":1921,"line_end":1921,"column_start":2,"column_end":106}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489372,"byte_end":489375,"line_start":1922,"line_end":1922,"column_start":2,"column_end":5}},{"value":"/ # Panics","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489377,"byte_end":489389,"line_start":1923,"line_end":1923,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489391,"byte_end":489394,"line_start":1924,"line_end":1924,"column_start":2,"column_end":5}},{"value":"/ This function will panic if either range exceeds the end of the slice,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489396,"byte_end":489470,"line_start":1925,"line_end":1925,"column_start":2,"column_end":76}},{"value":"/ or if the end of `src` is before the start.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489472,"byte_end":489519,"line_start":1926,"line_end":1926,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489521,"byte_end":489524,"line_start":1927,"line_end":1927,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489526,"byte_end":489540,"line_start":1928,"line_end":1928,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489542,"byte_end":489545,"line_start":1929,"line_end":1929,"column_start":2,"column_end":5}},{"value":"/ Copying four bits within a slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489547,"byte_end":489584,"line_start":1930,"line_end":1930,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489586,"byte_end":489589,"line_start":1931,"line_end":1931,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489591,"byte_end":489602,"line_start":1932,"line_end":1932,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489604,"byte_end":489631,"line_start":1933,"line_end":1933,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489633,"byte_end":489636,"line_start":1934,"line_end":1934,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489638,"byte_end":489699,"line_start":1935,"line_end":1935,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489701,"byte_end":489704,"line_start":1936,"line_end":1936,"column_start":2,"column_end":5}},{"value":"/ bits.copy_within(1 .. 5, 8);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489706,"byte_end":489738,"line_start":1937,"line_end":1937,"column_start":2,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489740,"byte_end":489743,"line_start":1938,"line_end":1938,"column_start":2,"column_end":5}},{"value":"/ assert_eq!(bits, bits![1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 0]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489745,"byte_end":489809,"line_start":1939,"line_end":1939,"column_start":2,"column_end":66}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489811,"byte_end":489818,"line_start":1940,"line_end":1940,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489820,"byte_end":489823,"line_start":1941,"line_end":1941,"column_start":2,"column_end":5}},{"value":"/ [`self.len()`]: Self::len","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489825,"byte_end":489854,"line_start":1942,"line_end":1942,"column_start":2,"column_end":31}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":489856,"byte_end":489865,"line_start":1943,"line_end":1943,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2547},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490436,"byte_end":490451,"line_start":1961,"line_end":1961,"column_start":9,"column_end":24},"name":"swap_with_slice","qualname":"<BitSlice<O, T>>::swap_with_slice","value":"pub fn swap_with_slice<O2, T2>(&mut Self, &mut BitSlice<O2, T2>) where\nO2: BitOrder, T2: BitStore","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490308,"byte_end":490325,"line_start":1958,"line_end":1958,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490327,"byte_end":490357,"line_start":1959,"line_end":1959,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `swap_with_bitslice` to swap between bitslices\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490359,"byte_end":490427,"line_start":1960,"line_end":1960,"column_start":2,"column_end":70}}]},{"kind":"Method","id":{"krate":0,"index":2550},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493227,"byte_end":493235,"line_start":2038,"line_end":2038,"column_start":16,"column_end":24},"name":"align_to","qualname":"<BitSlice<O, T>>::align_to","value":"pub unsafe fn align_to<U>(&Self) -> (&Self, &BitSlice<O, U>, &Self) where\nU: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490582,"byte_end":490650,"line_start":1969,"line_end":1969,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490652,"byte_end":490693,"line_start":1970,"line_end":1970,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490695,"byte_end":490698,"line_start":1971,"line_end":1971,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490700,"byte_end":490714,"line_start":1972,"line_end":1972,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490716,"byte_end":490719,"line_start":1973,"line_end":1973,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490721,"byte_end":490744,"line_start":1974,"line_end":1974,"column_start":2,"column_end":25}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490746,"byte_end":490749,"line_start":1975,"line_end":1975,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490751,"byte_end":490772,"line_start":1976,"line_end":1976,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490774,"byte_end":490777,"line_start":1977,"line_end":1977,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490779,"byte_end":490852,"line_start":1978,"line_end":1978,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490854,"byte_end":490929,"line_start":1979,"line_end":1979,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":490931,"byte_end":491005,"line_start":1980,"line_end":1980,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491007,"byte_end":491083,"line_start":1981,"line_end":1981,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491085,"byte_end":491156,"line_start":1982,"line_end":1982,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491158,"byte_end":491182,"line_start":1983,"line_end":1983,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491184,"byte_end":491187,"line_start":1984,"line_end":1984,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491189,"byte_end":491209,"line_start":1985,"line_end":1985,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491211,"byte_end":491214,"line_start":1986,"line_end":1986,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491216,"byte_end":491288,"line_start":1987,"line_end":1987,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491290,"byte_end":491365,"line_start":1988,"line_end":1988,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`Domain`] restrictions: the left and right slices","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491367,"byte_end":491439,"line_start":1989,"line_end":1989,"column_start":2,"column_end":74}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491441,"byte_end":491517,"line_start":1990,"line_end":1990,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491519,"byte_end":491592,"line_start":1991,"line_end":1991,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to`] on the domain body (if present).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491594,"byte_end":491670,"line_start":1992,"line_end":1992,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491672,"byte_end":491675,"line_start":1993,"line_end":1993,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491677,"byte_end":491753,"line_start":1994,"line_end":1994,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491755,"byte_end":491830,"line_start":1995,"line_end":1995,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491832,"byte_end":491903,"line_start":1996,"line_end":1996,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491905,"byte_end":491981,"line_start":1997,"line_end":1997,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":491983,"byte_end":492049,"line_start":1998,"line_end":1998,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492051,"byte_end":492079,"line_start":1999,"line_end":1999,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492081,"byte_end":492084,"line_start":2000,"line_end":2000,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492086,"byte_end":492098,"line_start":2001,"line_end":2001,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492100,"byte_end":492103,"line_start":2002,"line_end":2002,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492105,"byte_end":492180,"line_start":2003,"line_end":2003,"column_start":2,"column_end":77}},{"value":"/ memory region in the retured middle slice, so all of the usual caveats","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492182,"byte_end":492256,"line_start":2004,"line_end":2004,"column_start":2,"column_end":76}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492258,"byte_end":492323,"line_start":2005,"line_end":2005,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492325,"byte_end":492328,"line_start":2006,"line_end":2006,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492330,"byte_end":492344,"line_start":2007,"line_end":2007,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492346,"byte_end":492349,"line_start":2008,"line_end":2008,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492351,"byte_end":492367,"line_start":2009,"line_end":2009,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492369,"byte_end":492372,"line_start":2010,"line_end":2010,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492374,"byte_end":492385,"line_start":2011,"line_end":2011,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492387,"byte_end":492414,"line_start":2012,"line_end":2012,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492416,"byte_end":492419,"line_start":2013,"line_end":2013,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492421,"byte_end":492433,"line_start":2014,"line_end":2014,"column_start":2,"column_end":14}},{"value":"/   let bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492435,"byte_end":492484,"line_start":2015,"line_end":2015,"column_start":2,"column_end":51}},{"value":"/   let bits = bytes.view_bits::<LocalBits>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492486,"byte_end":492534,"line_start":2016,"line_end":2016,"column_start":2,"column_end":50}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492536,"byte_end":492596,"line_start":2017,"line_end":2017,"column_start":2,"column_end":62}},{"value":"/   match prefix.len() {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492598,"byte_end":492624,"line_start":2018,"line_end":2018,"column_start":2,"column_end":28}},{"value":"/     0 => {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492626,"byte_end":492640,"line_start":2019,"line_end":2019,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(shorts, bits[.. 48]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492642,"byte_end":492684,"line_start":2020,"line_end":2020,"column_start":2,"column_end":44}},{"value":"/       assert_eq!(suffix, bits[48 ..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492686,"byte_end":492728,"line_start":2021,"line_end":2021,"column_start":2,"column_end":44}},{"value":"/     },","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492730,"byte_end":492740,"line_start":2022,"line_end":2022,"column_start":2,"column_end":12}},{"value":"/     8 => {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492742,"byte_end":492756,"line_start":2023,"line_end":2023,"column_start":2,"column_end":16}},{"value":"/       assert_eq!(prefix, bits[.. 8]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492758,"byte_end":492799,"line_start":2024,"line_end":2024,"column_start":2,"column_end":43}},{"value":"/       assert_eq!(shorts, bits[8 ..]);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492801,"byte_end":492842,"line_start":2025,"line_end":2025,"column_start":2,"column_end":43}},{"value":"/     },","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492844,"byte_end":492854,"line_start":2026,"line_end":2026,"column_start":2,"column_end":12}},{"value":"/     _ => unreachable!(\"This case will not occur\")","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492856,"byte_end":492909,"line_start":2027,"line_end":2027,"column_start":2,"column_end":55}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492911,"byte_end":492918,"line_start":2028,"line_end":2028,"column_start":2,"column_end":9}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492920,"byte_end":492925,"line_start":2029,"line_end":2029,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492927,"byte_end":492934,"line_start":2030,"line_end":2030,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492936,"byte_end":492939,"line_start":2031,"line_end":2031,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492941,"byte_end":492971,"line_start":2032,"line_end":2032,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":492973,"byte_end":493013,"line_start":2033,"line_end":2033,"column_start":2,"column_end":42}},{"value":"/ [`Domain`]: crate::domain::Domain","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493015,"byte_end":493052,"line_start":2034,"line_end":2034,"column_start":2,"column_end":39}},{"value":"/ [`slice::align_to`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493054,"byte_end":493152,"line_start":2035,"line_end":2035,"column_start":2,"column_end":100}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493154,"byte_end":493200,"line_start":2036,"line_end":2036,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493202,"byte_end":493211,"line_start":2037,"line_end":2037,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2552},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495858,"byte_end":495870,"line_start":2108,"line_end":2108,"column_start":16,"column_end":28},"name":"align_to_mut","qualname":"<BitSlice<O, T>>::align_to_mut","value":"pub unsafe fn align_to_mut<U>(&mut Self)\n-> (&mut Self, &mut BitSlice<O, U>, &mut Self) where U: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Transmute the bit-slice to a bit-slice of another type, ensuring\n alignment of the types is maintained.","sig":null,"attributes":[{"value":"/ Transmute the bit-slice to a bit-slice of another type, ensuring","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493440,"byte_end":493508,"line_start":2048,"line_end":2048,"column_start":2,"column_end":70}},{"value":"/ alignment of the types is maintained.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493510,"byte_end":493551,"line_start":2049,"line_end":2049,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493553,"byte_end":493556,"line_start":2050,"line_end":2050,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493558,"byte_end":493572,"line_start":2051,"line_end":2051,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493574,"byte_end":493577,"line_start":2052,"line_end":2052,"column_start":2,"column_end":5}},{"value":"/ [`slice::align_to_mut`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493579,"byte_end":493606,"line_start":2053,"line_end":2053,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493608,"byte_end":493611,"line_start":2054,"line_end":2054,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493613,"byte_end":493634,"line_start":2055,"line_end":2055,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493636,"byte_end":493639,"line_start":2056,"line_end":2056,"column_start":2,"column_end":5}},{"value":"/ Type `U` is **required** to have the same [`BitStore`] type family as","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493641,"byte_end":493714,"line_start":2057,"line_end":2057,"column_start":2,"column_end":75}},{"value":"/ type `T`. If `T` is a fundamental integer, so must `U` be; if `T` is an","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493716,"byte_end":493791,"line_start":2058,"line_end":2058,"column_start":2,"column_end":77}},{"value":"/ [`::Alias`] type, then so must `U`. Changing the type family with this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493793,"byte_end":493867,"line_start":2059,"line_end":2059,"column_start":2,"column_end":76}},{"value":"/ method is **unsound** and strictly forbidden. Unfortunately, this cannot","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493869,"byte_end":493945,"line_start":2060,"line_end":2060,"column_start":2,"column_end":78}},{"value":"/ be encoded in the type system, so you are required to abide by this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":493947,"byte_end":494018,"line_start":2061,"line_end":2061,"column_start":2,"column_end":73}},{"value":"/ limitation yourself.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494020,"byte_end":494044,"line_start":2062,"line_end":2062,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494046,"byte_end":494049,"line_start":2063,"line_end":2063,"column_start":2,"column_end":5}},{"value":"/ # Implementation","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494051,"byte_end":494071,"line_start":2064,"line_end":2064,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494073,"byte_end":494076,"line_start":2065,"line_end":2065,"column_start":2,"column_end":5}},{"value":"/ The algorithm used to implement this function attempts to create the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494078,"byte_end":494150,"line_start":2066,"line_end":2066,"column_start":2,"column_end":74}},{"value":"/ widest possible span for the middle slice. However, the slice divisions","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494152,"byte_end":494227,"line_start":2067,"line_end":2067,"column_start":2,"column_end":77}},{"value":"/ must abide by the [`DomainMut`] restrictions: the left and right slices","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494229,"byte_end":494304,"line_start":2068,"line_end":2068,"column_start":2,"column_end":77}},{"value":"/ produced by this function will include the head and tail elements of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494306,"byte_end":494382,"line_start":2069,"line_end":2069,"column_start":2,"column_end":78}},{"value":"/ domain (if present), as well as the left and right subslices (if any)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494384,"byte_end":494457,"line_start":2070,"line_end":2070,"column_start":2,"column_end":75}},{"value":"/ produced by calling [`slice::align_to_mut`] on the domain body (if","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494459,"byte_end":494529,"line_start":2071,"line_end":2071,"column_start":2,"column_end":72}},{"value":"/ present).","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494531,"byte_end":494544,"line_start":2072,"line_end":2072,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494546,"byte_end":494549,"line_start":2073,"line_end":2073,"column_start":2,"column_end":5}},{"value":"/ The standard library implementation currently maximizes the width of the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494551,"byte_end":494627,"line_start":2074,"line_end":2074,"column_start":2,"column_end":78}},{"value":"/ center slice, but its API does not guarantee this property, and retains","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494629,"byte_end":494704,"line_start":2075,"line_end":2075,"column_start":2,"column_end":77}},{"value":"/ the right to produce pessimal slices. As such, this function cannot","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494706,"byte_end":494777,"line_start":2076,"line_end":2076,"column_start":2,"column_end":73}},{"value":"/ guarantee maximal center slice width either, and you cannot rely on this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494779,"byte_end":494855,"line_start":2077,"line_end":2077,"column_start":2,"column_end":78}},{"value":"/ behavior for *correctness* of your work; it is only a possible","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494857,"byte_end":494923,"line_start":2078,"line_end":2078,"column_start":2,"column_end":68}},{"value":"/ performance improvement.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494925,"byte_end":494953,"line_start":2079,"line_end":2079,"column_start":2,"column_end":30}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494955,"byte_end":494958,"line_start":2080,"line_end":2080,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494960,"byte_end":494972,"line_start":2081,"line_end":2081,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494974,"byte_end":494977,"line_start":2082,"line_end":2082,"column_start":2,"column_end":5}},{"value":"/ This method is essentially a [`mem::transmute`][mt] with respect to the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":494979,"byte_end":495054,"line_start":2083,"line_end":2083,"column_start":2,"column_end":77}},{"value":"/ memory region in the retured middle slice, so all of the usual caveats","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495056,"byte_end":495130,"line_start":2084,"line_end":2084,"column_start":2,"column_end":76}},{"value":"/ pertaining to [`mem::transmute::<T, U>`][mt] also apply here.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495132,"byte_end":495197,"line_start":2085,"line_end":2085,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495199,"byte_end":495202,"line_start":2086,"line_end":2086,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495204,"byte_end":495218,"line_start":2087,"line_end":2087,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495220,"byte_end":495223,"line_start":2088,"line_end":2088,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495225,"byte_end":495241,"line_start":2089,"line_end":2089,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495243,"byte_end":495246,"line_start":2090,"line_end":2090,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495248,"byte_end":495259,"line_start":2091,"line_end":2091,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495261,"byte_end":495288,"line_start":2092,"line_end":2092,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495290,"byte_end":495293,"line_start":2093,"line_end":2093,"column_start":2,"column_end":5}},{"value":"/ unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495295,"byte_end":495307,"line_start":2094,"line_end":2094,"column_start":2,"column_end":14}},{"value":"/   let mut bytes: [u8; 7] = [1, 2, 3, 4, 5, 6, 7];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495309,"byte_end":495362,"line_start":2095,"line_end":2095,"column_start":2,"column_end":55}},{"value":"/   let bits = bytes.view_bits_mut::<LocalBits>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495364,"byte_end":495416,"line_start":2096,"line_end":2096,"column_start":2,"column_end":54}},{"value":"/   let (prefix, shorts, suffix) = bits.align_to_mut::<u16>();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495418,"byte_end":495482,"line_start":2097,"line_end":2097,"column_start":2,"column_end":66}},{"value":"/   //  same access and behavior as in `align_to`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495484,"byte_end":495535,"line_start":2098,"line_end":2098,"column_start":2,"column_end":53}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495537,"byte_end":495542,"line_start":2099,"line_end":2099,"column_start":2,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495544,"byte_end":495551,"line_start":2100,"line_end":2100,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495553,"byte_end":495556,"line_start":2101,"line_end":2101,"column_start":2,"column_end":5}},{"value":"/ [mt]: core::mem::transmute","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495558,"byte_end":495588,"line_start":2102,"line_end":2102,"column_start":2,"column_end":32}},{"value":"/ [`BitStore`]: crate::store::BitStore","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495590,"byte_end":495630,"line_start":2103,"line_end":2103,"column_start":2,"column_end":42}},{"value":"/ [`DomainMut`]: crate::domain::DomainMut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495632,"byte_end":495675,"line_start":2104,"line_end":2104,"column_start":2,"column_end":45}},{"value":"/ [`slice::align_to_mut`]: https://doc.rust-lang.org/stable/std/primitive.slice.html#method.align_to_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495677,"byte_end":495783,"line_start":2105,"line_end":2105,"column_start":2,"column_end":108}},{"value":"/ [`::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495785,"byte_end":495831,"line_start":2106,"line_end":2106,"column_start":2,"column_end":48}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":495833,"byte_end":495842,"line_start":2107,"line_end":2107,"column_start":2,"column_end":11}}]},{"kind":"Function","id":{"krate":0,"index":2554},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498064,"byte_end":498072,"line_start":2201,"line_end":2201,"column_start":8,"column_end":16},"name":"from_ref","qualname":"::slice::api::from_ref","value":"pub fn from_ref<O, T>(&T) -> &BitSlice<O, T> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_ref`](core::slice::from_ref)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":497840,"byte_end":498007,"line_start":2191,"line_end":2198,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498008,"byte_end":498025,"line_start":2199,"line_end":2199,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498026,"byte_end":498056,"line_start":2200,"line_end":2200,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2557},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498401,"byte_end":498409,"line_start":2219,"line_end":2219,"column_start":8,"column_end":16},"name":"from_mut","qualname":"::slice::api::from_mut","value":"pub fn from_mut<O, T>(&mut T) -> &mut BitSlice<O, T> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Converts a reference to `T` into a [`BitSlice`] over one element.","sig":null,"attributes":[{"value":"* Converts a reference to `T` into a [`BitSlice`] over one element.\n\n# Original\n\n[`slice::from_mut`](core::slice::from_mut)\n\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498177,"byte_end":498344,"line_start":2209,"line_end":2216,"column_start":1,"column_end":4}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498345,"byte_end":498362,"line_start":2217,"line_end":2217,"column_start":1,"column_end":18}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498363,"byte_end":498393,"line_start":2218,"line_end":2218,"column_start":1,"column_end":31}}]},{"kind":"Function","id":{"krate":0,"index":2560},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502238,"byte_end":502252,"line_start":2333,"line_end":2333,"column_start":15,"column_end":29},"name":"from_raw_parts","qualname":"::slice::api::from_raw_parts","value":"pub unsafe fn from_raw_parts<'a, O, T>(BitPtr<Const, O, T>, usize)\n-> Result<&'a BitSlice<O, T>, BitSpanError<T>> where O: BitOrder, T: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Forms a bit-slice from a bit-pointer and a length.","sig":null,"attributes":[{"value":"/ Forms a bit-slice from a bit-pointer and a length.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498759,"byte_end":498813,"line_start":2232,"line_end":2232,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498814,"byte_end":498817,"line_start":2233,"line_end":2233,"column_start":1,"column_end":4}},{"value":"/ The `len` argument is the number of **bits**, not the number of bytes or","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498818,"byte_end":498894,"line_start":2234,"line_end":2234,"column_start":1,"column_end":77}},{"value":"/ elements.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498895,"byte_end":498908,"line_start":2235,"line_end":2235,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498909,"byte_end":498912,"line_start":2236,"line_end":2236,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498913,"byte_end":498927,"line_start":2237,"line_end":2237,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498928,"byte_end":498931,"line_start":2238,"line_end":2238,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts`](core::slice::from_raw_parts)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498932,"byte_end":498990,"line_start":2239,"line_end":2239,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498991,"byte_end":498994,"line_start":2240,"line_end":2240,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":498995,"byte_end":499016,"line_start":2241,"line_end":2241,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499017,"byte_end":499020,"line_start":2242,"line_end":2242,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499021,"byte_end":499094,"line_start":2243,"line_end":2243,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499095,"byte_end":499169,"line_start":2244,"line_end":2244,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499170,"byte_end":499173,"line_start":2245,"line_end":2245,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499174,"byte_end":499252,"line_start":2246,"line_end":2246,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499253,"byte_end":499286,"line_start":2247,"line_end":2247,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499287,"byte_end":499290,"line_start":2248,"line_end":2248,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499291,"byte_end":499303,"line_start":2249,"line_end":2249,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499304,"byte_end":499307,"line_start":2250,"line_end":2250,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499308,"byte_end":499382,"line_start":2251,"line_end":2251,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499383,"byte_end":499386,"line_start":2252,"line_end":2252,"column_start":1,"column_end":4}},{"value":"/ - `data` must be valid for reads for `len` many bits, and it must be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499387,"byte_end":499459,"line_start":2253,"line_end":2253,"column_start":1,"column_end":73}},{"value":"/   properly aligned. This means in particular:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499460,"byte_end":499509,"line_start":2254,"line_end":2254,"column_start":1,"column_end":50}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499510,"byte_end":499589,"line_start":2255,"line_end":2255,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499590,"byte_end":499663,"line_start":2256,"line_end":2256,"column_start":1,"column_end":74}},{"value":"/     objects. See [below] for an example incorrectly not taking this into","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499664,"byte_end":499740,"line_start":2257,"line_end":2257,"column_start":1,"column_end":77}},{"value":"/     account.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499741,"byte_end":499757,"line_start":2258,"line_end":2258,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499758,"byte_end":499835,"line_start":2259,"line_end":2259,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499836,"byte_end":499916,"line_start":2260,"line_end":2260,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499917,"byte_end":499997,"line_start":2261,"line_end":2261,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":499998,"byte_end":500044,"line_start":2262,"line_end":2262,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500045,"byte_end":500122,"line_start":2263,"line_end":2263,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500123,"byte_end":500149,"line_start":2264,"line_end":2264,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be mutated for the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500150,"byte_end":500227,"line_start":2265,"line_end":2265,"column_start":1,"column_end":78}},{"value":"/   duration of the lifetime `'a`, except if `T` is an atomic or a `Cell`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500228,"byte_end":500303,"line_start":2266,"line_end":2266,"column_start":1,"column_end":76}},{"value":"/   type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500304,"byte_end":500315,"line_start":2267,"line_end":2267,"column_start":1,"column_end":12}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500316,"byte_end":500365,"line_start":2268,"line_end":2268,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500366,"byte_end":500369,"line_start":2269,"line_end":2269,"column_start":1,"column_end":4}},{"value":"/ # Caveat","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500370,"byte_end":500382,"line_start":2270,"line_end":2270,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500383,"byte_end":500386,"line_start":2271,"line_end":2271,"column_start":1,"column_end":4}},{"value":"/ The lifetime for the returned slice is inferred from its usage. To prevent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500387,"byte_end":500465,"line_start":2272,"line_end":2272,"column_start":1,"column_end":79}},{"value":"/ accidental misuse, it’s suggested to tie the lifetime to whichever source","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500466,"byte_end":500545,"line_start":2273,"line_end":2273,"column_start":1,"column_end":78}},{"value":"/ lifetime is safe in the context, such as by providing a helper function","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500546,"byte_end":500621,"line_start":2274,"line_end":2274,"column_start":1,"column_end":76}},{"value":"/ taking the lifetime of a host value for the slice, or by explicit","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500622,"byte_end":500691,"line_start":2275,"line_end":2275,"column_start":1,"column_end":70}},{"value":"/ annotation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500692,"byte_end":500707,"line_start":2276,"line_end":2276,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500708,"byte_end":500711,"line_start":2277,"line_end":2277,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500712,"byte_end":500726,"line_start":2278,"line_end":2278,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500727,"byte_end":500730,"line_start":2279,"line_end":2279,"column_start":1,"column_end":4}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500731,"byte_end":500742,"line_start":2280,"line_end":2280,"column_start":1,"column_end":12}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500743,"byte_end":500770,"line_start":2281,"line_end":2281,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500771,"byte_end":500805,"line_start":2282,"line_end":2282,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500806,"byte_end":500809,"line_start":2283,"line_end":2283,"column_start":1,"column_end":4}},{"value":"/ let x = 42u8;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500810,"byte_end":500827,"line_start":2284,"line_end":2284,"column_start":1,"column_end":18}},{"value":"/ let bitptr = BitPtr::from(&x);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500828,"byte_end":500862,"line_start":2285,"line_end":2285,"column_start":1,"column_end":35}},{"value":"/ let bits: &BitSlice<LocalBits, _> = unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500863,"byte_end":500911,"line_start":2286,"line_end":2286,"column_start":1,"column_end":49}},{"value":"/   bv_slice::from_raw_parts(bitptr, 8)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500912,"byte_end":500953,"line_start":2287,"line_end":2287,"column_start":1,"column_end":42}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500954,"byte_end":500959,"line_start":2288,"line_end":2288,"column_start":1,"column_end":6}},{"value":"/ .unwrap();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500960,"byte_end":500974,"line_start":2289,"line_end":2289,"column_start":1,"column_end":15}},{"value":"/ assert_eq!(bits, x.view_bits::<LocalBits>());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":500975,"byte_end":501024,"line_start":2290,"line_end":2290,"column_start":1,"column_end":50}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501025,"byte_end":501032,"line_start":2291,"line_end":2291,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501033,"byte_end":501036,"line_start":2292,"line_end":2292,"column_start":1,"column_end":4}},{"value":"/ ### Incorrect Usage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501037,"byte_end":501060,"line_start":2293,"line_end":2293,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501061,"byte_end":501064,"line_start":2294,"line_end":2294,"column_start":1,"column_end":4}},{"value":"/ The following `join_slices` function is **unsound** ⚠️","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501065,"byte_end":501127,"line_start":2295,"line_end":2295,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501128,"byte_end":501131,"line_start":2296,"line_end":2296,"column_start":1,"column_end":4}},{"value":"/ ```rust,no_run","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501132,"byte_end":501150,"line_start":2297,"line_end":2297,"column_start":1,"column_end":19}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501151,"byte_end":501178,"line_start":2298,"line_end":2298,"column_start":1,"column_end":28}},{"value":"/ use bitvec::slice as bv_slice;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501179,"byte_end":501213,"line_start":2299,"line_end":2299,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501214,"byte_end":501217,"line_start":2300,"line_end":2300,"column_start":1,"column_end":4}},{"value":"/ fn join_bitslices<'a, O, T>(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501218,"byte_end":501250,"line_start":2301,"line_end":2301,"column_start":1,"column_end":33}},{"value":"/   fst: &'a BitSlice<O, T>,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501251,"byte_end":501281,"line_start":2302,"line_end":2302,"column_start":1,"column_end":31}},{"value":"/   snd: &'a BitSlice<O, T>,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501282,"byte_end":501312,"line_start":2303,"line_end":2303,"column_start":1,"column_end":31}},{"value":"/ ) -> &'a BitSlice<O, T>","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501313,"byte_end":501340,"line_start":2304,"line_end":2304,"column_start":1,"column_end":28}},{"value":"/ where O: BitOrder, T: BitStore {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501341,"byte_end":501377,"line_start":2305,"line_end":2305,"column_start":1,"column_end":37}},{"value":"/   let fst_end = unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501378,"byte_end":501406,"line_start":2306,"line_end":2306,"column_start":1,"column_end":29}},{"value":"/     fst.as_bitptr().wrapping_add(fst.len())","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501407,"byte_end":501454,"line_start":2307,"line_end":2307,"column_start":1,"column_end":48}},{"value":"/   };","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501455,"byte_end":501463,"line_start":2308,"line_end":2308,"column_start":1,"column_end":9}},{"value":"/   let snd_start = snd.as_bitptr();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501464,"byte_end":501502,"line_start":2309,"line_end":2309,"column_start":1,"column_end":39}},{"value":"/   assert_eq!(snd_start, fst_end, \"Slices must be adjacent\");","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501503,"byte_end":501567,"line_start":2310,"line_end":2310,"column_start":1,"column_end":65}},{"value":"/   unsafe {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501568,"byte_end":501582,"line_start":2311,"line_end":2311,"column_start":1,"column_end":15}},{"value":"/     bv_slice::from_raw_parts(fst.as_bitptr(), fst.len() + snd.len())","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501583,"byte_end":501655,"line_start":2312,"line_end":2312,"column_start":1,"column_end":73}},{"value":"/   }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501656,"byte_end":501663,"line_start":2313,"line_end":2313,"column_start":1,"column_end":8}},{"value":"/   .unwrap()","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501664,"byte_end":501679,"line_start":2314,"line_end":2314,"column_start":1,"column_end":16}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501680,"byte_end":501685,"line_start":2315,"line_end":2315,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501686,"byte_end":501689,"line_start":2316,"line_end":2316,"column_start":1,"column_end":4}},{"value":"/ let a = [0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501690,"byte_end":501711,"line_start":2317,"line_end":2317,"column_start":1,"column_end":22}},{"value":"/ let b = [!0u8; 3];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501712,"byte_end":501734,"line_start":2318,"line_end":2318,"column_start":1,"column_end":23}},{"value":"/ let c = join_bitslices(","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501735,"byte_end":501762,"line_start":2319,"line_end":2319,"column_start":1,"column_end":28}},{"value":"/   a.view_bits::<LocalBits>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501763,"byte_end":501796,"line_start":2320,"line_end":2320,"column_start":1,"column_end":34}},{"value":"/   b.view_bits::<LocalBits>(),","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501797,"byte_end":501830,"line_start":2321,"line_end":2321,"column_start":1,"column_end":34}},{"value":"/ );","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501831,"byte_end":501837,"line_start":2322,"line_end":2322,"column_start":1,"column_end":7}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501838,"byte_end":501845,"line_start":2323,"line_end":2323,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501846,"byte_end":501849,"line_start":2324,"line_end":2324,"column_start":1,"column_end":4}},{"value":"/ In this example, the compiler may elect to place `a` and `b` in adjacent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501850,"byte_end":501926,"line_start":2325,"line_end":2325,"column_start":1,"column_end":77}},{"value":"/ stack slots, but because they are still *separate allocation* regions, it is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":501927,"byte_end":502007,"line_start":2326,"line_end":2326,"column_start":1,"column_end":81}},{"value":"/ illegal for a single region descriptor to be created over both of them.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502008,"byte_end":502083,"line_start":2327,"line_end":2327,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502084,"byte_end":502087,"line_start":2328,"line_end":2328,"column_start":1,"column_end":4}},{"value":"/ [below]: #incorrect-usage","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502088,"byte_end":502117,"line_start":2329,"line_end":2329,"column_start":1,"column_end":30}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502118,"byte_end":502152,"line_start":2330,"line_end":2330,"column_start":1,"column_end":35}},{"value":"/ [`BitSlice::MAX_BITS`]: crate::slice::BitSlice::MAX_BITS","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502153,"byte_end":502213,"line_start":2331,"line_end":2331,"column_start":1,"column_end":61}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502214,"byte_end":502223,"line_start":2332,"line_end":2332,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":2564},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504329,"byte_end":504347,"line_start":2385,"line_end":2385,"column_start":15,"column_end":33},"name":"from_raw_parts_mut","qualname":"::slice::api::from_raw_parts_mut","value":"pub unsafe fn from_raw_parts_mut<'a, O, T>(BitPtr<Mut, O, T>, usize)\n-> Result<&'a mut BitSlice<O, T>, BitSpanError<T>> where O: BitOrder,\nT: BitStore","parent":null,"children":[],"decl_id":null,"docs":" Performs the same functionality as [`from_raw_parts`], except that a mutable\n slice is returned.","sig":null,"attributes":[{"value":"/ Performs the same functionality as [`from_raw_parts`], except that a mutable","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502439,"byte_end":502519,"line_start":2344,"line_end":2344,"column_start":1,"column_end":81}},{"value":"/ slice is returned.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502520,"byte_end":502542,"line_start":2345,"line_end":2345,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502543,"byte_end":502546,"line_start":2346,"line_end":2346,"column_start":1,"column_end":4}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502547,"byte_end":502561,"line_start":2347,"line_end":2347,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502562,"byte_end":502565,"line_start":2348,"line_end":2348,"column_start":1,"column_end":4}},{"value":"/ [`slice::from_raw_parts_mut`](core::slice::from_raw_parts_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502566,"byte_end":502632,"line_start":2349,"line_end":2349,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502633,"byte_end":502636,"line_start":2350,"line_end":2350,"column_start":1,"column_end":4}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502637,"byte_end":502658,"line_start":2351,"line_end":2351,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502659,"byte_end":502662,"line_start":2352,"line_end":2352,"column_start":1,"column_end":4}},{"value":"/ This takes a [`BitPtr`] as its base address, rather than a raw `*Bit`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502663,"byte_end":502736,"line_start":2353,"line_end":2353,"column_start":1,"column_end":74}},{"value":"/ pointer, as `bitvec` does not provide raw pointers to individual bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502737,"byte_end":502811,"line_start":2354,"line_end":2354,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502812,"byte_end":502815,"line_start":2355,"line_end":2355,"column_start":1,"column_end":4}},{"value":"/ It returns a `Result`, because the `len` argument may be invalid to encode","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502816,"byte_end":502894,"line_start":2356,"line_end":2356,"column_start":1,"column_end":79}},{"value":"/ into a `&BitSlice` reference.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502895,"byte_end":502928,"line_start":2357,"line_end":2357,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502929,"byte_end":502932,"line_start":2358,"line_end":2358,"column_start":1,"column_end":4}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502933,"byte_end":502945,"line_start":2359,"line_end":2359,"column_start":1,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502946,"byte_end":502949,"line_start":2360,"line_end":2360,"column_start":1,"column_end":4}},{"value":"/ Behavior is undefined if any of the following conditions are violated:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":502950,"byte_end":503024,"line_start":2361,"line_end":2361,"column_start":1,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503025,"byte_end":503028,"line_start":2362,"line_end":2362,"column_start":1,"column_end":4}},{"value":"/ - `data` must be [valid] for boths reads and writes for `len` many bits, and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503029,"byte_end":503109,"line_start":2363,"line_end":2363,"column_start":1,"column_end":81}},{"value":"/   it must be properly aligned. This means in particular:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503110,"byte_end":503170,"line_start":2364,"line_end":2364,"column_start":1,"column_end":61}},{"value":"/   - The entire memory range of this slice must be contained within a single","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503171,"byte_end":503250,"line_start":2365,"line_end":2365,"column_start":1,"column_end":80}},{"value":"/     allocated object! Slices can never span across multiple allocated","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503251,"byte_end":503324,"line_start":2366,"line_end":2366,"column_start":1,"column_end":74}},{"value":"/     objects.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503325,"byte_end":503341,"line_start":2367,"line_end":2367,"column_start":1,"column_end":17}},{"value":"/   - `data` must be non-null, and its `T` portion must be aligned. Both of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503342,"byte_end":503419,"line_start":2368,"line_end":2368,"column_start":1,"column_end":78}},{"value":"/     these conditions are checked during safe construction of the [`BitPtr`],","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503420,"byte_end":503500,"line_start":2369,"line_end":2369,"column_start":1,"column_end":81}},{"value":"/     and `unsafe` construction of it **must not** violate them. Doing so will","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503501,"byte_end":503581,"line_start":2370,"line_end":2370,"column_start":1,"column_end":81}},{"value":"/     cause incorrect behavior in the crate.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503582,"byte_end":503628,"line_start":2371,"line_end":2371,"column_start":1,"column_end":47}},{"value":"/ - `data` must point to `len` consecutive bits within properly initialized","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503629,"byte_end":503706,"line_start":2372,"line_end":2372,"column_start":1,"column_end":78}},{"value":"/   memory elements `T`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503707,"byte_end":503733,"line_start":2373,"line_end":2373,"column_start":1,"column_end":27}},{"value":"/ - The memory referenced by the returned slice must not be accessed through","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503734,"byte_end":503812,"line_start":2374,"line_end":2374,"column_start":1,"column_end":79}},{"value":"/   any other pointer (not derived from the return value) for the duration of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503813,"byte_end":503892,"line_start":2375,"line_end":2375,"column_start":1,"column_end":80}},{"value":"/   lifetime `'a`. Both read and write accesses are forbidden. This is true","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503893,"byte_end":503970,"line_start":2376,"line_end":2376,"column_start":1,"column_end":78}},{"value":"/   even if `T` supports aliased mutation! An `&mut` reference requires","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":503971,"byte_end":504044,"line_start":2377,"line_end":2377,"column_start":1,"column_end":74}},{"value":"/   **exclusive** access for its lifetime.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504045,"byte_end":504089,"line_start":2378,"line_end":2378,"column_start":1,"column_end":45}},{"value":"/ - `len` cannot exceed [`BitSlice::MAX_BITS`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504090,"byte_end":504139,"line_start":2379,"line_end":2379,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504140,"byte_end":504143,"line_start":2380,"line_end":2380,"column_start":1,"column_end":4}},{"value":"/ [valid]: https://doc.rust-lang.org/stable/core/ptr/index.html#safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504144,"byte_end":504216,"line_start":2381,"line_end":2381,"column_start":1,"column_end":73}},{"value":"/ [`BitPtr`]: crate::ptr::BitPtr","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504217,"byte_end":504251,"line_start":2382,"line_end":2382,"column_start":1,"column_end":35}},{"value":"/ [`from_raw_parts`]: crate::slice::from_raw_parts","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504252,"byte_end":504304,"line_start":2383,"line_end":2383,"column_start":1,"column_end":53}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504305,"byte_end":504314,"line_start":2384,"line_end":2384,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":2568},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505464,"byte_end":505477,"line_start":2421,"line_end":2421,"column_start":11,"column_end":24},"name":"BitSliceIndex","qualname":"::slice::api::BitSliceIndex","value":"BitSliceIndex<'a, O, T>","parent":null,"children":[{"krate":0,"index":2572},{"krate":0,"index":2573},{"krate":0,"index":2574},{"krate":0,"index":2575},{"krate":0,"index":2576},{"krate":0,"index":2577},{"krate":0,"index":2578},{"krate":0,"index":2579}],"decl_id":null,"docs":" A helper trait used for indexing operations.","sig":null,"attributes":[{"value":"* A helper trait used for indexing operations.\n\nThis trait has its definition stabilized, but has not stabilized its associated\nmethods. This means it cannot be implemented outside of the distribution\nlibraries. *Furthermore*, since [`bitvec`] cannot create `&mut bool` references,\nit is insufficient for `bitvec`’s uses.\n\nThere is no tracking issue for `feature(slice_index_methods)`.\n\n# Original\n\n[`slice::SliceIndex`](core::slice::SliceIndex)\n\n# API Differences\n\n[`SliceIndex::Output`] is not usable here, because the `usize` implementation\ncannot produce `&mut bool`. Instead, two output types `Immut` and `Mut` are\ndefined. The range implementations define these to be the appropriately mutable\n[`BitSlice`] reference; the `usize` implementation defines them to be `&bool`\nand the proxy type.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`SliceIndex::Output`]: core::slice::SliceIndex::Output\n[`bitvec`]: crate\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":504536,"byte_end":505453,"line_start":2396,"line_end":2420,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":2572},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505576,"byte_end":505581,"line_start":2427,"line_end":2427,"column_start":7,"column_end":12},"name":"Immut","qualname":"::slice::api::BitSliceIndex::Immut","value":"type Immut;","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" The output type for immutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for immutable accessors.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505525,"byte_end":505569,"line_start":2426,"line_end":2426,"column_start":2,"column_end":46}}]},{"kind":"Type","id":{"krate":0,"index":2573},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505634,"byte_end":505637,"line_start":2430,"line_end":2430,"column_start":7,"column_end":10},"name":"Mut","qualname":"::slice::api::BitSliceIndex::Mut","value":"type Mut;","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" The output type for mutable accessors.\n","sig":null,"attributes":[{"value":"/ The output type for mutable accessors.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505585,"byte_end":505627,"line_start":2429,"line_end":2429,"column_start":2,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":2574},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505803,"byte_end":505806,"line_start":2437,"line_end":2437,"column_start":5,"column_end":8},"name":"get","qualname":"::slice::api::BitSliceIndex::get","value":"pub fn get(Self, &'a BitSlice<O, T>) -> Option<Self::Immut>","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, if in bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, if in bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505641,"byte_end":505717,"line_start":2432,"line_end":2432,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505719,"byte_end":505722,"line_start":2433,"line_end":2433,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505724,"byte_end":505738,"line_start":2434,"line_end":2434,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505740,"byte_end":505743,"line_start":2435,"line_end":2435,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get`](core::slice::SliceIndex::get)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505745,"byte_end":505798,"line_start":2436,"line_end":2436,"column_start":2,"column_end":55}}]},{"kind":"Method","id":{"krate":0,"index":2575},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506042,"byte_end":506049,"line_start":2445,"line_end":2445,"column_start":5,"column_end":12},"name":"get_mut","qualname":"::slice::api::BitSliceIndex::get_mut","value":"pub fn get_mut(Self, &'a mut BitSlice<O, T>) -> Option<Self::Mut>","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, if in\n bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, if in","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505866,"byte_end":505935,"line_start":2439,"line_end":2439,"column_start":2,"column_end":71}},{"value":"/ bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505937,"byte_end":505948,"line_start":2440,"line_end":2440,"column_start":2,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505950,"byte_end":505953,"line_start":2441,"line_end":2441,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505955,"byte_end":505969,"line_start":2442,"line_end":2442,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505971,"byte_end":505974,"line_start":2443,"line_end":2443,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_mut`](core::slice::SliceIndex::get_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":505976,"byte_end":506037,"line_start":2444,"line_end":2444,"column_start":2,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":2576},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506825,"byte_end":506838,"line_start":2464,"line_end":2464,"column_start":12,"column_end":25},"name":"get_unchecked","qualname":"::slice::api::BitSliceIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, without","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506111,"byte_end":506181,"line_start":2447,"line_end":2447,"column_start":2,"column_end":72}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506183,"byte_end":506246,"line_start":2448,"line_end":2448,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506248,"byte_end":506317,"line_start":2449,"line_end":2449,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506319,"byte_end":506345,"line_start":2450,"line_end":2450,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506347,"byte_end":506350,"line_start":2451,"line_end":2451,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506352,"byte_end":506366,"line_start":2452,"line_end":2452,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506368,"byte_end":506371,"line_start":2453,"line_end":2453,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked`](core::slice::SliceIndex::get_unchecked)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506373,"byte_end":506446,"line_start":2454,"line_end":2454,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506448,"byte_end":506451,"line_start":2455,"line_end":2455,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506453,"byte_end":506465,"line_start":2456,"line_end":2456,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506467,"byte_end":506470,"line_start":2457,"line_end":2457,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506472,"byte_end":506544,"line_start":2458,"line_end":2458,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506546,"byte_end":506620,"line_start":2459,"line_end":2459,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506622,"byte_end":506693,"line_start":2460,"line_end":2460,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506695,"byte_end":506710,"line_start":2461,"line_end":2461,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506712,"byte_end":506715,"line_start":2462,"line_end":2462,"column_start":2,"column_end":5}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506717,"byte_end":506813,"line_start":2463,"line_end":2463,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2577},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507631,"byte_end":507648,"line_start":2484,"line_end":2484,"column_start":12,"column_end":29},"name":"get_unchecked_mut","qualname":"::slice::api::BitSliceIndex::get_unchecked_mut","value":"pub unsafe fn get_unchecked_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, without\n performing any bounds checking. Calling this method with an\n out-of-bounds index is [undefined behavior] even if the resulting\n reference is not used.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, without","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506890,"byte_end":506961,"line_start":2466,"line_end":2466,"column_start":2,"column_end":73}},{"value":"/ performing any bounds checking. Calling this method with an","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":506963,"byte_end":507026,"line_start":2467,"line_end":2467,"column_start":2,"column_end":65}},{"value":"/ out-of-bounds index is [undefined behavior] even if the resulting","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507028,"byte_end":507097,"line_start":2468,"line_end":2468,"column_start":2,"column_end":71}},{"value":"/ reference is not used.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507099,"byte_end":507125,"line_start":2469,"line_end":2469,"column_start":2,"column_end":28}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507127,"byte_end":507130,"line_start":2470,"line_end":2470,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507132,"byte_end":507146,"line_start":2471,"line_end":2471,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507148,"byte_end":507151,"line_start":2472,"line_end":2472,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::get_unchecked_mut`][orig]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507153,"byte_end":507196,"line_start":2473,"line_end":2473,"column_start":2,"column_end":45}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507198,"byte_end":507201,"line_start":2474,"line_end":2474,"column_start":2,"column_end":5}},{"value":"/ # Safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507203,"byte_end":507215,"line_start":2475,"line_end":2475,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507217,"byte_end":507220,"line_start":2476,"line_end":2476,"column_start":2,"column_end":5}},{"value":"/ As this function does not perform boundary checking, the caller must","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507222,"byte_end":507294,"line_start":2477,"line_end":2477,"column_start":2,"column_end":74}},{"value":"/ ensure that `self` is an index within the boundaries of `slice` before","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507296,"byte_end":507370,"line_start":2478,"line_end":2478,"column_start":2,"column_end":76}},{"value":"/ calling in order to prevent boundary escapes and the ensuing safety","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507372,"byte_end":507443,"line_start":2479,"line_end":2479,"column_start":2,"column_end":73}},{"value":"/ violations.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507445,"byte_end":507460,"line_start":2480,"line_end":2480,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507462,"byte_end":507465,"line_start":2481,"line_end":2481,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::SliceIndex::get_unchecked_mut","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507467,"byte_end":507521,"line_start":2482,"line_end":2482,"column_start":2,"column_end":56}},{"value":"/ [undefined behavior]: https://doc.rust-lang.org/reference/behavior-considered-undefined.html","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507523,"byte_end":507619,"line_start":2483,"line_end":2483,"column_start":2,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":2578},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507895,"byte_end":507900,"line_start":2495,"line_end":2495,"column_start":5,"column_end":10},"name":"index","qualname":"::slice::api::BitSliceIndex::index","value":"pub fn index(Self, &'a BitSlice<O, T>) -> Self::Immut","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a shared reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a shared reference to the output at this location, panicking if","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507710,"byte_end":507785,"line_start":2489,"line_end":2489,"column_start":2,"column_end":77}},{"value":"/ out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507787,"byte_end":507805,"line_start":2490,"line_end":2490,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507807,"byte_end":507810,"line_start":2491,"line_end":2491,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507812,"byte_end":507826,"line_start":2492,"line_end":2492,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507828,"byte_end":507831,"line_start":2493,"line_end":2493,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index`](core::slice::SliceIndex::index)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507833,"byte_end":507890,"line_start":2494,"line_end":2494,"column_start":2,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":2579},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508146,"byte_end":508155,"line_start":2503,"line_end":2503,"column_start":5,"column_end":14},"name":"index_mut","qualname":"::slice::api::BitSliceIndex::index_mut","value":"pub fn index_mut(Self, &'a mut BitSlice<O, T>) -> Self::Mut","parent":{"krate":0,"index":2568},"children":[],"decl_id":null,"docs":" Returns a mutable reference to the output at this location, panicking if\n out of bounds.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the output at this location, panicking if","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":507952,"byte_end":508028,"line_start":2497,"line_end":2497,"column_start":2,"column_end":78}},{"value":"/ out of bounds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508030,"byte_end":508048,"line_start":2498,"line_end":2498,"column_start":2,"column_end":20}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508050,"byte_end":508053,"line_start":2499,"line_end":2499,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508055,"byte_end":508069,"line_start":2500,"line_end":2500,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508071,"byte_end":508074,"line_start":2501,"line_end":2501,"column_start":2,"column_end":5}},{"value":"/ [`SliceIndex::index_mut`](core::slice::SliceIndex::index_mut)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":508076,"byte_end":508141,"line_start":2502,"line_end":2502,"column_start":2,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":2683},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":514981,"byte_end":514985,"line_start":89,"line_end":89,"column_start":12,"column_end":16},"name":"Iter","qualname":"::slice::iter::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2687},{"krate":0,"index":2688}],"decl_id":null,"docs":" Immutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Immutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Iter`](core::slice::Iter)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![0, 1];\nfor bit in bits.iter() {\n  # #[cfg(feature = \"std\")]\n  println!(\"{}\", bit);\n}\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter()`]: crate::slice::BitSlice::iter\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":514556,"byte_end":514958,"line_start":63,"line_end":87,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":514959,"byte_end":514969,"line_start":88,"line_end":88,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2694},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516711,"byte_end":516722,"line_start":156,"line_end":156,"column_start":9,"column_end":20},"name":"as_bitslice","qualname":"<Iter>::as_bitslice","value":"pub fn as_bitslice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515705,"byte_end":515770,"line_start":118,"line_end":118,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515772,"byte_end":515775,"line_start":119,"line_end":119,"column_start":2,"column_end":5}},{"value":"/ This has the same lifetime as the original [`BitSlice`], and so the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515777,"byte_end":515848,"line_start":120,"line_end":120,"column_start":2,"column_end":73}},{"value":"/ iterator can continue to be used while this exists.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515850,"byte_end":515905,"line_start":121,"line_end":121,"column_start":2,"column_end":57}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515907,"byte_end":515910,"line_start":122,"line_end":122,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515912,"byte_end":515926,"line_start":123,"line_end":123,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515928,"byte_end":515931,"line_start":124,"line_end":124,"column_start":2,"column_end":5}},{"value":"/ [`Iter::as_slice`](core::slice::Iter::as_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515933,"byte_end":515984,"line_start":125,"line_end":125,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515986,"byte_end":515989,"line_start":126,"line_end":126,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515991,"byte_end":516012,"line_start":127,"line_end":127,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516014,"byte_end":516017,"line_start":128,"line_end":128,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516019,"byte_end":516094,"line_start":129,"line_end":129,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516096,"byte_end":516117,"line_start":130,"line_end":130,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516119,"byte_end":516122,"line_start":131,"line_end":131,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516124,"byte_end":516138,"line_start":132,"line_end":132,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516140,"byte_end":516143,"line_start":133,"line_end":133,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516145,"byte_end":516161,"line_start":134,"line_end":134,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516163,"byte_end":516166,"line_start":135,"line_end":135,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516168,"byte_end":516179,"line_start":136,"line_end":136,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516181,"byte_end":516212,"line_start":137,"line_end":137,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516214,"byte_end":516241,"line_start":138,"line_end":138,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516243,"byte_end":516246,"line_start":139,"line_end":139,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 0, 1, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516248,"byte_end":516281,"line_start":140,"line_end":140,"column_start":2,"column_end":35}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516283,"byte_end":516286,"line_start":141,"line_end":141,"column_start":2,"column_end":5}},{"value":"/ // Get the iterator:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516288,"byte_end":516312,"line_start":142,"line_end":142,"column_start":2,"column_end":26}},{"value":"/ let mut iter = bits.iter();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516314,"byte_end":516345,"line_start":143,"line_end":143,"column_start":2,"column_end":33}},{"value":"/ // So if we print what `as_bitslice` returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516347,"byte_end":516395,"line_start":144,"line_end":144,"column_start":2,"column_end":50}},{"value":"/ // here, we have \"[0011]\":","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516397,"byte_end":516427,"line_start":145,"line_end":145,"column_start":2,"column_end":32}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516429,"byte_end":516470,"line_start":146,"line_end":146,"column_start":2,"column_end":43}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516472,"byte_end":516475,"line_start":147,"line_end":147,"column_start":2,"column_end":5}},{"value":"/ // Next, we move to the second element of the slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516477,"byte_end":516533,"line_start":148,"line_end":148,"column_start":2,"column_end":58}},{"value":"/ iter.next();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516535,"byte_end":516551,"line_start":149,"line_end":149,"column_start":2,"column_end":18}},{"value":"/ // Now `as_bitslice` returns \"[011]\":","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516553,"byte_end":516594,"line_start":150,"line_end":150,"column_start":2,"column_end":43}},{"value":"/ println!(\"{:b}\", iter.as_bitslice());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516596,"byte_end":516637,"line_start":151,"line_end":151,"column_start":2,"column_end":43}},{"value":"/ # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516639,"byte_end":516646,"line_start":152,"line_end":152,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516648,"byte_end":516655,"line_start":153,"line_end":153,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516657,"byte_end":516660,"line_start":154,"line_end":154,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516662,"byte_end":516702,"line_start":155,"line_end":155,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2695},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516953,"byte_end":516961,"line_start":164,"line_end":164,"column_start":9,"column_end":17},"name":"as_slice","qualname":"<Iter>::as_slice","value":"pub fn as_slice(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516829,"byte_end":516846,"line_start":161,"line_end":161,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516848,"byte_end":516878,"line_start":162,"line_end":162,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `as_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":516880,"byte_end":516944,"line_start":163,"line_end":163,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":2696},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517870,"byte_end":517876,"line_start":198,"line_end":198,"column_start":9,"column_end":15},"name":"by_ref","qualname":"<Iter>::by_ref","value":"pub fn by_ref(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `&bool` references rather than `BitRef`\n proxies.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `&bool` references rather than `BitRef`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517019,"byte_end":517091,"line_start":168,"line_end":168,"column_start":2,"column_end":74}},{"value":"/ proxies.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517093,"byte_end":517105,"line_start":169,"line_end":169,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517107,"byte_end":517110,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517112,"byte_end":517180,"line_start":171,"line_end":171,"column_start":2,"column_end":70}},{"value":"/ references and are not easily modified to receive the proxy structure.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517182,"byte_end":517256,"line_start":172,"line_end":172,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517258,"byte_end":517261,"line_start":173,"line_end":173,"column_start":2,"column_end":5}},{"value":"/ It works by yielding `&'static` references to hidden statics; these","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517263,"byte_end":517334,"line_start":174,"line_end":174,"column_start":2,"column_end":73}},{"value":"/ references will **not** have an address value that fits in the context","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517336,"byte_end":517410,"line_start":175,"line_end":175,"column_start":2,"column_end":76}},{"value":"/ of the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517412,"byte_end":517432,"line_start":176,"line_end":176,"column_start":2,"column_end":22}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517434,"byte_end":517437,"line_start":177,"line_end":177,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517439,"byte_end":517455,"line_start":178,"line_end":178,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517457,"byte_end":517460,"line_start":179,"line_end":179,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517462,"byte_end":517474,"line_start":180,"line_end":180,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517476,"byte_end":517479,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517481,"byte_end":517494,"line_start":182,"line_end":182,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517496,"byte_end":517499,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `&bool` instead of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517501,"byte_end":517569,"line_start":184,"line_end":184,"column_start":2,"column_end":70}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517571,"byte_end":517584,"line_start":185,"line_end":185,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517586,"byte_end":517589,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517591,"byte_end":517605,"line_start":187,"line_end":187,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517607,"byte_end":517610,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517612,"byte_end":517623,"line_start":189,"line_end":189,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517625,"byte_end":517652,"line_start":190,"line_end":190,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517654,"byte_end":517657,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517659,"byte_end":517686,"line_start":192,"line_end":192,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_ref();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517688,"byte_end":517728,"line_start":193,"line_end":193,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(&false));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517730,"byte_end":517772,"line_start":194,"line_end":194,"column_start":2,"column_end":44}},{"value":"/ assert_eq!(iter.next(), Some(&true));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517774,"byte_end":517815,"line_start":195,"line_end":195,"column_start":2,"column_end":43}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517817,"byte_end":517852,"line_start":196,"line_end":196,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":517854,"byte_end":517861,"line_start":197,"line_end":197,"column_start":2,"column_end":9}}]},{"kind":"Method","id":{"krate":0,"index":2699},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518934,"byte_end":518940,"line_start":242,"line_end":242,"column_start":9,"column_end":15},"name":"by_val","qualname":"<Iter>::by_val","value":"pub fn by_val(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Adapts the iterator to yield `bool` values rather than `BitRef` proxy\n references.","sig":null,"attributes":[{"value":"/ Adapts the iterator to yield `bool` values rather than `BitRef` proxy","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518070,"byte_end":518143,"line_start":211,"line_end":211,"column_start":2,"column_end":75}},{"value":"/ references.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518145,"byte_end":518160,"line_start":212,"line_end":212,"column_start":2,"column_end":17}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518162,"byte_end":518165,"line_start":213,"line_end":213,"column_start":2,"column_end":5}},{"value":"/ This allows the iterator to be used in APIs that expect ordinary values.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518167,"byte_end":518243,"line_start":214,"line_end":214,"column_start":2,"column_end":78}},{"value":"/ It dereferences the proxy and produces the proxied `bool` directly.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518245,"byte_end":518316,"line_start":215,"line_end":215,"column_start":2,"column_end":73}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518318,"byte_end":518321,"line_start":216,"line_end":216,"column_start":2,"column_end":5}},{"value":"/ This is equivalent to `[bool].iter().copied()`, as [`Iterator::copied`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518323,"byte_end":518398,"line_start":217,"line_end":217,"column_start":2,"column_end":77}},{"value":"/ is not available on this iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518400,"byte_end":518438,"line_start":218,"line_end":218,"column_start":2,"column_end":40}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518440,"byte_end":518443,"line_start":219,"line_end":219,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518445,"byte_end":518461,"line_start":220,"line_end":220,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518463,"byte_end":518466,"line_start":221,"line_end":221,"column_start":2,"column_end":5}},{"value":"/ - `self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518468,"byte_end":518480,"line_start":222,"line_end":222,"column_start":2,"column_end":14}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518482,"byte_end":518485,"line_start":223,"line_end":223,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518487,"byte_end":518500,"line_start":224,"line_end":224,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518502,"byte_end":518505,"line_start":225,"line_end":225,"column_start":2,"column_end":5}},{"value":"/ An iterator equivalent to `self`, that yields `bool` instead of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518507,"byte_end":518574,"line_start":226,"line_end":226,"column_start":2,"column_end":69}},{"value":"/ `BitRef`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518576,"byte_end":518589,"line_start":227,"line_end":227,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518591,"byte_end":518594,"line_start":228,"line_end":228,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518596,"byte_end":518610,"line_start":229,"line_end":229,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518612,"byte_end":518615,"line_start":230,"line_end":230,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518617,"byte_end":518628,"line_start":231,"line_end":231,"column_start":2,"column_end":13}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518630,"byte_end":518657,"line_start":232,"line_end":232,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518659,"byte_end":518662,"line_start":233,"line_end":233,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![0, 1];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518664,"byte_end":518691,"line_start":234,"line_end":234,"column_start":2,"column_end":29}},{"value":"/ let mut iter = bits.iter().by_val();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518693,"byte_end":518733,"line_start":235,"line_end":235,"column_start":2,"column_end":42}},{"value":"/ assert_eq!(iter.next(), Some(false));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518735,"byte_end":518776,"line_start":236,"line_end":236,"column_start":2,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(true));","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518778,"byte_end":518818,"line_start":237,"line_end":237,"column_start":2,"column_end":42}},{"value":"/ assert!(iter.next().is_none());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518820,"byte_end":518855,"line_start":238,"line_end":238,"column_start":2,"column_end":37}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518857,"byte_end":518864,"line_start":239,"line_end":239,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518866,"byte_end":518869,"line_start":240,"line_end":240,"column_start":2,"column_end":5}},{"value":"/ [`Iterator::copied`]: core::iter::Iterator::copied","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":518871,"byte_end":518925,"line_start":241,"line_end":241,"column_start":2,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":2702},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519717,"byte_end":519723,"line_start":266,"line_end":266,"column_start":9,"column_end":15},"name":"copied","qualname":"<Iter>::copied","value":"pub fn copied(Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Forwards to [`by_val`].","sig":null,"attributes":[{"value":"/ Forwards to [`by_val`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519080,"byte_end":519107,"line_start":252,"line_end":252,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519109,"byte_end":519112,"line_start":253,"line_end":253,"column_start":2,"column_end":5}},{"value":"/ This exists to allow ported code to continue to compile when","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519114,"byte_end":519178,"line_start":254,"line_end":254,"column_start":2,"column_end":66}},{"value":"/ `[bool].iter().copied()` is replaced with `BitSlice.iter().copied()`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519180,"byte_end":519253,"line_start":255,"line_end":255,"column_start":2,"column_end":75}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519255,"byte_end":519258,"line_start":256,"line_end":256,"column_start":2,"column_end":5}},{"value":"/ However, because [`Iterator::copied`] is not available on this iterator,","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519260,"byte_end":519336,"line_start":257,"line_end":257,"column_start":2,"column_end":78}},{"value":"/ this name raises a deprecation warning and encourages the user to use","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519338,"byte_end":519411,"line_start":258,"line_end":258,"column_start":2,"column_end":75}},{"value":"/ the correct inherent method instead of the overloaded method name.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519413,"byte_end":519483,"line_start":259,"line_end":259,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519485,"byte_end":519488,"line_start":260,"line_end":260,"column_start":2,"column_end":5}},{"value":"/ [`by_val`]: Self::by_val","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519490,"byte_end":519518,"line_start":261,"line_end":261,"column_start":2,"column_end":30}},{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519520,"byte_end":519537,"line_start":262,"line_end":262,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519539,"byte_end":519569,"line_start":263,"line_end":263,"column_start":2,"column_end":32}},{"value":"deprecated =\n  \"`Iterator::copied` does not exist on this iterator. Use \\\n\t                `by_val` instead to achieve the same effect.\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519571,"byte_end":519708,"line_start":264,"line_end":265,"column_start":2,"column_end":64}}]},{"kind":"Struct","id":{"krate":0,"index":2716},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520843,"byte_end":520850,"line_start":337,"line_end":337,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::slice::iter::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2720},{"krate":0,"index":2721}],"decl_id":null,"docs":" Mutable [`BitSlice`] iterator.","sig":null,"attributes":[{"value":"* Mutable [`BitSlice`] iterator.\n\nThis struct is created by the [`.iter_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::IterMut`](crate::slice::IterMut)\n\n# Examples\n\nBasic usage:\n\n```rust\nuse bitvec::prelude::*;\n\nlet bits = bits![mut 0; 2];\nfor mut bit in bits.iter_mut() {\n  *bit = true;\n}\nassert_eq!(bits, bits![1; 2]);\n```\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_mut()`]: crate::slice::BitSlice::iter_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520394,"byte_end":520820,"line_start":311,"line_end":335,"column_start":1,"column_end":4}},{"value":"repr(C)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520821,"byte_end":520831,"line_start":336,"line_end":336,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2727},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522904,"byte_end":522917,"line_start":415,"line_end":415,"column_start":9,"column_end":22},"name":"into_bitslice","qualname":"<IterMut>::into_bitslice","value":"pub fn into_bitslice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Views the underlying data as a subslice of the original data.","sig":null,"attributes":[{"value":"/ Views the underlying data as a subslice of the original data.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521655,"byte_end":521720,"line_start":367,"line_end":367,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521722,"byte_end":521725,"line_start":368,"line_end":368,"column_start":2,"column_end":5}},{"value":"/ To avoid creating `&mut` references that alias, this is forced to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521727,"byte_end":521796,"line_start":369,"line_end":369,"column_start":2,"column_end":71}},{"value":"/ consume the iterator.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521798,"byte_end":521823,"line_start":370,"line_end":370,"column_start":2,"column_end":27}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521825,"byte_end":521828,"line_start":371,"line_end":371,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521830,"byte_end":521844,"line_start":372,"line_end":372,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521846,"byte_end":521849,"line_start":373,"line_end":373,"column_start":2,"column_end":5}},{"value":"/ [`IterMut::into_slice`](core::slice::IterMut::into_slice)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521851,"byte_end":521912,"line_start":374,"line_end":374,"column_start":2,"column_end":63}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521914,"byte_end":521917,"line_start":375,"line_end":375,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521919,"byte_end":521940,"line_start":376,"line_end":376,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521942,"byte_end":521945,"line_start":377,"line_end":377,"column_start":2,"column_end":5}},{"value":"/ As this views a [`BitSlice`], rather than a `[T]` or `[bool]` slice, it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521947,"byte_end":522022,"line_start":378,"line_end":378,"column_start":2,"column_end":77}},{"value":"/ has been renamed.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522024,"byte_end":522045,"line_start":379,"line_end":379,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522047,"byte_end":522050,"line_start":380,"line_end":380,"column_start":2,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522052,"byte_end":522066,"line_start":381,"line_end":381,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522068,"byte_end":522071,"line_start":382,"line_end":382,"column_start":2,"column_end":5}},{"value":"/ Basic usage:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522073,"byte_end":522089,"line_start":383,"line_end":383,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522091,"byte_end":522094,"line_start":384,"line_end":384,"column_start":2,"column_end":5}},{"value":"/ ```rust","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522096,"byte_end":522107,"line_start":385,"line_end":385,"column_start":2,"column_end":13}},{"value":"/ # #[cfg(feature = \"std\")] {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522109,"byte_end":522140,"line_start":386,"line_end":386,"column_start":2,"column_end":33}},{"value":"/ use bitvec::prelude::*;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522142,"byte_end":522169,"line_start":387,"line_end":387,"column_start":2,"column_end":29}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522171,"byte_end":522174,"line_start":388,"line_end":388,"column_start":2,"column_end":5}},{"value":"/ let bits = bits![mut 0, 1, 0];","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522176,"byte_end":522210,"line_start":389,"line_end":389,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522212,"byte_end":522215,"line_start":390,"line_end":390,"column_start":2,"column_end":5}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522217,"byte_end":522222,"line_start":391,"line_end":391,"column_start":2,"column_end":7}},{"value":"/   // Get the iterator:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522224,"byte_end":522250,"line_start":392,"line_end":392,"column_start":2,"column_end":28}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522252,"byte_end":522289,"line_start":393,"line_end":393,"column_start":2,"column_end":39}},{"value":"/   // We move to the next element:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522291,"byte_end":522328,"line_start":394,"line_end":394,"column_start":2,"column_end":39}},{"value":"/   iter.next();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522330,"byte_end":522348,"line_start":395,"line_end":395,"column_start":2,"column_end":20}},{"value":"/   // So if we print what `into_bitslice`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522350,"byte_end":522394,"line_start":396,"line_end":396,"column_start":2,"column_end":46}},{"value":"/   // returns here, we have \"[10]\":","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522396,"byte_end":522434,"line_start":397,"line_end":397,"column_start":2,"column_end":40}},{"value":"/   println!(\"{:b}\", iter.into_slice());","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522436,"byte_end":522478,"line_start":398,"line_end":398,"column_start":2,"column_end":44}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522480,"byte_end":522485,"line_start":399,"line_end":399,"column_start":2,"column_end":7}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522487,"byte_end":522490,"line_start":400,"line_end":400,"column_start":2,"column_end":5}},{"value":"/ // Now let’s modify a value of the slice:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522492,"byte_end":522539,"line_start":401,"line_end":401,"column_start":2,"column_end":47}},{"value":"/ {","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522541,"byte_end":522546,"line_start":402,"line_end":402,"column_start":2,"column_end":7}},{"value":"/   // First we get back the iterator:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522548,"byte_end":522588,"line_start":403,"line_end":403,"column_start":2,"column_end":42}},{"value":"/   let mut iter = bits.iter_mut();","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522590,"byte_end":522627,"line_start":404,"line_end":404,"column_start":2,"column_end":39}},{"value":"/   // We change the value of the first bit of","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522629,"byte_end":522677,"line_start":405,"line_end":405,"column_start":2,"column_end":50}},{"value":"/   // the slice returned by the `next` method:","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522679,"byte_end":522728,"line_start":406,"line_end":406,"column_start":2,"column_end":51}},{"value":"/   *iter.next().unwrap() = true;","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522730,"byte_end":522765,"line_start":407,"line_end":407,"column_start":2,"column_end":37}},{"value":"/ }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522767,"byte_end":522772,"line_start":408,"line_end":408,"column_start":2,"column_end":7}},{"value":"/ // Now bits is \"[110]\":","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522774,"byte_end":522801,"line_start":409,"line_end":409,"column_start":2,"column_end":29}},{"value":"/ println!(\"{:b}\", bits);","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522803,"byte_end":522830,"line_start":410,"line_end":410,"column_start":2,"column_end":29}},{"value":"/ # }","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522832,"byte_end":522839,"line_start":411,"line_end":411,"column_start":2,"column_end":9}},{"value":"/ ```","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522841,"byte_end":522848,"line_start":412,"line_end":412,"column_start":2,"column_end":9}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522850,"byte_end":522853,"line_start":413,"line_end":413,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":522855,"byte_end":522895,"line_start":414,"line_end":414,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":2728},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523152,"byte_end":523162,"line_start":423,"line_end":423,"column_start":9,"column_end":19},"name":"into_slice","qualname":"<IterMut>::into_slice","value":"pub fn into_slice(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523026,"byte_end":523043,"line_start":420,"line_end":420,"column_start":2,"column_end":19}},{"value":"cfg(not(tarpaulin_include))","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523045,"byte_end":523075,"line_start":421,"line_end":421,"column_start":2,"column_end":32}},{"value":"deprecated = \"Use `into_bitslice` to view the underlying slice\"","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523077,"byte_end":523143,"line_start":422,"line_end":422,"column_start":2,"column_end":68}}]},{"kind":"Struct","id":{"krate":0,"index":4203},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526815,"byte_end":526822,"line_start":619,"line_end":619,"column_start":12,"column_end":19},"name":"Windows","qualname":"::slice::iter::Windows","value":"Windows {  }","parent":null,"children":[{"krate":0,"index":4207},{"krate":0,"index":4208}],"decl_id":null,"docs":" An iterator over overlapping subslices of length `size`.","sig":null,"attributes":[{"value":"* An iterator over overlapping subslices of length `size`.\n\nThis struct is created by the [`.windows()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Windows`](core::slice::Windows)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.windows()`]: crate::slice::BitSlice::windows\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":526504,"byte_end":526779,"line_start":607,"line_end":617,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4242},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528962,"byte_end":528968,"line_start":709,"line_end":709,"column_start":12,"column_end":18},"name":"Chunks","qualname":"::slice::iter::Chunks","value":"Chunks {  }","parent":null,"children":[{"krate":0,"index":4246},{"krate":0,"index":4247}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Chunks`](core::slice::Chunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks()`]: crate::slice::BitSlice::chunks\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":528463,"byte_end":528926,"line_start":693,"line_end":707,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4281},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":531686,"byte_end":531695,"line_start":818,"line_end":818,"column_start":12,"column_end":21},"name":"ChunksMut","qualname":"::slice::iter::ChunksMut","value":"ChunksMut {  }","parent":null,"children":[{"krate":0,"index":4285},{"krate":0,"index":4286}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.chunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksMut`](core::slice::ChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_mut()`]: crate::slice::BitSlice::chunks_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":531087,"byte_end":531657,"line_start":798,"line_end":816,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4315},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":534584,"byte_end":534595,"line_start":927,"line_end":927,"column_start":12,"column_end":23},"name":"ChunksExact","qualname":"::slice::iter::ChunksExact","value":"ChunksExact {  }","parent":null,"children":[{"krate":0,"index":4319},{"krate":0,"index":4320},{"krate":0,"index":4321}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be ommitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExact`](core::slice::ChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact()`]: crate::slice::BitSlice::chunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":533951,"byte_end":534548,"line_start":909,"line_end":925,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2741},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535598,"byte_end":535607,"line_start":969,"line_end":969,"column_start":9,"column_end":18},"name":"remainder","qualname":"<ChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535269,"byte_end":535344,"line_start":960,"line_end":960,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535346,"byte_end":535414,"line_start":961,"line_end":961,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535416,"byte_end":535440,"line_start":962,"line_end":962,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535442,"byte_end":535445,"line_start":963,"line_end":963,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535447,"byte_end":535461,"line_start":964,"line_end":964,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535463,"byte_end":535466,"line_start":965,"line_end":965,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExact::remainder`](core::slice::ChunksExact::remainder)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535468,"byte_end":535542,"line_start":966,"line_end":966,"column_start":2,"column_end":76}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535544,"byte_end":535547,"line_start":967,"line_end":967,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":535549,"byte_end":535589,"line_start":968,"line_end":968,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4355},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":537677,"byte_end":537691,"line_start":1053,"line_end":1053,"column_start":12,"column_end":26},"name":"ChunksExactMut","qualname":"::slice::iter::ChunksExactMut","value":"ChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4359},{"krate":0,"index":4360},{"krate":0,"index":4361}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the beginning of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.chunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::ChunksExactMut`](core::slice::ChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.chunks_exact_mut()`]: crate::slice::BitSlice::chunks_exact_mut\n[`.into_remainder()`]: Self::into_remainder\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":536930,"byte_end":537648,"line_start":1031,"line_end":1051,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2747},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538894,"byte_end":538908,"line_start":1101,"line_end":1101,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<ChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538398,"byte_end":538473,"line_start":1086,"line_end":1086,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538475,"byte_end":538543,"line_start":1087,"line_end":1087,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538545,"byte_end":538569,"line_start":1088,"line_end":1088,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538571,"byte_end":538574,"line_start":1089,"line_end":1089,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538576,"byte_end":538590,"line_start":1090,"line_end":1090,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538592,"byte_end":538595,"line_start":1091,"line_end":1091,"column_start":2,"column_end":5}},{"value":"/ [`slice::ChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538597,"byte_end":538648,"line_start":1092,"line_end":1092,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538650,"byte_end":538653,"line_start":1093,"line_end":1093,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538655,"byte_end":538676,"line_start":1094,"line_end":1094,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538678,"byte_end":538681,"line_start":1095,"line_end":1095,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538683,"byte_end":538757,"line_start":1096,"line_end":1096,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538759,"byte_end":538781,"line_start":1097,"line_end":1097,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538783,"byte_end":538786,"line_start":1098,"line_end":1098,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::ChunksExactMut::into_remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538788,"byte_end":538843,"line_start":1099,"line_end":1099,"column_start":2,"column_end":57}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538845,"byte_end":538885,"line_start":1100,"line_end":1100,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4390},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540863,"byte_end":540870,"line_start":1180,"line_end":1180,"column_start":12,"column_end":19},"name":"RChunks","qualname":"::slice::iter::RChunks","value":"RChunks {  }","parent":null,"children":[{"krate":0,"index":4394},{"krate":0,"index":4395}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last\nslice of the iteration will be the remainder.\n\nThis struct is created by the [`.rchunks()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunks`](core::slice::RChunks)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks()`]: crate::slice::BitSlice::rchunks\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":540365,"byte_end":540827,"line_start":1164,"line_end":1178,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4429},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":544271,"byte_end":544281,"line_start":1301,"line_end":1301,"column_start":12,"column_end":22},"name":"RChunksMut","qualname":"::slice::iter::RChunksMut","value":"RChunksMut {  }","parent":null,"children":[{"krate":0,"index":4433},{"krate":0,"index":4434}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last slice of\nthe iteration will be the remainder.\n\nThis struct is created by the [`.rchunks_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksMut`](core::slice::RChunksMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_mut()`]: crate::slice::BitSlice::rchunks_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":543673,"byte_end":544242,"line_start":1281,"line_end":1299,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4463},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":546959,"byte_end":546971,"line_start":1403,"line_end":1403,"column_start":12,"column_end":24},"name":"RChunksExact","qualname":"::slice::iter::RChunksExact","value":"RChunksExact {  }","parent":null,"children":[{"krate":0,"index":4467},{"krate":0,"index":4468},{"krate":0,"index":4469}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) chunks (`chunk_size`\nbits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExact`](core::slice::RChunksExact)\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rchunks_exact()`]: crate::slice::BitSlice::rchunks_exact\n[`.remainder()`]: Self::remainder\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":546328,"byte_end":546923,"line_start":1385,"line_end":1401,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2753},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547940,"byte_end":547949,"line_start":1444,"line_end":1444,"column_start":9,"column_end":18},"name":"remainder","qualname":"<RChunksExact>::remainder","value":"pub fn remainder(&Self) -> &'a BitSlice<O, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547609,"byte_end":547684,"line_start":1435,"line_end":1435,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547686,"byte_end":547754,"line_start":1436,"line_end":1436,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547756,"byte_end":547780,"line_start":1437,"line_end":1437,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547782,"byte_end":547785,"line_start":1438,"line_end":1438,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547787,"byte_end":547801,"line_start":1439,"line_end":1439,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547803,"byte_end":547806,"line_start":1440,"line_end":1440,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExact::remainder`](core::slice::RChunksExact::remainder)","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547808,"byte_end":547884,"line_start":1441,"line_end":1441,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547886,"byte_end":547889,"line_start":1442,"line_end":1442,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547891,"byte_end":547931,"line_start":1443,"line_end":1443,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4503},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550142,"byte_end":550157,"line_start":1529,"line_end":1529,"column_start":12,"column_end":27},"name":"RChunksExactMut","qualname":"::slice::iter::RChunksExactMut","value":"RChunksExactMut {  }","parent":null,"children":[{"krate":0,"index":4507},{"krate":0,"index":4508},{"krate":0,"index":4509}],"decl_id":null,"docs":" An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.","sig":null,"attributes":[{"value":"* An iterator over a [`BitSlice`] in (non-overlapping) mutable chunks\n(`chunk_size` bits at a time), starting at the end of the slice.\n\nWhen the slice length is not evenly divided by the chunk size, the last up to\n`chunk_size-1` bits will be omitted but can be retrieved from the\n[`.into_remainder()`] function from the iterator.\n\nThis struct is created by the [`.rchunks_exact_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RChunksExactMut`](core::slice::RChunksExactMut)\n\n# API Differences\n\nAll slices yielded from this iterator are marked as aliased.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.into_remainder()`]: Self::into_remainder\n[`.rchunks_exact_mut()`]: crate::slice::BitSlice::rchunks_exact_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":549396,"byte_end":550113,"line_start":1507,"line_end":1527,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":2759},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551326,"byte_end":551340,"line_start":1576,"line_end":1576,"column_start":9,"column_end":23},"name":"into_remainder","qualname":"<RChunksExactMut>::into_remainder","value":"pub fn into_remainder(Self) -> &'a mut BitSlice<O, T::Alias>","parent":null,"children":[],"decl_id":null,"docs":" Returns the remainder of the original [`BitSlice`] that is not going to\n be returned by the iterator. The returned `BitSlice` has at most\n `chunk_size-1` bits.","sig":null,"attributes":[{"value":"/ Returns the remainder of the original [`BitSlice`] that is not going to","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550828,"byte_end":550903,"line_start":1561,"line_end":1561,"column_start":2,"column_end":77}},{"value":"/ be returned by the iterator. The returned `BitSlice` has at most","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550905,"byte_end":550973,"line_start":1562,"line_end":1562,"column_start":2,"column_end":70}},{"value":"/ `chunk_size-1` bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550975,"byte_end":550999,"line_start":1563,"line_end":1563,"column_start":2,"column_end":26}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551001,"byte_end":551004,"line_start":1564,"line_end":1564,"column_start":2,"column_end":5}},{"value":"/ # Original","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551006,"byte_end":551020,"line_start":1565,"line_end":1565,"column_start":2,"column_end":16}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551022,"byte_end":551025,"line_start":1566,"line_end":1566,"column_start":2,"column_end":5}},{"value":"/ [`slice::RChunksExactMut::into_remainder`][orig]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551027,"byte_end":551079,"line_start":1567,"line_end":1567,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551081,"byte_end":551084,"line_start":1568,"line_end":1568,"column_start":2,"column_end":5}},{"value":"/ # API Differences","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551086,"byte_end":551107,"line_start":1569,"line_end":1569,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551109,"byte_end":551112,"line_start":1570,"line_end":1570,"column_start":2,"column_end":5}},{"value":"/ The remainder slice, as with all slices yielded from this iterator, is","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551114,"byte_end":551188,"line_start":1571,"line_end":1571,"column_start":2,"column_end":76}},{"value":"/ marked as aliased.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551190,"byte_end":551212,"line_start":1572,"line_end":1572,"column_start":2,"column_end":24}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551214,"byte_end":551217,"line_start":1573,"line_end":1573,"column_start":2,"column_end":5}},{"value":"/ [orig]: core::slice::RChunksExactMut::into_remainder","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551219,"byte_end":551275,"line_start":1574,"line_end":1574,"column_start":2,"column_end":58}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":551277,"byte_end":551317,"line_start":1575,"line_end":1575,"column_start":2,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":4563},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555487,"byte_end":555492,"line_start":1776,"line_end":1776,"column_start":12,"column_end":17},"name":"Split","qualname":"::slice::iter::Split","value":"Split {  }","parent":null,"children":[{"krate":0,"index":4568},{"krate":0,"index":4569},{"krate":0,"index":4570}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction.\n\nThis struct is created by the [`.split()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::Split`](core::slice::Split)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split()`]: crate::slice::BitSlice::split\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":555009,"byte_end":555458,"line_start":1758,"line_end":1774,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2762},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":557092,"byte_end":557100,"line_start":1849,"line_end":1849,"column_start":12,"column_end":20},"name":"SplitMut","qualname":"::slice::iter::SplitMut","value":"SplitMut {  }","parent":null,"children":[{"krate":0,"index":2767},{"krate":0,"index":2768},{"krate":0,"index":2769}],"decl_id":null,"docs":" An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.","sig":null,"attributes":[{"value":"* An iterator over the mutable subslices which are separated by bits that\nmatch `pred`.\n\nThis struct is created by the [`.split_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitMut`](core::slice::SplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.split_mut()`]: crate::slice::BitSlice::split_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":556605,"byte_end":557080,"line_start":1832,"line_end":1848,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4653},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":558817,"byte_end":558823,"line_start":1928,"line_end":1928,"column_start":12,"column_end":18},"name":"RSplit","qualname":"::slice::iter::RSplit","value":"RSplit {  }","parent":null,"children":[{"krate":0,"index":4658},{"krate":0,"index":4659},{"krate":0,"index":4660}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplit`](core::slice::RSplit)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit()`]: crate::slice::BitSlice::rsplit\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":558291,"byte_end":558788,"line_start":1910,"line_end":1926,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2770},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":560286,"byte_end":560295,"line_start":1987,"line_end":1987,"column_start":12,"column_end":21},"name":"RSplitMut","qualname":"::slice::iter::RSplitMut","value":"RSplitMut {  }","parent":null,"children":[{"krate":0,"index":2775},{"krate":0,"index":2776},{"krate":0,"index":2777}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, starting from the end of the [`BitSlice`].\n\nThis struct is created by the [`.rsplit_mut()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitMut`](core::slice::RSplitMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.rsplit_mut()`]: crate::slice::BitSlice::rsplit_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":559759,"byte_end":560274,"line_start":1970,"line_end":1986,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2780},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":562091,"byte_end":562097,"line_start":2055,"line_end":2055,"column_start":12,"column_end":18},"name":"SplitN","qualname":"::slice::iter::SplitN","value":"SplitN {  }","parent":null,"children":[{"krate":0,"index":2785},{"krate":0,"index":2786}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`.splitn()`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitN`](core::slice::SplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.splitn()`]: crate::slice::BitSlice::splitn\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":561588,"byte_end":562079,"line_start":2038,"line_end":2054,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2787},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":562860,"byte_end":562869,"line_start":2086,"line_end":2086,"column_start":12,"column_end":21},"name":"SplitNMut","qualname":"::slice::iter::SplitNMut","value":"SplitNMut {  }","parent":null,"children":[{"krate":0,"index":2792},{"krate":0,"index":2793}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits.\n\nThis struct is created by the [`splitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::SplitNMut`](core::slice::SplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`splitn_mut`]: crate::slice::BitSlice::splitn_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":562345,"byte_end":562848,"line_start":2069,"line_end":2085,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2794},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":563665,"byte_end":563672,"line_start":2118,"line_end":2118,"column_start":12,"column_end":19},"name":"RSplitN","qualname":"::slice::iter::RSplitN","value":"RSplitN {  }","parent":null,"children":[{"krate":0,"index":2799},{"krate":0,"index":2800}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitN`](core::slice::RSplitN)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn`]: crate::slice::BitSlice::rsplitn\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":563120,"byte_end":563653,"line_start":2100,"line_end":2117,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2801},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":564484,"byte_end":564494,"line_start":2150,"line_end":2150,"column_start":12,"column_end":22},"name":"RSplitNMut","qualname":"::slice::iter::RSplitNMut","value":"RSplitNMut {  }","parent":null,"children":[{"krate":0,"index":2806},{"krate":0,"index":2807}],"decl_id":null,"docs":" An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].","sig":null,"attributes":[{"value":"* An iterator over subslices separated by bits that match a predicate\nfunction, limited to a given number of splits, starting from the end of the\n[`BitSlice`].\n\nThis struct is created by the [`rsplitn_mut`] method on [`BitSlice`]s.\n\n# Original\n\n[`slice::RSplitNMut`](core::slice::RSplitNMut)\n\n# API Differences\n\nIn order to allow more than one bit of information for the split decision, the\npredicate receives the index of each bit, as well as its value.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`rsplitn_mut`]: crate::slice::BitSlice::rsplitn_mut\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":563921,"byte_end":564472,"line_start":2132,"line_end":2149,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4835},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":566878,"byte_end":566886,"line_start":2250,"line_end":2250,"column_start":12,"column_end":20},"name":"IterOnes","qualname":"::slice::iter::IterOnes","value":"IterOnes {  }","parent":null,"children":[{"krate":0,"index":4839},{"krate":0,"index":4840}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are set to `1`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are set to `1`.\n\nThis struct is created by the [`.iter_ones()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_ones()`]: crate::slice::BitSlice::iter_ones\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":566579,"byte_end":566804,"line_start":2242,"line_end":2248,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4884},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569931,"byte_end":569940,"line_start":2404,"line_end":2404,"column_start":12,"column_end":21},"name":"IterZeros","qualname":"::slice::iter::IterZeros","value":"IterZeros {  }","parent":null,"children":[{"krate":0,"index":4888},{"krate":0,"index":4889}],"decl_id":null,"docs":" Enumerates bits in a [`BitSlice`] that are cleared to `0`.","sig":null,"attributes":[{"value":"* Enumerates bits in a [`BitSlice`] that are cleared to `0`.\n\nThis struct is created by the [`.iter_zeros()`] method on [`BitSlice`]s.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`.iter_zeros()`]: crate::slice::BitSlice::iter_zeros\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569625,"byte_end":569857,"line_start":2396,"line_end":2402,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":4933},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":577867,"byte_end":577881,"line_start":2727,"line_end":2727,"column_start":5,"column_end":19},"name":"IterMutNoAlias","qualname":"::slice::iter::IterMutNoAlias","value":"IterMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":4937}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":4983},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578000,"byte_end":578016,"line_start":2731,"line_end":2731,"column_start":5,"column_end":21},"name":"ChunksMutNoAlias","qualname":"::slice::iter::ChunksMutNoAlias","value":"ChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":4987}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5033},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578124,"byte_end":578145,"line_start":2735,"line_end":2735,"column_start":5,"column_end":26},"name":"ChunksExactMutNoAlias","qualname":"::slice::iter::ChunksExactMutNoAlias","value":"ChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5037}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5083},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578249,"byte_end":578266,"line_start":2739,"line_end":2739,"column_start":5,"column_end":22},"name":"RChunksMutNoAlias","qualname":"::slice::iter::RChunksMutNoAlias","value":"RChunksMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5087}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5133},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578375,"byte_end":578397,"line_start":2743,"line_end":2743,"column_start":5,"column_end":27},"name":"RChunksExactMutNoAlias","qualname":"::slice::iter::RChunksExactMutNoAlias","value":"RChunksExactMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5137}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5183},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578503,"byte_end":578518,"line_start":2747,"line_end":2747,"column_start":5,"column_end":20},"name":"SplitMutNoAlias","qualname":"::slice::iter::SplitMutNoAlias","value":"SplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5188}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5242},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578625,"byte_end":578641,"line_start":2751,"line_end":2751,"column_start":5,"column_end":21},"name":"RSplitMutNoAlias","qualname":"::slice::iter::RSplitMutNoAlias","value":"RSplitMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5247}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5301},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578748,"byte_end":578764,"line_start":2755,"line_end":2755,"column_start":5,"column_end":21},"name":"SplitNMutNoAlias","qualname":"::slice::iter::SplitNMutNoAlias","value":"SplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5306}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Struct","id":{"krate":0,"index":5360},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":578872,"byte_end":578889,"line_start":2759,"line_end":2759,"column_start":5,"column_end":22},"name":"RSplitNMutNoAlias","qualname":"::slice::iter::RSplitNMutNoAlias","value":"RSplitNMutNoAlias {  }","parent":null,"children":[{"krate":0,"index":5365}],"decl_id":null,"docs":" An iterator variant that does not apply a [`T::Alias`] marker to its\n yielded items.","sig":null,"attributes":[{"value":"/ An iterator variant that does not apply a [`T::Alias`] marker to its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573182,"byte_end":573254,"line_start":2565,"line_end":2565,"column_start":3,"column_end":75}},{"value":"/ yielded items.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573257,"byte_end":573275,"line_start":2566,"line_end":2566,"column_start":3,"column_end":21}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573278,"byte_end":573281,"line_start":2567,"line_end":2567,"column_start":3,"column_end":6}},{"value":"/ This iterator can be safely used in `for … in` loop headers, but","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573284,"byte_end":573354,"line_start":2568,"line_end":2568,"column_start":3,"column_end":71}},{"value":"/ cannot be used anywhere that its surrounding code may pull multiple","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573357,"byte_end":573428,"line_start":2569,"line_end":2569,"column_start":3,"column_end":74}},{"value":"/ yielded items into the same scope. This includes any iterator","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573431,"byte_end":573496,"line_start":2570,"line_end":2570,"column_start":3,"column_end":68}},{"value":"/ adapters that pull multiple yielded items into the same collection!","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573499,"byte_end":573570,"line_start":2571,"line_end":2571,"column_start":3,"column_end":74}},{"value":"/ Each yielded item **must** not have any sibling items in its scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573573,"byte_end":573644,"line_start":2572,"line_end":2572,"column_start":3,"column_end":74}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573647,"byte_end":573650,"line_start":2573,"line_end":2573,"column_start":3,"column_end":6}},{"value":"/ This iterator does not yield [`T::Mem`] raw-typed references, as it","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573653,"byte_end":573724,"line_start":2574,"line_end":2574,"column_start":3,"column_end":74}},{"value":"/ may be produced from an already-aliased iterator and must retain its","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573727,"byte_end":573799,"line_start":2575,"line_end":2575,"column_start":3,"column_end":75}},{"value":"/ initial aliasing properties. It merely asserts that it will not be","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573802,"byte_end":573872,"line_start":2576,"line_end":2576,"column_start":3,"column_end":73}},{"value":"/ used in contexts that produce multiple yielded items in the same","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573875,"byte_end":573943,"line_start":2577,"line_end":2577,"column_start":3,"column_end":71}},{"value":"/ scope.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573946,"byte_end":573956,"line_start":2578,"line_end":2578,"column_start":3,"column_end":13}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573959,"byte_end":573962,"line_start":2579,"line_end":2579,"column_start":3,"column_end":6}},{"value":"/ [`T::Alias`]: crate::store::BitStore::Alias","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":573965,"byte_end":574012,"line_start":2580,"line_end":2580,"column_start":3,"column_end":50}},{"value":"/ [`T::Mem`]: crate::store::BitStore::Mem","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":574015,"byte_end":574058,"line_start":2581,"line_end":2581,"column_start":3,"column_end":46}}]},{"kind":"Mod","id":{"krate":0,"index":3299},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"store","qualname":"::store","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","parent":null,"children":[{"krate":0,"index":3300},{"krate":0,"index":3301},{"krate":0,"index":3302},{"krate":0,"index":3303},{"krate":0,"index":3306},{"krate":0,"index":3309},{"krate":0,"index":3310},{"krate":0,"index":3313},{"krate":0,"index":3316},{"krate":0,"index":3319},{"krate":0,"index":3320},{"krate":0,"index":3323},{"krate":0,"index":3324},{"krate":0,"index":3326},{"krate":0,"index":3329},{"krate":0,"index":5537},{"krate":0,"index":5550},{"krate":0,"index":5563},{"krate":0,"index":5575},{"krate":0,"index":5576},{"krate":0,"index":5577},{"krate":0,"index":5578},{"krate":0,"index":5591},{"krate":0,"index":5604},{"krate":0,"index":5616},{"krate":0,"index":5617},{"krate":0,"index":5618},{"krate":0,"index":5619},{"krate":0,"index":5632},{"krate":0,"index":5645},{"krate":0,"index":5657},{"krate":0,"index":5658},{"krate":0,"index":5659},{"krate":0,"index":5660},{"krate":0,"index":5673},{"krate":0,"index":5686},{"krate":0,"index":5698},{"krate":0,"index":5699},{"krate":0,"index":5700},{"krate":0,"index":5701},{"krate":0,"index":5714},{"krate":0,"index":5727},{"krate":0,"index":5739},{"krate":0,"index":5740},{"krate":0,"index":5741},{"krate":0,"index":5742},{"krate":0,"index":5745},{"krate":0,"index":5757},{"krate":0,"index":5758},{"krate":0,"index":5761},{"krate":0,"index":5773},{"krate":0,"index":5774},{"krate":0,"index":5777},{"krate":0,"index":5789},{"krate":0,"index":5790},{"krate":0,"index":5793},{"krate":0,"index":5805},{"krate":0,"index":5806},{"krate":0,"index":5809},{"krate":0,"index":5821},{"krate":0,"index":3344}],"decl_id":null,"docs":" Memory modeling.","sig":null,"attributes":[{"value":"* Memory modeling.\n\nThis module provides the [`BitStore`] trait, which contains all of the logic\nrequired to perform memory accesses from a data structure handle.\n\n# `bitvec` Memory Model\n\n`bitvec` considers all memory within [`BitSlice`] regions as if it were composed\nof discrete bits, each divisible and indipendent from its neighbors, just as the\nRust memory model considers elements `T` in a slice `[T]`. Much as ordinary byte\nslices `[u8]` provide an API where each byte is distinct and independent from\nits neighbors, but the underlying processor silicon clusters them in words and\ncachelines, both the processor silicon *and* the Rust compiler require that bits\nin a `BitSlice` be grouped into memory elements, and collectively subjected to\naliasing rules within their batch.\n\n`bitvec` manages this through the [`BitStore`] trait. It is implemented on three\ntype families available from the Rust standard libraries:\n\n- [unsigned integers]\n- [atomic] unsigned integers\n- [`Cell`] wrappers of unsigned integers\n\n`bitvec` receives a memory region typed with one of these three families and\nwraps it in one of its data structures based on [`BitSlice`]. The target\nprocessor is responsible for handling any contention between memory elements;\nthis is irrelevant to the `bitvec` model. `bitvec` is solely responsible for\nproving to the Rust compiler that all memory accesses through its types are\ncorrectly managed according to the `&`/`&mut` shared/exclusion reference model,\nand the [`UnsafeCell`] shared-mutation model.\n\nThrough [`BitStore`], `bitvec` is able to demonstrate that `&mut BitSlice`\nreferences to a region of *bits* have no other `BitSlice` references capable of\nviewing those bits. However, `&mut BitSlice` references *may* have other\n`&BitSlice` references capable of viewing the memory elements at locations that\nit modifies, and the Rust compiler considers it undefined behavior for such\nconditions to allow racing writes and reads without synchronization.\n\nAs such, [`BitStore`] provides a closed type-system graph that the [`BitSlice`]\nAPI uses to mark events that can induce aliases to memory locations. When a\n`&mut BitSlice<_, T>` typed with an ordinary unsigned integer use any of the\nAPIs that call [`.split_at_mut()`], it transitions to\n`&mut BitSlice<_, T::Alias>`. The [`::Alias`] associated type is always a type\nthat manages aliasing references to a single memory location: either an [atomic]\nunsigned integer `T` or a [`Cell`] of the unsigned integer `T`. The Rust\nstandard library guarantees that these types will behave correctly when multiple\nreferences to a single location attempt to read from and write to it.\n\nThe [atomic] and [`Cell`] types stay as themselves when [`BitSlice`] introduces\naliasing conditions, as they are already alias-aware.\n\nLastly, the `bitvec` memory description model as implemented in the [`domain`]\nmodule is able to perform the inverse transition: where it can demonstrate a\nstatic awareness that the `&`/`&mut` exclusion rules are satisfied for a\nparticular element slice `[T]`, it may apply the [`::Unalias`] marker to undo\nany `::Alias`ing, and present a type that has no more aliasing protection than\nthat with which the memory region was initially declared.\n\nNamely, this means that the [atomic] and [`Cell`] wrappers will never be removed\nfrom a region that had them before it was given to `bitvec`, while a region of\nordinary integers may regain the ability to be viewed without synchrony guards\nif `bitvec` can prove safety in the [`domain`] module.\n\nIn order to retain `bitvec`’s promise that an `&mut BitSlice<_, T>` has the sole\nright of observation for all bits in its region, the unsigned integers alias to\na crate-internal wrapper over the alias-capable standard-library types. This\nwrapper forbids mutation through shared references, so two [`BitSlice`]\nreferences that alias a memory location, but do not overlap in bits, may not be\ncoërced to interfere with each other.\n\n[atomic]: core::sync::atomic\n[unsigned integers]: core::primitive\n[`BitSlice`]: crate::slice::BitSlice\n[`BitStore`]: crate::store::BitStore\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`domain`]: crate::domain\n[`::Alias`]: crate::store::BitStore::Alias\n[`::Unalias`]: crate::store::BitStore::Unalias\n[`.split_at_mut()`]: crate::slice::BitSlice::split_at_mut\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":613171,"byte_end":617515,"line_start":1,"line_end":81,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3329},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620078,"byte_end":620086,"line_start":149,"line_end":149,"column_start":11,"column_end":19},"name":"BitStore","qualname":"::store::BitStore","value":"BitStore: 'static + seal::Sealed + Debug","parent":null,"children":[{"krate":0,"index":3330},{"krate":0,"index":3331},{"krate":0,"index":3332},{"krate":0,"index":3333},{"krate":0,"index":3334},{"krate":0,"index":3335},{"krate":0,"index":3336},{"krate":0,"index":3338},{"krate":0,"index":3340}],"decl_id":null,"docs":" Common interface for memory regions.","sig":null,"attributes":[{"value":"* Common interface for memory regions.\n\nThis trait is used to describe how [`BitSlice`] regions interact with the memory\nbus when reading to or writing from locations. It manages the behavior required\nwhen locations are contended for write permissions by multiple handles, and\nensures that Rust’s `&`/`&mut` shared/exclusion system, as well as its\n[`UnsafeCell`] shared-mutation system, are upheld for individual bits as well as\nfor the memory operations that power the slice.\n\nThis trait is publicly implemented on the unsigned integers that implement\n[`BitRegister`], their [`Cell`] wrappers, and (if present) their [atomic]\nvariants. You may freely construct [`BitSlice`] regions over elements or slices\nof any of these types.\n\nShared [`BitSlice`] references (`&BitSlice<_, T: BitStore>`) permit multiple\nhandles to view the bits they describe. When `T` is a [`Cell`] or [atom], these\nhandles may use the methods [`.set_aliased()`] and [`.set_aliased_unchecked()`]\nto modify memory; when `T` is an ordinary integer, they may not.\n\nExclusive [`BitSlice`] references (`&mut BitSlice<_, T: BitStore>`) do not allow\nany other handle to view the bits they describe. However, other handles may view\nthe **memory locations** containing their bits! When `T` is a [`Cell`] or\n[atom], no special behavior occurs. When `T` is an ordinary integer, [`bitvec`]\ndetects the creation of multiple `&mut BitSlice<_, T>` handles that do not alias\nbits but *do* alias memory, and enforces that these handles use `Cell` or atomic\nbehavior to access the underlying memory, even though individual bits in the\nslices are not contended.\n\n# Integer Width Restricitons\n\nCurrently, [`bitvec`] is only tested on 32- and 64- bit architectures. This\nmeans that `u8`, `u16`, `u32`, and `usize` unconditionally implement `BitStore`,\nbut `u64` will only do so on 64-bit targets. This is a necessary restriction of\n`bitvec` internals. Please comment on [Issue #76] if this affects you.\n\n[Issue #76]: https://github.com/myrrlyn/bitvec/issues/76\n[atom]: core::sync::atomic\n[atomic]: core::sync::atomic\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n[`Cell`]: core::cell::Cell\n[`UnsafeCell`]: core::cell::UnsafeCell\n[`bitvec`]: crate\n[`.set_aliased()`]: crate::slice::BitSlice::set_aliased\n[`.set_aliased_unchecked()`]: crate::slice::BitSlice::set_aliased_unchecked\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":617698,"byte_end":620067,"line_start":103,"line_end":148,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3330},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620295,"byte_end":620298,"line_start":154,"line_end":154,"column_start":7,"column_end":10},"name":"Mem","qualname":"::store::BitStore::Mem","value":"type Mem: BitRegister + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" The register type used in the slice region underlying a [`BitSlice`]\n handle. It is always an unsigned integer.","sig":null,"attributes":[{"value":"/ The register type used in the slice region underlying a [`BitSlice`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620122,"byte_end":620194,"line_start":150,"line_end":150,"column_start":2,"column_end":74}},{"value":"/ handle. It is always an unsigned integer.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620196,"byte_end":620241,"line_start":151,"line_end":151,"column_start":2,"column_end":47}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620243,"byte_end":620246,"line_start":152,"line_end":152,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620248,"byte_end":620288,"line_start":153,"line_end":153,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3331},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620571,"byte_end":620577,"line_start":158,"line_end":158,"column_start":7,"column_end":13},"name":"Access","qualname":"::store::BitStore::Access","value":"type Access: BitAccess<Item = Self::Mem> + BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" A type that selects appropriate load/store instructions used for\n accessing the memory bus. It determines what instructions are used when\n moving a `Self::Mem` value between the processor and the memory system.\n","sig":null,"attributes":[{"value":"/ A type that selects appropriate load/store instructions used for","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620342,"byte_end":620410,"line_start":155,"line_end":155,"column_start":2,"column_end":70}},{"value":"/ accessing the memory bus. It determines what instructions are used when","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620412,"byte_end":620487,"line_start":156,"line_end":156,"column_start":2,"column_end":77}},{"value":"/ moving a `Self::Mem` value between the processor and the memory system.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620489,"byte_end":620564,"line_start":157,"line_end":157,"column_start":2,"column_end":77}}]},{"kind":"Type","id":{"krate":0,"index":3332},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620886,"byte_end":620891,"line_start":164,"line_end":164,"column_start":7,"column_end":12},"name":"Alias","qualname":"::store::BitStore::Alias","value":"type Alias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" A sibling `BitStore` implementor. It is used when a [`BitSlice`]\n introduces multiple handles that view the same memory location, and at\n least one of them has write permission to it.","sig":null,"attributes":[{"value":"/ A sibling `BitStore` implementor. It is used when a [`BitSlice`]","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620637,"byte_end":620705,"line_start":159,"line_end":159,"column_start":2,"column_end":70}},{"value":"/ introduces multiple handles that view the same memory location, and at","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620707,"byte_end":620781,"line_start":160,"line_end":160,"column_start":2,"column_end":76}},{"value":"/ least one of them has write permission to it.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620783,"byte_end":620832,"line_start":161,"line_end":161,"column_start":2,"column_end":51}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620834,"byte_end":620837,"line_start":162,"line_end":162,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620839,"byte_end":620879,"line_start":163,"line_end":163,"column_start":2,"column_end":42}}]},{"kind":"Type","id":{"krate":0,"index":3333},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621105,"byte_end":621112,"line_start":169,"line_end":169,"column_start":7,"column_end":14},"name":"Unalias","qualname":"::store::BitStore::Unalias","value":"type Unalias: BitStore<Mem = Self::Mem>;","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" The inverse of `Alias`. It is used when a [`BitSlice`] removes the\n conditions that required a `T -> T::Alias` transition.","sig":null,"attributes":[{"value":"/ The inverse of `Alias`. It is used when a [`BitSlice`] removes the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620921,"byte_end":620991,"line_start":165,"line_end":165,"column_start":2,"column_end":72}},{"value":"/ conditions that required a `T -> T::Alias` transition.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620993,"byte_end":621051,"line_start":166,"line_end":166,"column_start":2,"column_end":60}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621053,"byte_end":621056,"line_start":167,"line_end":167,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621058,"byte_end":621098,"line_start":168,"line_end":168,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3334},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621230,"byte_end":621240,"line_start":173,"line_end":173,"column_start":5,"column_end":15},"name":"load_value","qualname":"::store::BitStore::load_value","value":"pub fn load_value(&Self) -> Self::Mem","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" Loads a value out of the memory system according to the `::Access`\n rules.\n","sig":null,"attributes":[{"value":"/ Loads a value out of the memory system according to the `::Access`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621143,"byte_end":621213,"line_start":171,"line_end":171,"column_start":2,"column_end":72}},{"value":"/ rules.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621215,"byte_end":621225,"line_start":172,"line_end":172,"column_start":2,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":3335},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621345,"byte_end":621356,"line_start":176,"line_end":176,"column_start":5,"column_end":16},"name":"store_value","qualname":"::store::BitStore::store_value","value":"pub fn store_value(&mut Self, Self::Mem)","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" Stores a value into the memory system according to the `::Access` rules.\n","sig":null,"attributes":[{"value":"/ Stores a value into the memory system according to the `::Access` rules.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621264,"byte_end":621340,"line_start":175,"line_end":175,"column_start":2,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":3336},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621946,"byte_end":621953,"line_start":197,"line_end":197,"column_start":5,"column_end":12},"name":"get_bit","qualname":"::store::BitStore::get_bit","value":"pub fn get_bit<O>(&Self, BitIdx<Self::Mem>) -> bool where O: BitOrder","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" Reads a single bit out of the memory system according to the `::Access`\n rules. This is lifted from [`BitAccess`] so that it can be used\n elsewhere without additional casts.","sig":null,"attributes":[{"value":"/ Reads a single bit out of the memory system according to the `::Access`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621389,"byte_end":621464,"line_start":178,"line_end":178,"column_start":2,"column_end":77}},{"value":"/ rules. This is lifted from [`BitAccess`] so that it can be used","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621466,"byte_end":621533,"line_start":179,"line_end":179,"column_start":2,"column_end":69}},{"value":"/ elsewhere without additional casts.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621535,"byte_end":621574,"line_start":180,"line_end":180,"column_start":2,"column_end":41}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621576,"byte_end":621579,"line_start":181,"line_end":181,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621581,"byte_end":621602,"line_start":182,"line_end":182,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621604,"byte_end":621607,"line_start":183,"line_end":183,"column_start":2,"column_end":5}},{"value":"/ - `O`: The ordering of bits within `Self::Mem` to use for looking up the","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621609,"byte_end":621685,"line_start":184,"line_end":184,"column_start":2,"column_end":78}},{"value":"/   bit at `index`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621687,"byte_end":621708,"line_start":185,"line_end":185,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621710,"byte_end":621713,"line_start":186,"line_end":186,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621715,"byte_end":621731,"line_start":187,"line_end":187,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621733,"byte_end":621736,"line_start":188,"line_end":188,"column_start":2,"column_end":5}},{"value":"/ - `&self`","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621738,"byte_end":621751,"line_start":189,"line_end":189,"column_start":2,"column_end":15}},{"value":"/ - `index`: The semantic index of the bit in `*self` to read.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621753,"byte_end":621817,"line_start":190,"line_end":190,"column_start":2,"column_end":66}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621819,"byte_end":621822,"line_start":191,"line_end":191,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621824,"byte_end":621837,"line_start":192,"line_end":192,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621839,"byte_end":621842,"line_start":193,"line_end":193,"column_start":2,"column_end":5}},{"value":"/ The value of the bit in `*self` at `index`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621844,"byte_end":621891,"line_start":194,"line_end":194,"column_start":2,"column_end":49}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621893,"byte_end":621896,"line_start":195,"line_end":195,"column_start":2,"column_end":5}},{"value":"/ [`BitAccess`]: crate::access::BitAccess","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":621898,"byte_end":621941,"line_start":196,"line_end":196,"column_start":2,"column_end":45}}]},{"kind":"Const","id":{"krate":0,"index":3338},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622182,"byte_end":622199,"line_start":206,"line_end":206,"column_start":8,"column_end":25},"name":"__ALIGNED_TO_SIZE","qualname":"::store::BitStore::__ALIGNED_TO_SIZE","value":"[(); ]","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" Require that all implementors are aligned to their width.\n","sig":null,"attributes":[{"value":"/ Require that all implementors are aligned to their width.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622097,"byte_end":622158,"line_start":204,"line_end":204,"column_start":2,"column_end":63}}]},{"kind":"Const","id":{"krate":0,"index":3340},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622331,"byte_end":622344,"line_start":211,"line_end":211,"column_start":8,"column_end":21},"name":"__ALIAS_WIDTH","qualname":"::store::BitStore::__ALIAS_WIDTH","value":"[(); ]","parent":{"krate":0,"index":3329},"children":[],"decl_id":null,"docs":" Require that the `::Alias` associated type has the same width and\n alignment as `Self`.\n","sig":null,"attributes":[{"value":"/ Require that the `::Alias` associated type has the same width and","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622212,"byte_end":622281,"line_start":208,"line_end":208,"column_start":2,"column_end":71}},{"value":"/ alignment as `Self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":622283,"byte_end":622307,"line_start":209,"line_end":209,"column_start":2,"column_end":26}}]},{"kind":"Trait","id":{"krate":0,"index":3345},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626250,"byte_end":626256,"line_start":373,"line_end":373,"column_start":12,"column_end":18},"name":"Sealed","qualname":"::store::seal::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":" Marker trait to seal `BitStore` against downstream implementation.","sig":null,"attributes":[{"value":"/ Marker trait to seal `BitStore` against downstream implementation.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625882,"byte_end":625952,"line_start":366,"line_end":366,"column_start":2,"column_end":72}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625954,"byte_end":625957,"line_start":367,"line_end":367,"column_start":2,"column_end":5}},{"value":"/ This trait is public in the module, so that other modules in the crate","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":625959,"byte_end":626033,"line_start":368,"line_end":368,"column_start":2,"column_end":76}},{"value":"/ can use it, but so long as it is not exported by the crate root and this","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626035,"byte_end":626111,"line_start":369,"line_end":369,"column_start":2,"column_end":78}},{"value":"/ module is private, this trait effectively forbids downstream","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626113,"byte_end":626177,"line_start":370,"line_end":370,"column_start":2,"column_end":66}},{"value":"/ implementation of the `BitStore` trait.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":626179,"byte_end":626222,"line_start":371,"line_end":371,"column_start":2,"column_end":45}}]},{"kind":"Mod","id":{"krate":0,"index":3346},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"view","qualname":"::view","value":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","parent":null,"children":[{"krate":0,"index":3347},{"krate":0,"index":3348},{"krate":0,"index":3349},{"krate":0,"index":3352},{"krate":0,"index":3355},{"krate":0,"index":3358},{"krate":0,"index":3361},{"krate":0,"index":3362},{"krate":0,"index":3365},{"krate":0,"index":3368},{"krate":0,"index":3371},{"krate":0,"index":3374},{"krate":0,"index":3382},{"krate":0,"index":3390},{"krate":0,"index":3398},{"krate":0,"index":5822},{"krate":0,"index":5831},{"krate":0,"index":5840},{"krate":0,"index":5849},{"krate":0,"index":5858},{"krate":0,"index":5867},{"krate":0,"index":5876},{"krate":0,"index":5885},{"krate":0,"index":5894},{"krate":0,"index":5903},{"krate":0,"index":5912},{"krate":0,"index":5921},{"krate":0,"index":5930},{"krate":0,"index":5939},{"krate":0,"index":5948},{"krate":0,"index":5957},{"krate":0,"index":5966},{"krate":0,"index":5975},{"krate":0,"index":5984},{"krate":0,"index":5993},{"krate":0,"index":6002},{"krate":0,"index":6011},{"krate":0,"index":6020},{"krate":0,"index":6029},{"krate":0,"index":6038},{"krate":0,"index":6047},{"krate":0,"index":6056},{"krate":0,"index":6065},{"krate":0,"index":6074},{"krate":0,"index":6083},{"krate":0,"index":6092},{"krate":0,"index":6101},{"krate":0,"index":6110},{"krate":0,"index":6119},{"krate":0,"index":6128},{"krate":0,"index":6137},{"krate":0,"index":6146},{"krate":0,"index":6155},{"krate":0,"index":6164},{"krate":0,"index":6173},{"krate":0,"index":6182},{"krate":0,"index":6191},{"krate":0,"index":6200},{"krate":0,"index":6209},{"krate":0,"index":6218},{"krate":0,"index":6227},{"krate":0,"index":6236},{"krate":0,"index":6245},{"krate":0,"index":6254},{"krate":0,"index":6263},{"krate":0,"index":6272},{"krate":0,"index":6281},{"krate":0,"index":6290},{"krate":0,"index":6299},{"krate":0,"index":6308},{"krate":0,"index":6317},{"krate":0,"index":6326},{"krate":0,"index":6335},{"krate":0,"index":6344},{"krate":0,"index":6353},{"krate":0,"index":6362},{"krate":0,"index":6371},{"krate":0,"index":6380},{"krate":0,"index":6389},{"krate":0,"index":3408},{"krate":0,"index":3412},{"krate":0,"index":3416},{"krate":0,"index":3421}],"decl_id":null,"docs":" [`BitSlice`] view adapters for memory regions.","sig":null,"attributes":[{"value":"* [`BitSlice`] view adapters for memory regions.\n\nThe [`&BitSlice`][`BitSlice`] type is a referential view over existing memory.\nThe inherent constructor functions are awkward to call, as they require function\nsyntax rather than method syntax, and must provide a token for the memory type\nargument even though this is informed by the already-existing reference being\nused.\n\nThis module provides an extension trait, [`BitView`], which provides methods on\nmany memory types (all [`BitRegister`] integers, and slices and arrays of them)\nto construct [`BitSlice`] over those values.\n\nIn addition, the traits [`AsBits`] and [`AsBitsMut`] are analogues of [`AsRef`]\nand [`AsMut`], respectively. These traits have a blanket implementation for all\n`A: As{Ref,Mut}<[T: BitRegister]>`, so that any type that implements a view to a\nsuitable memory region automatically implements a view to that region’s bits.\n\nThese traits are distinct because [`BitView`] combines the im/mutable view\nfunctions into one trait, and can provide specialized implementations with a\nslight performance increase over the generic, but `AsBits{,Mut}` can fit in the\ngeneric type system of any library without undue effort.\n\n[`AsBits`]: crate::view::AsBits\n[`AsBitsMut`]: crate::view::AsBitsMut\n[`AsMut`]: core::convert::AsMut\n[`AsRef`]: core::convert::AsRef\n[`BitRegister`]: crate::mem::BitRegister\n[`BitSlice`]: crate::slice::BitSlice\n[`BitView`]: crate::view::BitView\n!*/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":628683,"byte_end":630126,"line_start":1,"line_end":30,"column_start":1,"column_end":4}}]},{"kind":"Trait","id":{"krate":0,"index":3374},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":630999,"byte_end":631006,"line_start":63,"line_end":63,"column_start":11,"column_end":18},"name":"BitView","qualname":"::view::BitView","value":"BitView","parent":null,"children":[{"krate":0,"index":3375},{"krate":0,"index":3376},{"krate":0,"index":3378},{"krate":0,"index":3380},{"krate":0,"index":3381}],"decl_id":null,"docs":" Creates a [`BitSlice`] view over some type that supports it.","sig":null,"attributes":[{"value":"* Creates a [`BitSlice`] view over some type that supports it.\n\nThis trait is implemented on all [`BitRegister`] types, and the arrays and slices\nof them that are supported by the standard library.\n\nThis means that until type-level integers are stabilized, only arrays in\n`[T: BitRegister; 0 ..= 64]` will implement the trait; wider arrays will need to\nreborrow as slices `[T]` in order to use the slice implementation.\n\nIf you have a type that contains a [`BitRegister`] type that can be viewed with\nthis trait, then you can implement this trait by forwarding to the interior\nview.\n\n[`BitSlice`]: crate::slice::BitSlice\n[`BitRegister`]: crate::mem::BitRegister\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":630321,"byte_end":630988,"line_start":47,"line_end":62,"column_start":1,"column_end":4}}]},{"kind":"Type","id":{"krate":0,"index":3375},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631049,"byte_end":631054,"line_start":65,"line_end":65,"column_start":7,"column_end":12},"name":"Store","qualname":"::view::BitView::Store","value":"type Store: BitStore;","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" The region’s storage type.\n","sig":null,"attributes":[{"value":"/ The region’s storage type.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631010,"byte_end":631042,"line_start":64,"line_end":64,"column_start":2,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":3376},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631407,"byte_end":631416,"line_start":82,"line_end":82,"column_start":5,"column_end":14},"name":"view_bits","qualname":"::view::BitView::view_bits","value":"pub fn view_bits<O>(&Self) -> &BitSlice<O, Self::Store> where O: BitOrder","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" Views a memory region as a [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631068,"byte_end":631112,"line_start":67,"line_end":67,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631114,"byte_end":631117,"line_start":68,"line_end":68,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631119,"byte_end":631140,"line_start":69,"line_end":69,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631142,"byte_end":631145,"line_start":70,"line_end":70,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631147,"byte_end":631195,"line_start":71,"line_end":71,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631197,"byte_end":631200,"line_start":72,"line_end":72,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631202,"byte_end":631218,"line_start":73,"line_end":73,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631220,"byte_end":631223,"line_start":74,"line_end":74,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The region to view as individual bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631225,"byte_end":631278,"line_start":75,"line_end":75,"column_start":2,"column_end":55}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631280,"byte_end":631283,"line_start":76,"line_end":76,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631285,"byte_end":631298,"line_start":77,"line_end":77,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631300,"byte_end":631303,"line_start":78,"line_end":78,"column_start":2,"column_end":5}},{"value":"/ A `&BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631305,"byte_end":631355,"line_start":79,"line_end":79,"column_start":2,"column_end":52}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631357,"byte_end":631360,"line_start":80,"line_end":80,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631362,"byte_end":631402,"line_start":81,"line_end":81,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3378},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631841,"byte_end":631854,"line_start":100,"line_end":100,"column_start":5,"column_end":18},"name":"view_bits_mut","qualname":"::view::BitView::view_bits_mut","value":"pub fn view_bits_mut<O>(&mut Self) -> &mut BitSlice<O, Self::Store> where\nO: BitOrder","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" Views a memory region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"/ Views a memory region as a mutable [`BitSlice`].","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631478,"byte_end":631530,"line_start":85,"line_end":85,"column_start":2,"column_end":54}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631532,"byte_end":631535,"line_start":86,"line_end":86,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631537,"byte_end":631558,"line_start":87,"line_end":87,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631560,"byte_end":631563,"line_start":88,"line_end":88,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631565,"byte_end":631613,"line_start":89,"line_end":89,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631615,"byte_end":631618,"line_start":90,"line_end":90,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631620,"byte_end":631636,"line_start":91,"line_end":91,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631638,"byte_end":631641,"line_start":92,"line_end":92,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The region to view as individual mutable bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631643,"byte_end":631708,"line_start":93,"line_end":93,"column_start":2,"column_end":67}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631710,"byte_end":631713,"line_start":94,"line_end":94,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631715,"byte_end":631728,"line_start":95,"line_end":95,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631730,"byte_end":631733,"line_start":96,"line_end":96,"column_start":2,"column_end":5}},{"value":"/ A `&mut BitSlice` view over the region at `*self`.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631735,"byte_end":631789,"line_start":97,"line_end":97,"column_start":2,"column_end":56}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631791,"byte_end":631794,"line_start":98,"line_end":98,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631796,"byte_end":631836,"line_start":99,"line_end":99,"column_start":2,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":3380},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632024,"byte_end":632034,"line_start":106,"line_end":106,"column_start":5,"column_end":15},"name":"const_bits","qualname":"::view::BitView::const_bits","value":"pub fn const_bits() -> usize where Self: Sized","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" Produces the number of bits that the implementing type can hold.\n","sig":null,"attributes":[{"value":"/ Produces the number of bits that the implementing type can hold.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":631924,"byte_end":631992,"line_start":103,"line_end":103,"column_start":2,"column_end":70}},{"value":"inline","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632010,"byte_end":632019,"line_start":105,"line_end":105,"column_start":2,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":3381},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632256,"byte_end":632266,"line_start":114,"line_end":114,"column_start":5,"column_end":15},"name":"const_elts","qualname":"::view::BitView::const_elts","value":"pub fn const_elts() -> usize where Self: Sized","parent":{"krate":0,"index":3374},"children":[],"decl_id":null,"docs":" Produces the number of memory elements that the implementing type holds.\n","sig":null,"attributes":[{"value":"/ Produces the number of memory elements that the implementing type holds.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632159,"byte_end":632235,"line_start":112,"line_end":112,"column_start":2,"column_end":78}}]},{"kind":"Trait","id":{"krate":0,"index":3408},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635663,"byte_end":635669,"line_start":263,"line_end":263,"column_start":11,"column_end":17},"name":"AsBits","qualname":"::view::AsBits","value":"AsBits<T>","parent":null,"children":[{"krate":0,"index":3410}],"decl_id":null,"docs":" Views a region as an immutable [`BitSlice`] only.","sig":null,"attributes":[{"value":"* Views a region as an immutable [`BitSlice`] only.\n\nThis trait is an analogue to the [`AsRef`] trait, in that it enables any type to\nprovide an immutable-only view of a bit slice.\n\nIt does not require an `AsRef<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBits<T>` or `AsRef<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsRef`]: core::convert::AsRef\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":634678,"byte_end":635652,"line_start":236,"line_end":262,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3410},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636032,"byte_end":636039,"line_start":281,"line_end":281,"column_start":5,"column_end":12},"name":"as_bits","qualname":"::view::AsBits::as_bits","value":"pub fn as_bits<O>(&Self) -> &BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3408},"children":[],"decl_id":null,"docs":" Views memory as a slice of immutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of immutable bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635694,"byte_end":635740,"line_start":266,"line_end":266,"column_start":2,"column_end":48}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635742,"byte_end":635745,"line_start":267,"line_end":267,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635747,"byte_end":635768,"line_start":268,"line_end":268,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635770,"byte_end":635773,"line_start":269,"line_end":269,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635775,"byte_end":635823,"line_start":270,"line_end":270,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635825,"byte_end":635828,"line_start":271,"line_end":271,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635830,"byte_end":635846,"line_start":272,"line_end":272,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635848,"byte_end":635851,"line_start":273,"line_end":273,"column_start":2,"column_end":5}},{"value":"/ - `&self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635853,"byte_end":635916,"line_start":274,"line_end":274,"column_start":2,"column_end":65}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635918,"byte_end":635921,"line_start":275,"line_end":275,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635923,"byte_end":635936,"line_start":276,"line_end":276,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635938,"byte_end":635941,"line_start":277,"line_end":277,"column_start":2,"column_end":5}},{"value":"/ An immutable view into some bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635943,"byte_end":635980,"line_start":278,"line_end":278,"column_start":2,"column_end":39}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635982,"byte_end":635985,"line_start":279,"line_end":279,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":635987,"byte_end":636027,"line_start":280,"line_end":280,"column_start":2,"column_end":42}}]},{"kind":"Trait","id":{"krate":0,"index":3412},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637064,"byte_end":637073,"line_start":312,"line_end":312,"column_start":11,"column_end":20},"name":"AsBitsMut","qualname":"::view::AsBitsMut","value":"AsBitsMut<T>","parent":null,"children":[{"krate":0,"index":3414}],"decl_id":null,"docs":" Views a region as a mutable [`BitSlice`].","sig":null,"attributes":[{"value":"* Views a region as a mutable [`BitSlice`].\n\nThis trait is an analogue to the [`AsMut`] trait, in that it enables any type to\nprovide a mutable view of a bit slice.\n\nIt does not require an `AsMut<[T: BitStore]>` implementation, and a blanket\nimplementation for all such types is provided. This allows you to choose whether\nto implement only one of `AsBitsMut<T>` or `AsMut<[T]>`, and gain a [`BitSlice`]\nview with either choice.\n\n# Type Parameters\n\n- `T`: The underlying storage region.\n\n# Notes\n\nYou are not *forbidden* from creating multiple views with different element\ntypes to the same region, but doing so is likely to cause inconsistent and\nsurprising behavior.\n\nRefrain from implementing this trait with more than one storage argument unless\nyou are sure that you can uphold the memory region requirements of all of them,\nand are aware of the behavior conflicts that may arise.\n\n[`AsMut`]: core::convert::AsMut\n[`BitSlice`]: crate::slice::BitSlice\n**/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":636092,"byte_end":637053,"line_start":285,"line_end":311,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":3414},"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637435,"byte_end":637446,"line_start":330,"line_end":330,"column_start":5,"column_end":16},"name":"as_bits_mut","qualname":"::view::AsBitsMut::as_bits_mut","value":"pub fn as_bits_mut<O>(&mut Self) -> &mut BitSlice<O, T> where O: BitOrder","parent":{"krate":0,"index":3412},"children":[],"decl_id":null,"docs":" Views memory as a slice of mutable bits.","sig":null,"attributes":[{"value":"/ Views memory as a slice of mutable bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637098,"byte_end":637142,"line_start":315,"line_end":315,"column_start":2,"column_end":46}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637144,"byte_end":637147,"line_start":316,"line_end":316,"column_start":2,"column_end":5}},{"value":"/ # Type Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637149,"byte_end":637170,"line_start":317,"line_end":317,"column_start":2,"column_end":23}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637172,"byte_end":637175,"line_start":318,"line_end":318,"column_start":2,"column_end":5}},{"value":"/ - `O`: The bit ordering used for the region.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637177,"byte_end":637225,"line_start":319,"line_end":319,"column_start":2,"column_end":50}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637227,"byte_end":637230,"line_start":320,"line_end":320,"column_start":2,"column_end":5}},{"value":"/ # Parameters","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637232,"byte_end":637248,"line_start":321,"line_end":321,"column_start":2,"column_end":18}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637250,"byte_end":637253,"line_start":322,"line_end":322,"column_start":2,"column_end":5}},{"value":"/ - `&mut self`: The value that is providing a [`BitSlice`] view.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637255,"byte_end":637322,"line_start":323,"line_end":323,"column_start":2,"column_end":69}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637324,"byte_end":637327,"line_start":324,"line_end":324,"column_start":2,"column_end":5}},{"value":"/ # Returns","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637329,"byte_end":637342,"line_start":325,"line_end":325,"column_start":2,"column_end":15}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637344,"byte_end":637347,"line_start":326,"line_end":326,"column_start":2,"column_end":5}},{"value":"/ A mutable view into some bits.","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637349,"byte_end":637383,"line_start":327,"line_end":327,"column_start":2,"column_end":36}},{"value":"/","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637385,"byte_end":637388,"line_start":328,"line_end":328,"column_start":2,"column_end":5}},{"value":"/ [`BitSlice`]: crate::slice::BitSlice","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637390,"byte_end":637430,"line_start":329,"line_end":329,"column_start":2,"column_end":42}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48505,"byte_end":48506,"line_start":187,"line_end":187,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58117,"byte_end":58125,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106},{"krate":0,"index":107}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61774,"byte_end":61782,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":151},{"krate":0,"index":152},{"krate":0,"index":153},{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63438,"byte_end":63446,"line_start":129,"line_end":129,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63656,"byte_end":63664,"line_start":142,"line_end":142,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":164},{"krate":0,"index":165},{"krate":0,"index":167},{"krate":0,"index":169},{"krate":0,"index":170},{"krate":0,"index":171}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64299,"byte_end":64307,"line_start":178,"line_end":178,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":175},{"krate":0,"index":177}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64652,"byte_end":64660,"line_start":195,"line_end":195,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":182}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64801,"byte_end":64809,"line_start":206,"line_end":206,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65178,"byte_end":65186,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65419,"byte_end":65427,"line_start":40,"line_end":40,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65635,"byte_end":65643,"line_start":52,"line_end":52,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":252},{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65873,"byte_end":65881,"line_start":67,"line_end":67,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66088,"byte_end":66096,"line_start":79,"line_end":79,"column_start":33,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":263},{"krate":0,"index":264}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66329,"byte_end":66337,"line_start":94,"line_end":94,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":269}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66566,"byte_end":66574,"line_start":107,"line_end":107,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":273},{"krate":0,"index":274}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66792,"byte_end":66800,"line_start":121,"line_end":121,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":278}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66971,"byte_end":66979,"line_start":132,"line_end":132,"column_start":32,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":283},{"krate":0,"index":284}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67253,"byte_end":67261,"line_start":146,"line_end":146,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":289}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67480,"byte_end":67488,"line_start":158,"line_end":158,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":293},{"krate":0,"index":294}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68167,"byte_end":68175,"line_start":39,"line_end":39,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":368}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68388,"byte_end":68396,"line_start":51,"line_end":51,"column_start":49,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":372}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68567,"byte_end":68575,"line_start":62,"line_end":62,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":376}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68845,"byte_end":68853,"line_start":79,"line_end":79,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68917,"byte_end":68925,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":383}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69122,"byte_end":69130,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69316,"byte_end":69324,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":393}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69549,"byte_end":69557,"line_start":122,"line_end":122,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":398}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69780,"byte_end":69788,"line_start":134,"line_end":134,"column_start":37,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":403}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70080,"byte_end":70088,"line_start":148,"line_end":148,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":407}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70297,"byte_end":70305,"line_start":160,"line_end":160,"column_start":45,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":411}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70505,"byte_end":70513,"line_start":172,"line_end":172,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":415}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70680,"byte_end":70688,"line_start":183,"line_end":183,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":420},{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72179,"byte_end":72187,"line_start":240,"line_end":240,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":437}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72348,"byte_end":72356,"line_start":252,"line_end":252,"column_start":23,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":441}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72528,"byte_end":72536,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":445}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72800,"byte_end":72808,"line_start":277,"line_end":277,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":449}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73015,"byte_end":73023,"line_start":289,"line_end":289,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":453}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73228,"byte_end":73236,"line_start":301,"line_end":301,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":457}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73441,"byte_end":73449,"line_start":313,"line_end":313,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":461}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73653,"byte_end":73661,"line_start":325,"line_end":325,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":465}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73867,"byte_end":73875,"line_start":338,"line_end":338,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":470},{"krate":0,"index":471},{"krate":0,"index":472}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74781,"byte_end":74789,"line_start":382,"line_end":382,"column_start":21,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74862,"byte_end":74870,"line_start":389,"line_end":389,"column_start":22,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75316,"byte_end":75336,"line_start":413,"line_end":413,"column_start":16,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75541,"byte_end":75561,"line_start":425,"line_end":425,"column_start":22,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":502}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75820,"byte_end":75840,"line_start":439,"line_end":439,"column_start":24,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":506}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89275,"byte_end":89284,"line_start":359,"line_end":359,"column_start":22,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":605}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89392,"byte_end":89401,"line_start":369,"line_end":369,"column_start":21,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97424,"byte_end":97430,"line_start":638,"line_end":638,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":612}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97524,"byte_end":97530,"line_start":646,"line_end":646,"column_start":26,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":616},{"krate":0,"index":617}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98177,"byte_end":98183,"line_start":673,"line_end":673,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":624}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98806,"byte_end":98812,"line_start":698,"line_end":698,"column_start":31,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":630}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99074,"byte_end":99080,"line_start":711,"line_end":711,"column_start":39,"column_end":45},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99128,"byte_end":99134,"line_start":715,"line_end":715,"column_start":18,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124529,"byte_end":124537,"line_start":717,"line_end":717,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":701},{"krate":0,"index":703},{"krate":0,"index":705},{"krate":0,"index":707}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":134364,"byte_end":134372,"line_start":1031,"line_end":1031,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":711},{"krate":0,"index":713},{"krate":0,"index":715},{"krate":0,"index":717}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143396,"byte_end":143404,"line_start":1346,"line_end":1346,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155122,"byte_end":155128,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":801},{"krate":0,"index":802},{"krate":0,"index":803},{"krate":0,"index":804},{"krate":0,"index":805},{"krate":0,"index":807},{"krate":0,"index":808},{"krate":0,"index":809},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":814},{"krate":0,"index":816},{"krate":0,"index":819},{"krate":0,"index":821},{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164427,"byte_end":164433,"line_start":414,"line_end":414,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":825},{"krate":0,"index":826}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164590,"byte_end":164596,"line_start":424,"line_end":424,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":829}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164754,"byte_end":164760,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164958,"byte_end":164964,"line_start":441,"line_end":441,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165466,"byte_end":165477,"line_start":464,"line_end":464,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166252,"byte_end":166263,"line_start":501,"line_end":501,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":842}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166468,"byte_end":166479,"line_start":510,"line_end":510,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":845}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168420,"byte_end":168427,"line_start":575,"line_end":575,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":848},{"krate":0,"index":849},{"krate":0,"index":850},{"krate":0,"index":851},{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":856}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":172725,"byte_end":172732,"line_start":730,"line_end":730,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":859}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":172894,"byte_end":172901,"line_start":738,"line_end":738,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":862}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173100,"byte_end":173107,"line_start":747,"line_end":747,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":865}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174664,"byte_end":174670,"line_start":798,"line_end":798,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":868},{"krate":0,"index":869},{"krate":0,"index":870},{"krate":0,"index":871},{"krate":0,"index":872},{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176737,"byte_end":176743,"line_start":882,"line_end":882,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176901,"byte_end":176907,"line_start":890,"line_end":890,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":881}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177105,"byte_end":177111,"line_start":899,"line_end":899,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":884}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178417,"byte_end":178423,"line_start":948,"line_end":948,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889},{"krate":0,"index":890},{"krate":0,"index":891}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180475,"byte_end":180481,"line_start":1024,"line_end":1024,"column_start":20,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":895}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180639,"byte_end":180645,"line_start":1032,"line_end":1032,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":898}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180843,"byte_end":180849,"line_start":1041,"line_end":1041,"column_start":21,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":901}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181764,"byte_end":181771,"line_start":1078,"line_end":1078,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":904},{"krate":0,"index":905},{"krate":0,"index":906},{"krate":0,"index":907},{"krate":0,"index":908},{"krate":0,"index":909},{"krate":0,"index":910}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183747,"byte_end":183754,"line_start":1164,"line_end":1164,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":913}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183913,"byte_end":183920,"line_start":1172,"line_end":1172,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":916}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184119,"byte_end":184126,"line_start":1181,"line_end":1181,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":919}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184284,"byte_end":184291,"line_start":1190,"line_end":1190,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":922}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184452,"byte_end":184459,"line_start":1199,"line_end":1199,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":926},{"krate":0,"index":927}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184617,"byte_end":184624,"line_start":1211,"line_end":1211,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184776,"byte_end":184783,"line_start":1223,"line_end":1223,"column_start":17,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":934},{"krate":0,"index":935}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200382,"byte_end":200387,"line_start":14,"line_end":14,"column_start":21,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200415,"byte_end":200420,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200703,"byte_end":200706,"line_start":26,"line_end":26,"column_start":21,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200734,"byte_end":200737,"line_start":29,"line_end":29,"column_start":23,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209575,"byte_end":209579,"line_start":264,"line_end":264,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1008},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210786,"byte_end":210790,"line_start":307,"line_end":307,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1015},{"krate":0,"index":1017},{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":240953,"byte_end":240960,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1177},{"krate":0,"index":1178},{"krate":0,"index":1180},{"krate":0,"index":1181},{"krate":0,"index":1182},{"krate":0,"index":1183},{"krate":0,"index":1184},{"krate":0,"index":1185},{"krate":0,"index":1186},{"krate":0,"index":1187},{"krate":0,"index":1188}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244267,"byte_end":244274,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"value":"","parent":null,"children":[{"krate":0,"index":1191},{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244710,"byte_end":244717,"line_start":224,"line_end":224,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1196}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244874,"byte_end":244881,"line_start":236,"line_end":236,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1199}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245080,"byte_end":245087,"line_start":249,"line_end":249,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1202}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245293,"byte_end":245300,"line_start":262,"line_end":262,"column_start":31,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1205},{"krate":0,"index":1206}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245534,"byte_end":245541,"line_start":274,"line_end":274,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1209},{"krate":0,"index":1210}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245730,"byte_end":245737,"line_start":285,"line_end":285,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245868,"byte_end":245875,"line_start":293,"line_end":293,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1219}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246161,"byte_end":246168,"line_start":308,"line_end":308,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1223}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246435,"byte_end":246442,"line_start":321,"line_end":321,"column_start":54,"column_end":61},"value":"","parent":null,"children":[{"krate":0,"index":1229}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246789,"byte_end":246796,"line_start":338,"line_end":338,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1233}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247009,"byte_end":247016,"line_start":350,"line_end":350,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1237}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247228,"byte_end":247235,"line_start":362,"line_end":362,"column_start":21,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1241}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247403,"byte_end":247410,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247806,"byte_end":247818,"line_start":392,"line_end":392,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1248}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247961,"byte_end":247973,"line_start":400,"line_end":400,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1251}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251867,"byte_end":251873,"line_start":128,"line_end":128,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1340},{"krate":0,"index":1342},{"krate":0,"index":1344}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253388,"byte_end":253394,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1348},{"krate":0,"index":1349},{"krate":0,"index":1352},{"krate":0,"index":1353}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255087,"byte_end":255093,"line_start":260,"line_end":260,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1357}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255302,"byte_end":255308,"line_start":272,"line_end":272,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255493,"byte_end":255499,"line_start":282,"line_end":282,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255998,"byte_end":256004,"line_start":302,"line_end":302,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1374}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256295,"byte_end":256301,"line_start":318,"line_end":318,"column_start":35,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1379}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256518,"byte_end":256524,"line_start":331,"line_end":331,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1384}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256990,"byte_end":256996,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1392}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257333,"byte_end":257339,"line_start":370,"line_end":370,"column_start":36,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1397}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257592,"byte_end":257598,"line_start":383,"line_end":383,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1402}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257810,"byte_end":257816,"line_start":395,"line_end":395,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1407}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258113,"byte_end":258119,"line_start":409,"line_end":409,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1412}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258352,"byte_end":258358,"line_start":422,"line_end":422,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1417}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258590,"byte_end":258596,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1422}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258991,"byte_end":258997,"line_start":454,"line_end":454,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1428},{"krate":0,"index":1429}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259214,"byte_end":259220,"line_start":469,"line_end":469,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1433}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259385,"byte_end":259391,"line_start":480,"line_end":480,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1438}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259761,"byte_end":259767,"line_start":499,"line_end":499,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1443},{"krate":0,"index":1444}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263297,"byte_end":263308,"line_start":79,"line_end":79,"column_start":15,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1515},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1518},{"krate":0,"index":1519},{"krate":0,"index":1522},{"krate":0,"index":1523},{"krate":0,"index":1524}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":266958,"byte_end":266969,"line_start":215,"line_end":215,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1529}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267123,"byte_end":267134,"line_start":227,"line_end":227,"column_start":22,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267293,"byte_end":267304,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1540}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267672,"byte_end":267683,"line_start":255,"line_end":255,"column_start":27,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1545}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267886,"byte_end":267897,"line_start":268,"line_end":268,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1550}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268149,"byte_end":268160,"line_start":281,"line_end":281,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1555}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268365,"byte_end":268376,"line_start":294,"line_end":294,"column_start":25,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1560}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268725,"byte_end":268736,"line_start":310,"line_end":310,"column_start":24,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1565}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268945,"byte_end":268956,"line_start":324,"line_end":324,"column_start":28,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1571},{"krate":0,"index":1572},{"krate":0,"index":1573},{"krate":0,"index":1574},{"krate":0,"index":1575},{"krate":0,"index":1576}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269751,"byte_end":269762,"line_start":369,"line_end":369,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1581},{"krate":0,"index":1582}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270229,"byte_end":270240,"line_start":395,"line_end":395,"column_start":37,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1587}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270476,"byte_end":270487,"line_start":407,"line_end":407,"column_start":33,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270630,"byte_end":270641,"line_start":416,"line_end":416,"column_start":48,"column_end":59},"value":"","parent":null,"children":[{"krate":0,"index":1596},{"krate":0,"index":1597}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273815,"byte_end":273821,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1716},{"krate":0,"index":1717},{"krate":0,"index":1718},{"krate":0,"index":1720},{"krate":0,"index":1721},{"krate":0,"index":1722},{"krate":0,"index":1723},{"krate":0,"index":1724},{"krate":0,"index":1725},{"krate":0,"index":1727},{"krate":0,"index":1728},{"krate":0,"index":1729},{"krate":0,"index":1730},{"krate":0,"index":1732},{"krate":0,"index":1734},{"krate":0,"index":1735},{"krate":0,"index":1736},{"krate":0,"index":1737},{"krate":0,"index":1738},{"krate":0,"index":1739},{"krate":0,"index":1740},{"krate":0,"index":1741},{"krate":0,"index":1742},{"krate":0,"index":1743},{"krate":0,"index":1746},{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296603,"byte_end":296609,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1753},{"krate":0,"index":1754},{"krate":0,"index":1755},{"krate":0,"index":1756}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298587,"byte_end":298593,"line_start":942,"line_end":942,"column_start":12,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1760},{"krate":0,"index":1761},{"krate":0,"index":1762},{"krate":0,"index":1763},{"krate":0,"index":1764},{"krate":0,"index":1766},{"krate":0,"index":1769},{"krate":0,"index":1772},{"krate":0,"index":1773},{"krate":0,"index":1774},{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306768,"byte_end":306774,"line_start":1226,"line_end":1226,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1782}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306959,"byte_end":306965,"line_start":1241,"line_end":1241,"column_start":22,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307083,"byte_end":307089,"line_start":1250,"line_end":1250,"column_start":23,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1791}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307411,"byte_end":307417,"line_start":1265,"line_end":1265,"column_start":58,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":1798}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307851,"byte_end":307857,"line_start":1284,"line_end":1284,"column_start":59,"column_end":65},"value":"","parent":null,"children":[{"krate":0,"index":1805}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308364,"byte_end":308370,"line_start":1307,"line_end":1307,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1809}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308564,"byte_end":308570,"line_start":1319,"line_end":1319,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1813}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308771,"byte_end":308777,"line_start":1331,"line_end":1331,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1817},{"krate":0,"index":1818}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309030,"byte_end":309036,"line_start":1345,"line_end":1345,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1822},{"krate":0,"index":1823}],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309247,"byte_end":309253,"line_start":1358,"line_end":1358,"column_start":25,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1828}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309694,"byte_end":309700,"line_start":1380,"line_end":1380,"column_start":27,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309987,"byte_end":309993,"line_start":1395,"line_end":1395,"column_start":24,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1838}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310204,"byte_end":310210,"line_start":1409,"line_end":1409,"column_start":24,"column_end":30},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310666,"byte_end":310677,"line_start":1429,"line_end":1429,"column_start":35,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1846}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310864,"byte_end":310875,"line_start":1439,"line_end":1439,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1849}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311055,"byte_end":311066,"line_start":1449,"line_end":1449,"column_start":30,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1852}],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311259,"byte_end":311270,"line_start":1459,"line_end":1459,"column_start":21,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1855}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311523,"byte_end":311534,"line_start":1471,"line_end":1471,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311585,"byte_end":311596,"line_start":1475,"line_end":1475,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":319476,"byte_end":319483,"line_start":203,"line_end":203,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1956},{"krate":0,"index":1957},{"krate":0,"index":1958},{"krate":0,"index":1959},{"krate":0,"index":1960},{"krate":0,"index":1961},{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966},{"krate":0,"index":1967},{"krate":0,"index":1968},{"krate":0,"index":1970},{"krate":0,"index":1972},{"krate":0,"index":1974},{"krate":0,"index":1975},{"krate":0,"index":1976},{"krate":0,"index":1977},{"krate":0,"index":1978},{"krate":0,"index":1979},{"krate":0,"index":1980},{"krate":0,"index":1981},{"krate":0,"index":1982},{"krate":0,"index":1983}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":339909,"byte_end":339916,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1989},{"krate":0,"index":1990}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":341438,"byte_end":341445,"line_start":935,"line_end":935,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1994},{"krate":0,"index":1995}],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":342777,"byte_end":342784,"line_start":980,"line_end":980,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2001}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":342908,"byte_end":342915,"line_start":991,"line_end":991,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343038,"byte_end":343045,"line_start":999,"line_end":999,"column_start":59,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":2012}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343647,"byte_end":343654,"line_start":1020,"line_end":1020,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2017}],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343834,"byte_end":343841,"line_start":1033,"line_end":1033,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2022}],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344064,"byte_end":344071,"line_start":1046,"line_end":1046,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2027}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344266,"byte_end":344273,"line_start":1058,"line_end":1058,"column_start":24,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344769,"byte_end":344781,"line_start":1080,"line_end":1080,"column_start":34,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2034}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344957,"byte_end":344969,"line_start":1090,"line_end":1090,"column_start":30,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2037}],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":345160,"byte_end":345172,"line_start":1100,"line_end":1100,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2040}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":345688,"byte_end":345700,"line_start":1122,"line_end":1122,"column_start":21,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2043}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346193,"byte_end":346205,"line_start":1143,"line_end":1143,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346256,"byte_end":346268,"line_start":1147,"line_end":1147,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367536,"byte_end":367544,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2228},{"krate":0,"index":2229},{"krate":0,"index":2230},{"krate":0,"index":2231},{"krate":0,"index":2232},{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2236},{"krate":0,"index":2238},{"krate":0,"index":2239},{"krate":0,"index":2240},{"krate":0,"index":2244},{"krate":0,"index":2248},{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251},{"krate":0,"index":2255},{"krate":0,"index":2259},{"krate":0,"index":2260},{"krate":0,"index":2261},{"krate":0,"index":2262},{"krate":0,"index":2263},{"krate":0,"index":2264},{"krate":0,"index":2265},{"krate":0,"index":2266},{"krate":0,"index":2267},{"krate":0,"index":2269},{"krate":0,"index":2271},{"krate":0,"index":2274},{"krate":0,"index":2275},{"krate":0,"index":2278},{"krate":0,"index":2279},{"krate":0,"index":2280},{"krate":0,"index":2281},{"krate":0,"index":2283},{"krate":0,"index":2284}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406143,"byte_end":406151,"line_start":1889,"line_end":1889,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2288},{"krate":0,"index":2289},{"krate":0,"index":2290},{"krate":0,"index":2291},{"krate":0,"index":2292},{"krate":0,"index":2293}],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412977,"byte_end":412985,"line_start":2121,"line_end":2121,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2298},{"krate":0,"index":2299},{"krate":0,"index":2300},{"krate":0,"index":2301},{"krate":0,"index":2302},{"krate":0,"index":2303},{"krate":0,"index":2304},{"krate":0,"index":2305},{"krate":0,"index":2306}],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424824,"byte_end":424832,"line_start":2480,"line_end":2480,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2310},{"krate":0,"index":2311},{"krate":0,"index":2312},{"krate":0,"index":2313},{"krate":0,"index":2314},{"krate":0,"index":2315},{"krate":0,"index":2316}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427444,"byte_end":427452,"line_start":2562,"line_end":2562,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2320}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428167,"byte_end":428175,"line_start":2588,"line_end":2588,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2324},{"krate":0,"index":2325}],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433538,"byte_end":433546,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2472},{"krate":0,"index":2473},{"krate":0,"index":2474},{"krate":0,"index":2475},{"krate":0,"index":2476},{"krate":0,"index":2477},{"krate":0,"index":2478},{"krate":0,"index":2479},{"krate":0,"index":2480},{"krate":0,"index":2481},{"krate":0,"index":2482},{"krate":0,"index":2485},{"krate":0,"index":2488},{"krate":0,"index":2491},{"krate":0,"index":2494},{"krate":0,"index":2495},{"krate":0,"index":2496},{"krate":0,"index":2497},{"krate":0,"index":2498},{"krate":0,"index":2499},{"krate":0,"index":2500},{"krate":0,"index":2501},{"krate":0,"index":2502},{"krate":0,"index":2503},{"krate":0,"index":2504},{"krate":0,"index":2505},{"krate":0,"index":2506},{"krate":0,"index":2507},{"krate":0,"index":2508},{"krate":0,"index":2509},{"krate":0,"index":2510},{"krate":0,"index":2511},{"krate":0,"index":2512},{"krate":0,"index":2513},{"krate":0,"index":2515},{"krate":0,"index":2517},{"krate":0,"index":2519},{"krate":0,"index":2521},{"krate":0,"index":2523},{"krate":0,"index":2525},{"krate":0,"index":2527},{"krate":0,"index":2529},{"krate":0,"index":2533},{"krate":0,"index":2536},{"krate":0,"index":2539},{"krate":0,"index":2540},{"krate":0,"index":2541},{"krate":0,"index":2544},{"krate":0,"index":2545},{"krate":0,"index":2547},{"krate":0,"index":2550},{"krate":0,"index":2552}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513053,"byte_end":513062,"line_start":2720,"line_end":2720,"column_start":44,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":2599},{"krate":0,"index":2600},{"krate":0,"index":2601},{"krate":0,"index":2602},{"krate":0,"index":2603},{"krate":0,"index":2604},{"krate":0,"index":2605},{"krate":0,"index":2606}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515438,"byte_end":515442,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":2693},{"krate":0,"index":2694},{"krate":0,"index":2695},{"krate":0,"index":2696},{"krate":0,"index":2699},{"krate":0,"index":2702}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519878,"byte_end":519882,"line_start":277,"line_end":277,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2707}],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520053,"byte_end":520057,"line_start":290,"line_end":290,"column_start":38,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2711}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520222,"byte_end":520226,"line_start":301,"line_end":301,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2715}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521340,"byte_end":521347,"line_start":353,"line_end":353,"column_start":16,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":2726},{"krate":0,"index":2727},{"krate":0,"index":2728},{"krate":0,"index":2729}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523439,"byte_end":523446,"line_start":434,"line_end":434,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":2733}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":534972,"byte_end":534983,"line_start":944,"line_end":944,"column_start":16,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":2740},{"krate":0,"index":2741}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538090,"byte_end":538104,"line_start":1070,"line_end":1070,"column_start":16,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2746},{"krate":0,"index":2747}],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547348,"byte_end":547360,"line_start":1420,"line_end":1420,"column_start":16,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":2752},{"krate":0,"index":2753}],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550556,"byte_end":550571,"line_start":1546,"line_end":1546,"column_start":16,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":2758},{"krate":0,"index":2759}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567124,"byte_end":567132,"line_start":2261,"line_end":2261,"column_start":16,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":2813}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567307,"byte_end":567315,"line_start":2274,"line_end":2274,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":2817}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567472,"byte_end":567480,"line_start":2287,"line_end":2287,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2821},{"krate":0,"index":2822},{"krate":0,"index":2824},{"krate":0,"index":2825},{"krate":0,"index":2826}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":568674,"byte_end":568682,"line_start":2343,"line_end":2343,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2830}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569425,"byte_end":569433,"line_start":2379,"line_end":2379,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2835}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569567,"byte_end":569575,"line_start":2389,"line_end":2389,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570178,"byte_end":570187,"line_start":2415,"line_end":2415,"column_start":16,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":2843}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570362,"byte_end":570371,"line_start":2428,"line_end":2428,"column_start":24,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":2847}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570528,"byte_end":570537,"line_start":2441,"line_end":2441,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":2851},{"krate":0,"index":2852},{"krate":0,"index":2854},{"krate":0,"index":2855},{"krate":0,"index":2856}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":571557,"byte_end":571566,"line_start":2494,"line_end":2494,"column_start":36,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2860}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572312,"byte_end":572321,"line_start":2530,"line_end":2530,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2865}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572456,"byte_end":572465,"line_start":2540,"line_end":2540,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579337,"byte_end":579345,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2932}],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579601,"byte_end":579609,"line_start":41,"line_end":41,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2938}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579865,"byte_end":579873,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2944}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":580120,"byte_end":580128,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2949},{"krate":0,"index":2950}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":583212,"byte_end":583220,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":2996},{"krate":0,"index":2997},{"krate":0,"index":2999},{"krate":0,"index":3001},{"krate":0,"index":3002},{"krate":0,"index":3005},{"krate":0,"index":3006}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Inherent","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":591435,"byte_end":591443,"line_start":328,"line_end":328,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":3011},{"krate":0,"index":3012},{"krate":0,"index":3014},{"krate":0,"index":3016},{"krate":0,"index":3017},{"krate":0,"index":3018},{"krate":0,"index":3019}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":598672,"byte_end":598680,"line_start":45,"line_end":45,"column_start":19,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":598745,"byte_end":598753,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":3101}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":599244,"byte_end":599252,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":3107}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":600736,"byte_end":600744,"line_start":143,"line_end":143,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3127}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":600951,"byte_end":600959,"line_start":155,"line_end":155,"column_start":59,"column_end":67},"value":"","parent":null,"children":[{"krate":0,"index":3133}],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":601516,"byte_end":601524,"line_start":174,"line_end":174,"column_start":55,"column_end":63},"value":"","parent":null,"children":[{"krate":0,"index":3139}],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":602529,"byte_end":602537,"line_start":221,"line_end":221,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":3157}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":602784,"byte_end":602792,"line_start":233,"line_end":233,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":3163}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604343,"byte_end":604351,"line_start":316,"line_end":316,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3201}],"docs":"","sig":null,"attributes":[]},{"id":231,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604574,"byte_end":604582,"line_start":328,"line_end":328,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":3205}],"docs":"","sig":null,"attributes":[]},{"id":232,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":610457,"byte_end":610465,"line_start":499,"line_end":499,"column_start":21,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":3210}],"docs":"","sig":null,"attributes":[]},{"id":233,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":611724,"byte_end":611732,"line_start":534,"line_end":534,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":234,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":612908,"byte_end":612916,"line_start":564,"line_end":564,"column_start":28,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632352,"byte_end":632353,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":3384},{"krate":0,"index":3385},{"krate":0,"index":3387},{"krate":0,"index":3389}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637563,"byte_end":637564,"line_start":335,"line_end":335,"column_start":26,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":3419}],"docs":"","sig":null,"attributes":[]},{"id":257,"kind":"Direct","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637788,"byte_end":637789,"line_start":348,"line_end":348,"column_start":29,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":3424}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11110,"byte_end":11116,"line_start":274,"line_end":274,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/macros.rs","byte_start":11566,"byte_end":11574,"line_start":7,"line_end":7,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":5}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11127,"byte_end":11133,"line_start":276,"line_end":276,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":26}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11143,"byte_end":11148,"line_start":277,"line_end":277,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":63}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11169,"byte_end":11175,"line_start":279,"line_end":279,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":544}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11185,"byte_end":11190,"line_start":280,"line_end":280,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":636}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11200,"byte_end":11205,"line_start":281,"line_end":281,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":748}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11215,"byte_end":11218,"line_start":282,"line_end":282,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":936}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11244,"byte_end":11249,"line_start":284,"line_end":284,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":975}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11259,"byte_end":11266,"line_start":285,"line_end":285,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":1034}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11276,"byte_end":11279,"line_start":286,"line_end":286,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1080}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11289,"byte_end":11294,"line_start":287,"line_end":287,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":2132}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11304,"byte_end":11309,"line_start":288,"line_end":288,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":3299}},{"kind":"Mod","span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/lib.rs","byte_start":11319,"byte_end":11323,"line_start":289,"line_end":289,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":3346}}],"macro_refs":[],"relations":[{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":44283,"byte_end":44289,"line_start":54,"line_end":54,"column_start":22,"column_end":28},"kind":"SuperTrait","from":{"krate":5,"index":31},"to":{"krate":0,"index":47}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/access.rs","byte_start":48505,"byte_end":48506,"line_start":187,"line_end":187,"column_start":23,"column_end":24},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":56},"to":{"krate":0,"index":47}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array.rs","byte_start":58117,"byte_end":58125,"line_start":160,"line_end":160,"column_start":12,"column_end":20},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":88},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":61774,"byte_end":61782,"line_start":57,"line_end":57,"column_start":12,"column_end":20},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":3471},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63438,"byte_end":63446,"line_start":129,"line_end":129,"column_start":22,"column_end":30},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":63656,"byte_end":63664,"line_start":142,"line_end":142,"column_start":25,"column_end":33},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":7233}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64299,"byte_end":64307,"line_start":178,"line_end":178,"column_start":36,"column_end":44},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":7097}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64652,"byte_end":64660,"line_start":195,"line_end":195,"column_start":34,"column_end":42},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":7122}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/iter.rs","byte_start":64801,"byte_end":64809,"line_start":206,"line_end":206,"column_start":30,"column_end":38},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":3471},"to":{"krate":1,"index":7504}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65178,"byte_end":65186,"line_start":25,"line_end":25,"column_start":33,"column_end":41},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65419,"byte_end":65427,"line_start":40,"line_end":40,"column_start":39,"column_end":47},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65635,"byte_end":65643,"line_start":52,"line_end":52,"column_start":32,"column_end":40},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2960}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":65873,"byte_end":65881,"line_start":67,"line_end":67,"column_start":38,"column_end":46},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2986}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66088,"byte_end":66096,"line_start":79,"line_end":79,"column_start":33,"column_end":41},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2965}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66329,"byte_end":66337,"line_start":94,"line_end":94,"column_start":39,"column_end":47},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2990}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66566,"byte_end":66574,"line_start":107,"line_end":107,"column_start":22,"column_end":30},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3054}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66792,"byte_end":66800,"line_start":121,"line_end":121,"column_start":25,"column_end":33},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3067}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":66971,"byte_end":66979,"line_start":132,"line_end":132,"column_start":32,"column_end":40},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3139}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67253,"byte_end":67261,"line_start":146,"line_end":146,"column_start":35,"column_end":43},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":3143}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/ops.rs","byte_start":67480,"byte_end":67488,"line_start":158,"line_end":158,"column_start":20,"column_end":28},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68167,"byte_end":68175,"line_start":39,"line_end":39,"column_start":46,"column_end":54},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2435}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68388,"byte_end":68396,"line_start":51,"line_end":51,"column_start":49,"column_end":57},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2438}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68567,"byte_end":68575,"line_start":62,"line_end":62,"column_start":22,"column_end":30},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68845,"byte_end":68853,"line_start":79,"line_end":79,"column_start":19,"column_end":27},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":68917,"byte_end":68925,"line_start":86,"line_end":86,"column_start":20,"column_end":28},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69122,"byte_end":69130,"line_start":97,"line_end":97,"column_start":45,"column_end":53},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69316,"byte_end":69324,"line_start":109,"line_end":109,"column_start":36,"column_end":44},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69549,"byte_end":69557,"line_start":122,"line_end":122,"column_start":46,"column_end":54},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":69780,"byte_end":69788,"line_start":134,"line_end":134,"column_start":37,"column_end":45},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70080,"byte_end":70088,"line_start":148,"line_end":148,"column_start":45,"column_end":53},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70297,"byte_end":70305,"line_start":160,"line_end":160,"column_start":45,"column_end":53},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2732}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70505,"byte_end":70513,"line_start":172,"line_end":172,"column_start":24,"column_end":32},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":70680,"byte_end":70688,"line_start":183,"line_end":183,"column_start":55,"column_end":63},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72179,"byte_end":72187,"line_start":240,"line_end":240,"column_start":24,"column_end":32},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72348,"byte_end":72356,"line_start":252,"line_end":252,"column_start":23,"column_end":31},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72528,"byte_end":72536,"line_start":263,"line_end":263,"column_start":22,"column_end":30},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":72800,"byte_end":72808,"line_start":277,"line_end":277,"column_start":24,"column_end":32},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73015,"byte_end":73023,"line_start":289,"line_end":289,"column_start":25,"column_end":33},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8818}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73228,"byte_end":73236,"line_start":301,"line_end":301,"column_start":22,"column_end":30},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8814}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73441,"byte_end":73449,"line_start":313,"line_end":313,"column_start":25,"column_end":33},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":8820}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73653,"byte_end":73661,"line_start":325,"line_end":325,"column_start":21,"column_end":29},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":73867,"byte_end":73875,"line_start":338,"line_end":338,"column_start":29,"column_end":37},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":7070}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74781,"byte_end":74789,"line_start":382,"line_end":382,"column_start":21,"column_end":29},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":74862,"byte_end":74870,"line_start":389,"line_end":389,"column_start":22,"column_end":30},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":88},"to":{"krate":1,"index":2873}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75316,"byte_end":75336,"line_start":413,"line_end":413,"column_start":16,"column_end":36},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":3480},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75541,"byte_end":75561,"line_start":425,"line_end":425,"column_start":22,"column_end":42},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":3480},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/array/traits.rs","byte_start":75820,"byte_end":75840,"line_start":439,"line_end":439,"column_start":24,"column_end":44},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":3480},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89275,"byte_end":89284,"line_start":359,"line_end":359,"column_start":22,"column_end":31},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":3536},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":89392,"byte_end":89401,"line_start":369,"line_end":369,"column_start":21,"column_end":30},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":3536},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97424,"byte_end":97430,"line_start":638,"line_end":638,"column_start":19,"column_end":25},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":97524,"byte_end":97530,"line_start":646,"line_end":646,"column_start":26,"column_end":32},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":7233}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98177,"byte_end":98183,"line_start":673,"line_end":673,"column_start":37,"column_end":43},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":7097}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":98806,"byte_end":98812,"line_start":698,"line_end":698,"column_start":31,"column_end":37},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":7122}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99074,"byte_end":99080,"line_start":711,"line_end":711,"column_start":39,"column_end":45},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":7504}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/domain.rs","byte_start":99128,"byte_end":99134,"line_start":715,"line_end":715,"column_start":18,"column_end":24},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":3596},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":124529,"byte_end":124537,"line_start":717,"line_end":717,"column_start":22,"column_end":30},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":2219},"to":{"krate":0,"index":686}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":134364,"byte_end":134372,"line_start":1031,"line_end":1031,"column_start":22,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":2219},"to":{"krate":0,"index":686}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/field.rs","byte_start":143396,"byte_end":143404,"line_start":1346,"line_end":1346,"column_start":25,"column_end":33},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":88},"to":{"krate":0,"index":686}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":155122,"byte_end":155128,"line_start":115,"line_end":115,"column_start":9,"column_end":15},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":3651},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164427,"byte_end":164433,"line_start":414,"line_end":414,"column_start":25,"column_end":31},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":3651},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164590,"byte_end":164596,"line_start":424,"line_end":424,"column_start":20,"column_end":26},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":3651},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164754,"byte_end":164760,"line_start":432,"line_end":432,"column_start":19,"column_end":25},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":3651},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":164958,"byte_end":164964,"line_start":441,"line_end":441,"column_start":21,"column_end":27},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":3651},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":165466,"byte_end":165477,"line_start":464,"line_end":464,"column_start":9,"column_end":20},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":3684},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166252,"byte_end":166263,"line_start":501,"line_end":501,"column_start":19,"column_end":30},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":3684},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":166468,"byte_end":166479,"line_start":510,"line_end":510,"column_start":21,"column_end":32},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":3684},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":168420,"byte_end":168427,"line_start":575,"line_end":575,"column_start":9,"column_end":16},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":3717},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":172725,"byte_end":172732,"line_start":730,"line_end":730,"column_start":20,"column_end":27},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":3717},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":172894,"byte_end":172901,"line_start":738,"line_end":738,"column_start":19,"column_end":26},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":3717},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":173100,"byte_end":173107,"line_start":747,"line_end":747,"column_start":21,"column_end":28},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":3717},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":174664,"byte_end":174670,"line_start":798,"line_end":798,"column_start":9,"column_end":15},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":3750},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176737,"byte_end":176743,"line_start":882,"line_end":882,"column_start":20,"column_end":26},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":3750},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":176901,"byte_end":176907,"line_start":890,"line_end":890,"column_start":19,"column_end":25},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":3750},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":177105,"byte_end":177111,"line_start":899,"line_end":899,"column_start":21,"column_end":27},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":3750},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":178417,"byte_end":178423,"line_start":948,"line_end":948,"column_start":9,"column_end":15},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":3783},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180475,"byte_end":180481,"line_start":1024,"line_end":1024,"column_start":20,"column_end":26},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":3783},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180639,"byte_end":180645,"line_start":1032,"line_end":1032,"column_start":19,"column_end":25},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":3783},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":180843,"byte_end":180849,"line_start":1041,"line_end":1041,"column_start":21,"column_end":27},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":3783},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":181764,"byte_end":181771,"line_start":1078,"line_end":1078,"column_start":9,"column_end":16},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":3815},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183747,"byte_end":183754,"line_start":1164,"line_end":1164,"column_start":20,"column_end":27},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":8816}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":183913,"byte_end":183920,"line_start":1172,"line_end":1172,"column_start":19,"column_end":26},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184119,"byte_end":184126,"line_start":1181,"line_end":1181,"column_start":21,"column_end":28},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184284,"byte_end":184291,"line_start":1190,"line_end":1190,"column_start":28,"column_end":35},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":7029}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184452,"byte_end":184459,"line_start":1199,"line_end":1199,"column_start":23,"column_end":30},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":2955}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184617,"byte_end":184624,"line_start":1211,"line_end":1211,"column_start":22,"column_end":29},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":2960}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/index.rs","byte_start":184776,"byte_end":184783,"line_start":1223,"line_end":1223,"column_start":17,"column_end":24},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":3815},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195650,"byte_end":195660,"line_start":34,"line_end":34,"column_start":22,"column_end":32},"kind":"SuperTrait","from":{"krate":4,"index":267},"to":{"krate":0,"index":946}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":195669,"byte_end":195675,"line_start":34,"line_end":34,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":966},"to":{"krate":0,"index":946}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196680,"byte_end":196689,"line_start":61,"line_end":61,"column_start":24,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":946},"to":{"krate":0,"index":950}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mem.rs","byte_start":196692,"byte_end":196698,"line_start":61,"line_end":61,"column_start":36,"column_end":42},"kind":"SuperTrait","from":{"krate":5,"index":50},"to":{"krate":0,"index":950}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200244,"byte_end":200250,"line_start":8,"line_end":8,"column_start":39,"column_end":45},"kind":"SuperTrait","from":{"krate":0,"index":974},"to":{"krate":0,"index":968}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200382,"byte_end":200387,"line_start":14,"line_end":14,"column_start":21,"column_end":26},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":3871},"to":{"krate":0,"index":968}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200415,"byte_end":200420,"line_start":17,"line_end":17,"column_start":23,"column_end":28},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":3871},"to":{"krate":0,"index":974}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200703,"byte_end":200706,"line_start":26,"line_end":26,"column_start":21,"column_end":24},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":3888},"to":{"krate":0,"index":968}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/mutability.rs","byte_start":200734,"byte_end":200737,"line_start":29,"line_end":29,"column_start":23,"column_end":26},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":3888},"to":{"krate":0,"index":974}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":209575,"byte_end":209579,"line_start":264,"line_end":264,"column_start":26,"column_end":30},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":3905},"to":{"krate":0,"index":996}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/order.rs","byte_start":210786,"byte_end":210790,"line_start":307,"line_end":307,"column_start":26,"column_end":30},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":3927},"to":{"krate":0,"index":996}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":240953,"byte_end":240960,"line_start":67,"line_end":67,"column_start":12,"column_end":19},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":1169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244267,"byte_end":244274,"line_start":206,"line_end":206,"column_start":9,"column_end":16},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":1169},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244710,"byte_end":244717,"line_start":224,"line_end":224,"column_start":22,"column_end":29},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":244874,"byte_end":244881,"line_start":236,"line_end":236,"column_start":22,"column_end":29},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245080,"byte_end":245087,"line_start":249,"line_end":249,"column_start":26,"column_end":33},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245293,"byte_end":245300,"line_start":262,"line_end":262,"column_start":31,"column_end":38},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245534,"byte_end":245541,"line_start":274,"line_end":274,"column_start":29,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245730,"byte_end":245737,"line_start":285,"line_end":285,"column_start":19,"column_end":26},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":245868,"byte_end":245875,"line_start":293,"line_end":293,"column_start":53,"column_end":60},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246161,"byte_end":246168,"line_start":308,"line_end":308,"column_start":20,"column_end":27},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246435,"byte_end":246442,"line_start":321,"line_end":321,"column_start":54,"column_end":61},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":246789,"byte_end":246796,"line_start":338,"line_end":338,"column_start":22,"column_end":29},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247009,"byte_end":247016,"line_start":350,"line_end":350,"column_start":24,"column_end":31},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":8822}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247228,"byte_end":247235,"line_start":362,"line_end":362,"column_start":21,"column_end":28},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247403,"byte_end":247410,"line_start":374,"line_end":374,"column_start":21,"column_end":28},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1169},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247806,"byte_end":247818,"line_start":392,"line_end":392,"column_start":30,"column_end":42},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":3949},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/address.rs","byte_start":247961,"byte_end":247973,"line_start":400,"line_end":400,"column_start":21,"column_end":33},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":3949},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":251867,"byte_end":251873,"line_start":128,"line_end":128,"column_start":15,"column_end":21},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":253388,"byte_end":253394,"line_start":195,"line_end":195,"column_start":12,"column_end":18},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1326},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255087,"byte_end":255093,"line_start":260,"line_end":260,"column_start":22,"column_end":28},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255302,"byte_end":255308,"line_start":272,"line_end":272,"column_start":22,"column_end":28},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255493,"byte_end":255499,"line_start":282,"line_end":282,"column_start":23,"column_end":29},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":255998,"byte_end":256004,"line_start":302,"line_end":302,"column_start":6,"column_end":12},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256295,"byte_end":256301,"line_start":318,"line_end":318,"column_start":35,"column_end":41},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256518,"byte_end":256524,"line_start":331,"line_end":331,"column_start":36,"column_end":42},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":256990,"byte_end":256996,"line_start":351,"line_end":351,"column_start":6,"column_end":12},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257333,"byte_end":257339,"line_start":370,"line_end":370,"column_start":36,"column_end":42},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257592,"byte_end":257598,"line_start":383,"line_end":383,"column_start":37,"column_end":43},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":257810,"byte_end":257816,"line_start":395,"line_end":395,"column_start":25,"column_end":31},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258113,"byte_end":258119,"line_start":409,"line_end":409,"column_start":27,"column_end":33},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258352,"byte_end":258358,"line_start":422,"line_end":422,"column_start":27,"column_end":33},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":8822}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258590,"byte_end":258596,"line_start":435,"line_end":435,"column_start":24,"column_end":30},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":258991,"byte_end":258997,"line_start":454,"line_end":454,"column_start":25,"column_end":31},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":3054}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259214,"byte_end":259220,"line_start":469,"line_end":469,"column_start":25,"column_end":31},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":3067}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259385,"byte_end":259391,"line_start":480,"line_end":480,"column_start":24,"column_end":30},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":3078}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/proxy.rs","byte_start":259761,"byte_end":259767,"line_start":499,"line_end":499,"column_start":23,"column_end":29},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1326},"to":{"krate":1,"index":2951}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":263297,"byte_end":263308,"line_start":79,"line_end":79,"column_start":15,"column_end":26},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1505},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":266958,"byte_end":266969,"line_start":215,"line_end":215,"column_start":25,"column_end":36},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267123,"byte_end":267134,"line_start":227,"line_end":227,"column_start":22,"column_end":33},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267293,"byte_end":267304,"line_start":237,"line_end":237,"column_start":6,"column_end":17},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267672,"byte_end":267683,"line_start":255,"line_end":255,"column_start":27,"column_end":38},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":267886,"byte_end":267897,"line_start":268,"line_end":268,"column_start":48,"column_end":59},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268149,"byte_end":268160,"line_start":281,"line_end":281,"column_start":48,"column_end":59},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":2735}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268365,"byte_end":268376,"line_start":294,"line_end":294,"column_start":25,"column_end":36},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268725,"byte_end":268736,"line_start":310,"line_end":310,"column_start":24,"column_end":35},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":268945,"byte_end":268956,"line_start":324,"line_end":324,"column_start":28,"column_end":39},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":7233}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":269751,"byte_end":269762,"line_start":369,"line_end":369,"column_start":39,"column_end":50},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":7097}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270229,"byte_end":270240,"line_start":395,"line_end":395,"column_start":37,"column_end":48},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":7122}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270476,"byte_end":270487,"line_start":407,"line_end":407,"column_start":33,"column_end":44},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":7504}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/range.rs","byte_start":270630,"byte_end":270641,"line_start":416,"line_end":416,"column_start":48,"column_end":59},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1505},"to":{"krate":1,"index":3207}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":273815,"byte_end":273821,"line_start":120,"line_end":120,"column_start":15,"column_end":21},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":296603,"byte_end":296609,"line_start":867,"line_end":867,"column_start":12,"column_end":18},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":298587,"byte_end":298593,"line_start":942,"line_end":942,"column_start":12,"column_end":18},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1705},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306768,"byte_end":306774,"line_start":1226,"line_end":1226,"column_start":25,"column_end":31},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":306959,"byte_end":306965,"line_start":1241,"line_end":1241,"column_start":22,"column_end":28},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307083,"byte_end":307089,"line_start":1250,"line_end":1250,"column_start":23,"column_end":29},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307411,"byte_end":307417,"line_start":1265,"line_end":1265,"column_start":58,"column_end":64},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":307851,"byte_end":307857,"line_start":1284,"line_end":1284,"column_start":59,"column_end":65},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308364,"byte_end":308370,"line_start":1307,"line_end":1307,"column_start":25,"column_end":31},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308564,"byte_end":308570,"line_start":1319,"line_end":1319,"column_start":29,"column_end":35},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":308771,"byte_end":308777,"line_start":1331,"line_end":1331,"column_start":34,"column_end":40},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309030,"byte_end":309036,"line_start":1345,"line_end":1345,"column_start":32,"column_end":38},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2745}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309247,"byte_end":309253,"line_start":1358,"line_end":1358,"column_start":25,"column_end":31},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309694,"byte_end":309700,"line_start":1380,"line_end":1380,"column_start":27,"column_end":33},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":8822}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":309987,"byte_end":309993,"line_start":1395,"line_end":1395,"column_start":24,"column_end":30},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310204,"byte_end":310210,"line_start":1409,"line_end":1409,"column_start":24,"column_end":30},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1705},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310666,"byte_end":310677,"line_start":1429,"line_end":1429,"column_start":35,"column_end":46},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":310864,"byte_end":310875,"line_start":1439,"line_end":1439,"column_start":39,"column_end":50},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311055,"byte_end":311066,"line_start":1449,"line_end":1449,"column_start":30,"column_end":41},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311259,"byte_end":311270,"line_start":1459,"line_end":1459,"column_start":21,"column_end":32},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311523,"byte_end":311534,"line_start":1471,"line_end":1471,"column_start":25,"column_end":36},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/single.rs","byte_start":311585,"byte_end":311596,"line_start":1475,"line_end":1475,"column_start":25,"column_end":36},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":3985},"to":{"krate":1,"index":2844}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":319476,"byte_end":319483,"line_start":203,"line_end":203,"column_start":15,"column_end":22},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":339909,"byte_end":339916,"line_start":880,"line_end":880,"column_start":12,"column_end":19},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":341438,"byte_end":341445,"line_start":935,"line_end":935,"column_start":12,"column_end":19},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1944},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":342777,"byte_end":342784,"line_start":980,"line_end":980,"column_start":25,"column_end":32},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":342908,"byte_end":342915,"line_start":991,"line_end":991,"column_start":22,"column_end":29},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343038,"byte_end":343045,"line_start":999,"line_end":999,"column_start":59,"column_end":66},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343647,"byte_end":343654,"line_start":1020,"line_end":1020,"column_start":27,"column_end":34},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":343834,"byte_end":343841,"line_start":1033,"line_end":1033,"column_start":25,"column_end":32},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344064,"byte_end":344071,"line_start":1046,"line_end":1046,"column_start":27,"column_end":34},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":8822}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344266,"byte_end":344273,"line_start":1058,"line_end":1058,"column_start":24,"column_end":31},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1944},"to":{"krate":1,"index":2842}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344769,"byte_end":344781,"line_start":1080,"line_end":1080,"column_start":34,"column_end":46},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":344957,"byte_end":344969,"line_start":1090,"line_end":1090,"column_start":30,"column_end":42},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":2738}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":345160,"byte_end":345172,"line_start":1100,"line_end":1100,"column_start":19,"column_end":31},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":345688,"byte_end":345700,"line_start":1122,"line_end":1122,"column_start":21,"column_end":33},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346193,"byte_end":346205,"line_start":1143,"line_end":1143,"column_start":25,"column_end":37},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/ptr/span.rs","byte_start":346256,"byte_end":346268,"line_start":1147,"line_end":1147,"column_start":25,"column_end":37},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":4022},"to":{"krate":1,"index":2844}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":367536,"byte_end":367544,"line_start":458,"line_end":458,"column_start":12,"column_end":20},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":406143,"byte_end":406151,"line_start":1889,"line_end":1889,"column_start":12,"column_end":20},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":412977,"byte_end":412985,"line_start":2121,"line_end":2121,"column_start":12,"column_end":20},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":424824,"byte_end":424832,"line_start":2480,"line_end":2480,"column_start":12,"column_end":20},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":427444,"byte_end":427452,"line_start":2562,"line_end":2562,"column_start":12,"column_end":20},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice.rs","byte_start":428167,"byte_end":428175,"line_start":2588,"line_end":2588,"column_start":12,"column_end":20},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":433538,"byte_end":433546,"line_start":68,"line_end":68,"column_start":12,"column_end":20},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/api.rs","byte_start":513053,"byte_end":513062,"line_start":2720,"line_end":2720,"column_start":44,"column_end":53},"kind":{"Impl":{"id":193}},"from":{"krate":1,"index":38288},"to":{"krate":0,"index":2568}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":515438,"byte_end":515442,"line_start":105,"line_end":105,"column_start":16,"column_end":20},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":2683},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":519878,"byte_end":519882,"line_start":277,"line_end":277,"column_start":22,"column_end":26},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":2683},"to":{"krate":1,"index":2457}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520053,"byte_end":520057,"line_start":290,"line_end":290,"column_start":38,"column_end":42},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":2683},"to":{"krate":1,"index":2729}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":520222,"byte_end":520226,"line_start":301,"line_end":301,"column_start":22,"column_end":26},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":2683},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":521340,"byte_end":521347,"line_start":353,"line_end":353,"column_start":16,"column_end":23},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":2716},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":523439,"byte_end":523446,"line_start":434,"line_end":434,"column_start":22,"column_end":29},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":2716},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":534972,"byte_end":534983,"line_start":944,"line_end":944,"column_start":16,"column_end":27},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":4315},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":538090,"byte_end":538104,"line_start":1070,"line_end":1070,"column_start":16,"column_end":30},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":4355},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":547348,"byte_end":547360,"line_start":1420,"line_end":1420,"column_start":16,"column_end":28},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":4463},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":550556,"byte_end":550571,"line_start":1546,"line_end":1546,"column_start":16,"column_end":31},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":4503},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":561418,"byte_end":561437,"line_start":2032,"line_end":2032,"column_start":18,"column_end":37},"kind":"SuperTrait","from":{"krate":1,"index":7097},"to":{"krate":0,"index":2778}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567124,"byte_end":567132,"line_start":2261,"line_end":2261,"column_start":16,"column_end":24},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":4835},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567307,"byte_end":567315,"line_start":2274,"line_end":2274,"column_start":24,"column_end":32},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":567472,"byte_end":567480,"line_start":2287,"line_end":2287,"column_start":25,"column_end":33},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":7233}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":568674,"byte_end":568682,"line_start":2343,"line_end":2343,"column_start":36,"column_end":44},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":7097}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569425,"byte_end":569433,"line_start":2379,"line_end":2379,"column_start":34,"column_end":42},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":7122}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":569567,"byte_end":569575,"line_start":2389,"line_end":2389,"column_start":30,"column_end":38},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":4835},"to":{"krate":1,"index":7504}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570178,"byte_end":570187,"line_start":2415,"line_end":2415,"column_start":16,"column_end":25},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":4884},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570362,"byte_end":570371,"line_start":2428,"line_end":2428,"column_start":24,"column_end":33},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":2810}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":570528,"byte_end":570537,"line_start":2441,"line_end":2441,"column_start":25,"column_end":34},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":7233}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":571557,"byte_end":571566,"line_start":2494,"line_end":2494,"column_start":36,"column_end":45},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":7097}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572312,"byte_end":572321,"line_start":2530,"line_end":2530,"column_start":34,"column_end":43},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":7122}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/iter.rs","byte_start":572456,"byte_end":572465,"line_start":2540,"line_end":2540,"column_start":30,"column_end":39},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":4884},"to":{"krate":1,"index":7504}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579337,"byte_end":579345,"line_start":29,"line_end":29,"column_start":39,"column_end":47},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2982}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579601,"byte_end":579609,"line_start":41,"line_end":41,"column_start":38,"column_end":46},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2986}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":579865,"byte_end":579873,"line_start":53,"line_end":53,"column_start":39,"column_end":47},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2990}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/ops.rs","byte_start":580120,"byte_end":580128,"line_start":65,"line_end":65,"column_start":29,"column_end":37},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":3139}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":583212,"byte_end":583220,"line_start":38,"line_end":38,"column_start":9,"column_end":17},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/specialization.rs","byte_start":591435,"byte_end":591443,"line_start":328,"line_end":328,"column_start":9,"column_end":17},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2219},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":598672,"byte_end":598680,"line_start":45,"line_end":45,"column_start":19,"column_end":27},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2492}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":598745,"byte_end":598753,"line_start":52,"line_end":52,"column_start":20,"column_end":28},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2519}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":599244,"byte_end":599252,"line_start":70,"line_end":70,"column_start":54,"column_end":62},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":600736,"byte_end":600744,"line_start":143,"line_end":143,"column_start":55,"column_end":63},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":600951,"byte_end":600959,"line_start":155,"line_end":155,"column_start":59,"column_end":67},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2487}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":601516,"byte_end":601524,"line_start":174,"line_end":174,"column_start":55,"column_end":63},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":602529,"byte_end":602537,"line_start":221,"line_end":221,"column_start":56,"column_end":64},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":602784,"byte_end":602792,"line_start":233,"line_end":233,"column_start":60,"column_end":68},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2530}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604343,"byte_end":604351,"line_start":316,"line_end":316,"column_start":22,"column_end":30},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":8805}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":604574,"byte_end":604582,"line_start":328,"line_end":328,"column_start":24,"column_end":32},"kind":{"Impl":{"id":231}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":8812}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":610457,"byte_end":610465,"line_start":499,"line_end":499,"column_start":21,"column_end":29},"kind":{"Impl":{"id":232}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":9011}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":611724,"byte_end":611732,"line_start":534,"line_end":534,"column_start":28,"column_end":36},"kind":{"Impl":{"id":233}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2832}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/slice/traits.rs","byte_start":612908,"byte_end":612916,"line_start":564,"line_end":564,"column_start":28,"column_end":36},"kind":{"Impl":{"id":234}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":2844}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620104,"byte_end":620110,"line_start":149,"line_end":149,"column_start":37,"column_end":43},"kind":"SuperTrait","from":{"krate":0,"index":3345},"to":{"krate":0,"index":3329}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/store.rs","byte_start":620113,"byte_end":620118,"line_start":149,"line_end":149,"column_start":46,"column_end":51},"kind":"SuperTrait","from":{"krate":1,"index":8805},"to":{"krate":0,"index":3329}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":632352,"byte_end":632353,"line_start":119,"line_end":119,"column_start":21,"column_end":22},"kind":{"Impl":{"id":255}},"from":{"krate":0,"index":3383},"to":{"krate":0,"index":3374}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637563,"byte_end":637564,"line_start":335,"line_end":335,"column_start":26,"column_end":27},"kind":{"Impl":{"id":256}},"from":{"krate":0,"index":3417},"to":{"krate":0,"index":3408}},{"span":{"file_name":"/Users/julia/.cargo/registry/src/github.com-1ecc6299db9ec823/bitvec-0.20.4/src/view.rs","byte_start":637788,"byte_end":637789,"line_start":348,"line_end":348,"column_start":29,"column_end":30},"kind":{"Impl":{"id":257}},"from":{"krate":0,"index":3422},"to":{"krate":0,"index":3412}}]}